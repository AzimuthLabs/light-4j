<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Light Java - The fastest Java API Framework</title>
    <link>https://networknt.github.io/light-java/index.xml</link>
    <description>Recent content on Light Java - The fastest Java API Framework</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <lastBuildDate>Mon, 23 Jan 2017 09:07:32 -0500</lastBuildDate>
    <atom:link href="https://networknt.github.io/light-java/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Database Access Tutorial</title>
      <link>https://networknt.github.io/light-java/tutorials/database/</link>
      <pubDate>Mon, 23 Jan 2017 09:07:32 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-java/tutorials/database/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Most microservices will have to access database in order to fulfill consumer requests.
In this tutorial, we will walk through the following steps with Oracle/Postgres/Mysql:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to setup database connection pool&lt;/li&gt;
&lt;li&gt;How to connect to the database instance&lt;/li&gt;
&lt;li&gt;How to do query database tables&lt;/li&gt;
&lt;li&gt;How to update database tables&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;preparation&#34;&gt;Preparation&lt;/h1&gt;

&lt;p&gt;In order to follow the steps below, please make sure you have the same working environment.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A computer with MacOS or Linux (Windows should work but I never tried)&lt;/li&gt;
&lt;li&gt;Install git&lt;/li&gt;
&lt;li&gt;Install Docker&lt;/li&gt;
&lt;li&gt;Install JDK 8 and Maven&lt;/li&gt;
&lt;li&gt;Install Java IDE (Intellij IDEA Community Edition is recommended)&lt;/li&gt;
&lt;li&gt;Create a working directory under your user directory called networknt.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;create-database-demo-specification&#34;&gt;Create Database Demo Specification&lt;/h1&gt;

&lt;p&gt;First let&amp;rsquo;s build an OpenAPI specification with several endpoints to demo database
access. You will need &lt;a href=&#34;https://networknt.github.io/light-java/tools/swagger-editor/&#34;&gt;swagger editor&lt;/a&gt;
to create a specification.&lt;/p&gt;

&lt;p&gt;Here is the OpenAPI specification created and it can be found in
&lt;a href=&#34;https://github.com/networknt/swagger&#34;&gt;swagger repo&lt;/a&gt; database sub folder.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;swagger: &#39;2.0&#39;

info:
  version: &amp;quot;1.0.0&amp;quot;
  title: Light-Java-Rest Database Tutorial
  description: A demo on how to connect, query and update Oracle/Mysql/Postgres. 
  contact:
    email: stevehu@gmail.com
  license:
    name: &amp;quot;Apache 2.0&amp;quot;
    url: &amp;quot;http://www.apache.org/licenses/LICENSE-2.0.html&amp;quot;
host: database.networknt.com
schemes:
  - http
  - https
basePath: /v1

consumes:
  - application/json
produces:
  - application/json

paths:
  /query:
    get:
      description: Single query to database table
      operationId: getQuery
      responses:
        200:
          description: &amp;quot;successful operation&amp;quot;
          schema:
            $ref: &amp;quot;#/definitions/RandomNumber&amp;quot;          
      security:
      - database_auth:
        - &amp;quot;database.r&amp;quot;
  /queries:
    get:
      description: Multiple queries to database table
      operationId: getQueries
      parameters:
      - name: &amp;quot;queries&amp;quot;
        in: &amp;quot;query&amp;quot;
        description: &amp;quot;Number of random numbers&amp;quot;
        required: false
        type: &amp;quot;integer&amp;quot;
        format: &amp;quot;int32&amp;quot;
      responses:
        200:
          description: &amp;quot;successful operation&amp;quot;
          schema:
            type: &amp;quot;array&amp;quot;
            items:
              $ref: &amp;quot;#/definitions/RandomNumber&amp;quot;
      security:
      - database_auth:
        - &amp;quot;database.r&amp;quot;
  /updates:
    get:
      description: Multiple updates to database table
      operationId: getUpdates
      parameters:
      - name: &amp;quot;queries&amp;quot;
        in: &amp;quot;query&amp;quot;
        description: &amp;quot;Number of random numbers&amp;quot;
        required: false
        type: &amp;quot;integer&amp;quot;
        format: &amp;quot;int32&amp;quot;
      responses:
        200:
          description: &amp;quot;successful operation&amp;quot;
          schema:
            type: &amp;quot;array&amp;quot;
            items:
              $ref: &amp;quot;#/definitions/RandomNumber&amp;quot;
      security:
      - database_auth:
        - &amp;quot;database.w&amp;quot;
securityDefinitions:
  database_auth:
    type: &amp;quot;oauth2&amp;quot;
    authorizationUrl: &amp;quot;http://localhost:8888/oauth2/code&amp;quot;
    flow: &amp;quot;implicit&amp;quot;
    scopes:
      database.w: &amp;quot;write database table&amp;quot;
      database.r: &amp;quot;read database table&amp;quot;
definitions:
  RandomNumber:
    type: &amp;quot;object&amp;quot;
    required:
    - &amp;quot;id&amp;quot;
    - &amp;quot;randomNumber&amp;quot;
    properties:
      id:
        type: &amp;quot;integer&amp;quot;
        format: &amp;quot;int32&amp;quot;
        description: &amp;quot;a unique id as primary key&amp;quot;
      randomNumber:
        type: &amp;quot;integer&amp;quot;
        format: &amp;quot;int32&amp;quot;
        description: &amp;quot;a random number&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s clone the swagger repo to your working directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt
git clone https://github.com/networknt/swagger
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;generate-demo-project&#34;&gt;Generate Demo Project&lt;/h1&gt;

&lt;p&gt;With the specification in place, we can generate the code with &lt;a href=&#34;https://github.com/networknt/swagger-codegen&#34;&gt;swagger-codegen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are two different ways to generate the code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Local build&lt;/li&gt;
&lt;li&gt;Docker container&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To learn how to use the tool, please refer to this &lt;a href=&#34;tools/swagger-codegen/&#34;&gt;document&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;generate-code-with-local-build&#34;&gt;Generate code with local build&lt;/h3&gt;

&lt;p&gt;Clone and build swagger-codegen&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt
git clone git@github.com:networknt/swagger-codegen.git
cd swagger-codegen
mvn clean install -DskipTests
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For this demo, I am going to generate the code into light-java-example/database/generated
folder so that users can check the code later on from this repo.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s checkout the light-java-example repo and backup the existing database project.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt
git clone git@github.com:networknt/light-java-example.git
cd light-java-example
mv database database.bak
mkdir database
cd database
mkdir generated
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before generating the project, we need to create a config.json to define packages,
artifactId and groupId for the project.&lt;/p&gt;

&lt;p&gt;Here is the content of the file and it can be found in ~/networknt/swagger/database&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;invokerPackage&amp;quot;: &amp;quot;com.networknt.database&amp;quot;,
  &amp;quot;apiPackage&amp;quot;:&amp;quot;com.networknt.database.handler&amp;quot;,
  &amp;quot;modelPackage&amp;quot;:&amp;quot;com.networknt.database.model&amp;quot;,
  &amp;quot;artifactId&amp;quot;: &amp;quot;database&amp;quot;,
  &amp;quot;groupId&amp;quot;: &amp;quot;com.networknt&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Code generation&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt/swagger-codegen
java -jar modules/swagger-codegen-cli/target/swagger-codegen-cli.jar generate -c ~/networknt/swagger/database/config.json -i ~/networknt/swagger/database/swagger.yaml -l light-java -o ~/networknt/light-java-example/database/generated

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you should have a project generated. Let&amp;rsquo;s build it and run it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt
cd light-java-example/database/generated
mvn clean install exec:exec
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can access the service with curl following the step below.&lt;/p&gt;

&lt;h3 id=&#34;generate-code-with-docker-container&#34;&gt;Generate code with docker container&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s remove the generated folder from light-java-example/database folder and
generate the project again with docker container.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt/light-java-example/database
rm -rf generated
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s generate the project again with docker.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt
docker run -it -v ~/networknt/swagger/database:/swagger-api/swagger -v ~/networknt/light-java-example/database:/swagger-api/out networknt/swagger-codegen generate -c /swagger-api/swagger/config.json -i /swagger-api/swagger/swagger.yaml -l light-java -o /swagger-api/out/generated

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s build and start the service&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt/light-java-example/database/generated
mvn clean install exec:exec
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can access the service with curl following the next step.&lt;/p&gt;

&lt;h3 id=&#34;test-the-service&#34;&gt;Test the service&lt;/h3&gt;

&lt;p&gt;Now the service is up and running. Let&amp;rsquo;s access it from curl&lt;/p&gt;

&lt;p&gt;Single query&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl http://localhost:8080/v1/query

{  &amp;quot;randomNumber&amp;quot; : 123,  &amp;quot;id&amp;quot; : 123}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Multiple queries with default number of object returned&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl http://localhost:8080/v1/queries

[ {  &amp;quot;randomNumber&amp;quot; : 123,  &amp;quot;id&amp;quot; : 123} ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Multiple queries with 10 numbers returned&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl http://localhost:8080/v1/queries?queries=10

[ {  &amp;quot;randomNumber&amp;quot; : 123,  &amp;quot;id&amp;quot; : 123} ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Multiple updates with default number of object updated&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl http://localhost:8080/v1/updates

[ {  &amp;quot;randomNumber&amp;quot; : 123,  &amp;quot;id&amp;quot; : 123} ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Multiple updates with 10 numbers updated&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl http://localhost:8080/v1/updates?queries=10

[ {  &amp;quot;randomNumber&amp;quot; : 123,  &amp;quot;id&amp;quot; : 123} ]
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;prepare-database-scripts&#34;&gt;Prepare Database Scripts&lt;/h1&gt;

&lt;p&gt;For database access, we are going to prepare three scripts for Oracle, Mysql and Postgres.&lt;/p&gt;

&lt;p&gt;Oracle&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DROP TABLE world CASCADE CONSTRAINTS;
CREATE TABLE  world (
  id int NOT NULL,
  randomNumber int NOT NULL,
  PRIMARY KEY  (id)
);

BEGIN
FOR loop_counter IN 1..10000 LOOP
INSERT INTO world (id, randomNumber)
VALUES (loop_counter, dbms_random.value(1,10000)
       );
END LOOP;
COMMIT;
END;

DROP TABLE fortune CASCADE CONSTRAINTS;
CREATE TABLE fortune (
  id int NOT NULL,
  message varchar2(2048) NOT NULL,
  PRIMARY KEY  (id)
);

INSERT INTO fortune (id, message) VALUES (1, &#39;fortune: No such file or directory&#39;);
INSERT INTO fortune (id, message) VALUES (2, &#39;A computer scientist is someone who fixes things that aren&#39;&#39;t broken.&#39;);
INSERT INTO fortune (id, message) VALUES (3, &#39;After enough decimal places, nobody gives a damn.&#39;);
INSERT INTO fortune (id, message) VALUES (4, &#39;A bad random number generator: 1, 1, 1, 1, 1, 4.33e+67, 1, 1, 1&#39;);
INSERT INTO fortune (id, message) VALUES (5, &#39;A computer program does what you tell it to do, not what you want it to do.&#39;);
INSERT INTO fortune (id, message) VALUES (6, &#39;Emacs is a nice operating system, but I prefer UNIX. — Tom Christaensen&#39;);
INSERT INTO fortune (id, message) VALUES (7, &#39;Any program that runs right is obsolete.&#39;);
INSERT INTO fortune (id, message) VALUES (8, &#39;A list is only as strong as its weakest link. — Donald Knuth&#39;);
INSERT INTO fortune (id, message) VALUES (9, &#39;Feature: A bug with seniority.&#39;);
INSERT INTO fortune (id, message) VALUES (10, &#39;Computers make very fast, very accurate mistakes.&#39;);
INSERT INTO fortune (id, message) VALUES (11, &#39;&amp;lt;script&amp;gt;alert(&amp;quot;This should not be displayed in a browser alert box.&amp;quot;);&amp;lt;/script&amp;gt;&#39;);
INSERT INTO fortune (id, message) VALUES (12, &#39;フレームワークのベンチマーク&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mysql&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# modified from SO answer http://stackoverflow.com/questions/5125096/for-loop-in-mysql
DROP DATABASE IF EXISTS hello_world;
CREATE DATABASE hello_world;
USE hello_world;

DROP TABLE IF EXISTS world;
CREATE TABLE  world (
  id int(10) unsigned NOT NULL auto_increment,
  randomNumber int NOT NULL default 0,
  PRIMARY KEY  (id)
)
ENGINE=INNODB;

DROP PROCEDURE IF EXISTS load_data;

DELIMITER #
CREATE PROCEDURE load_data()
BEGIN

declare v_max int unsigned default 10000;
declare v_counter int unsigned default 0;

  TRUNCATE TABLE world;
  START TRANSACTION;
  while v_counter &amp;lt; v_max do
    INSERT INTO world (randomNumber) VALUES ( floor(0 + (rand() * 10000)) );
    SET v_counter=v_counter+1;
  end while;
  commit;
END #

DELIMITER ;

CALL load_data();

DROP TABLE IF EXISTS fortune;
CREATE TABLE  fortune (
  id int(10) unsigned NOT NULL auto_increment,
  message varchar(2048) CHARACTER SET &#39;utf8&#39; NOT NULL,
  PRIMARY KEY  (id)
)
ENGINE=INNODB;

INSERT INTO fortune (message) VALUES (&#39;fortune: No such file or directory&#39;);
INSERT INTO fortune (message) VALUES (&#39;A computer scientist is someone who fixes things that aren&#39;&#39;t broken.&#39;);
INSERT INTO fortune (message) VALUES (&#39;After enough decimal places, nobody gives a damn.&#39;);
INSERT INTO fortune (message) VALUES (&#39;A bad random number generator: 1, 1, 1, 1, 1, 4.33e+67, 1, 1, 1&#39;);
INSERT INTO fortune (message) VALUES (&#39;A computer program does what you tell it to do, not what you want it to do.&#39;);
INSERT INTO fortune (message) VALUES (&#39;Emacs is a nice operating system, but I prefer UNIX. — Tom Christaensen&#39;);
INSERT INTO fortune (message) VALUES (&#39;Any program that runs right is obsolete.&#39;);
INSERT INTO fortune (message) VALUES (&#39;A list is only as strong as its weakest link. — Donald Knuth&#39;);
INSERT INTO fortune (message) VALUES (&#39;Feature: A bug with seniority.&#39;);
INSERT INTO fortune (message) VALUES (&#39;Computers make very fast, very accurate mistakes.&#39;);
INSERT INTO fortune (message) VALUES (&#39;&amp;lt;script&amp;gt;alert(&amp;quot;This should not be displayed in a browser alert box.&amp;quot;);&amp;lt;/script&amp;gt;&#39;);
INSERT INTO fortune (message) VALUES (&#39;フレームワークのベンチマーク&#39;);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Postgres&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
DROP TABLE IF EXISTS world;
CREATE TABLE  world (
  id integer NOT NULL,
  randomNumber integer NOT NULL default 0,
  PRIMARY KEY  (id)
);

INSERT INTO world (id, randomnumber)
SELECT x.id, random() * 10000 + 1 FROM generate_series(1,10000) as x(id);

DROP TABLE IF EXISTS fortune;
CREATE TABLE fortune (
  id integer NOT NULL,
  message varchar(2048) NOT NULL,
  PRIMARY KEY  (id)
);

INSERT INTO fortune (id, message) VALUES (1, &#39;fortune: No such file or directory&#39;);
INSERT INTO fortune (id, message) VALUES (2, &#39;A computer scientist is someone who fixes things that aren&#39;&#39;t broken.&#39;);
INSERT INTO fortune (id, message) VALUES (3, &#39;After enough decimal places, nobody gives a damn.&#39;);
INSERT INTO fortune (id, message) VALUES (4, &#39;A bad random number generator: 1, 1, 1, 1, 1, 4.33e+67, 1, 1, 1&#39;);
INSERT INTO fortune (id, message) VALUES (5, &#39;A computer program does what you tell it to do, not what you want it to do.&#39;);
INSERT INTO fortune (id, message) VALUES (6, &#39;Emacs is a nice operating system, but I prefer UNIX. — Tom Christaensen&#39;);
INSERT INTO fortune (id, message) VALUES (7, &#39;Any program that runs right is obsolete.&#39;);
INSERT INTO fortune (id, message) VALUES (8, &#39;A list is only as strong as its weakest link. — Donald Knuth&#39;);
INSERT INTO fortune (id, message) VALUES (9, &#39;Feature: A bug with seniority.&#39;);
INSERT INTO fortune (id, message) VALUES (10, &#39;Computers make very fast, very accurate mistakes.&#39;);
INSERT INTO fortune (id, message) VALUES (11, &#39;&amp;lt;script&amp;gt;alert(&amp;quot;This should not be displayed in a browser alert box.&amp;quot;);&amp;lt;/script&amp;gt;&#39;);
INSERT INTO fortune (id, message) VALUES (12, &#39;フレームワークのベンチマーク&#39;);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Above scripts can be found in &lt;a href=&#34;https://github.com/networknt/light-java-example/tree/master/database/dbscript&#34;&gt;https://github.com/networknt/light-java-example/tree/master/database/dbscript&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;start-databases&#34;&gt;Start Databases&lt;/h1&gt;

&lt;p&gt;In order to work on our service, we need to start database standalone for now. Depending
on which database you are working on, you can choose one of them below. For this demo
use mysql and later on we can switch to Postgres and Oracle.&lt;/p&gt;

&lt;p&gt;Oracle Database&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -v ~/networknt/light-java-example/database/dbscript/oracle:/docker-entrypoint-initdb.d -d -p 1522:1521 wnameless/oracle-xe-11g
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mysql Database&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -v ~/networknt/light-java-example/database/dbscript/mysql:/docker-entrypoint-initdb.d -e MYSQL_ROOT_PASSWORD=my-secret-pw -d -p 3306:3306 mysql

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Postgres Database&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -v ~/networknt/light-java-example/database/dbscript/postgres:/docker-entrypoint-initdb.d -e POSTGRES_PASSWORD=my-secret-pw -e POSTGRES_DB=hello_world -d -p 5432:5432 postgres

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;setup-connection-pool&#34;&gt;Setup Connection Pool&lt;/h1&gt;

&lt;p&gt;To connect to database we need to create service.json that can inject connection pool
to the microservice you are building.&lt;/p&gt;

&lt;p&gt;Now we have generated project, let&amp;rsquo;s copy it and update with db connection pool&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt/light-java-example/database
cp -r generated connection
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add the following service.json to ~/networknt/light-java-example/database/connection/src/main/resources/config&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;singleton service factory configuration&amp;quot;,
  &amp;quot;singletons&amp;quot;: [
    {
      &amp;quot;javax.sql.DataSource&amp;quot;: [
        {
          &amp;quot;com.zaxxer.hikari.HikariDataSource&amp;quot;:
          {
            &amp;quot;jdbcUrl&amp;quot;: &amp;quot;jdbc:mysql://localhost:3306/hello_world?useSSL=false&amp;quot;,
            &amp;quot;username&amp;quot;: &amp;quot;root&amp;quot;,
            &amp;quot;password&amp;quot;: &amp;quot;my-secret-pw&amp;quot;,
            &amp;quot;maximumPoolSize&amp;quot;: 95,
            &amp;quot;useServerPrepStmts&amp;quot;: true,
            &amp;quot;cachePrepStmts&amp;quot;: true,
            &amp;quot;cacheCallableStmts&amp;quot;: true,
            &amp;quot;prepStmtCacheSize&amp;quot;: 4096,
            &amp;quot;prepStmtCacheSqlLimit&amp;quot;: 2048
          }
        }
      ]
    }
  ]
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The service.json will make sure the a Hikari DataSource will be created during server startup
with the dependency injection module. You can find other database&amp;rsquo;s service.json in
&lt;a href=&#34;https://github.com/networknt/light-java-example/tree/master/database/dbscript&#34;&gt;https://github.com/networknt/light-java-example/tree/master/database/dbscript&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to do that we need to add several jars into the dependency in pom.xml&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        &amp;lt;version.hikaricp&amp;gt;2.5.1&amp;lt;/version.hikaricp&amp;gt;
        &amp;lt;version.fastscanner&amp;gt;2.0.8&amp;lt;/version.fastscanner&amp;gt;
        &amp;lt;version.h2&amp;gt;1.3.176&amp;lt;/version.h2&amp;gt;
        &amp;lt;version.hazelcast&amp;gt;3.6.7&amp;lt;/version.hazelcast&amp;gt;
        &amp;lt;version.oracle&amp;gt;11.2.0.3&amp;lt;/version.oracle&amp;gt;
        &amp;lt;version.mysql&amp;gt;6.0.4&amp;lt;/version.mysql&amp;gt;
        &amp;lt;version.postgres&amp;gt;9.4.1211&amp;lt;/version.postgres&amp;gt;


        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.zaxxer&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;HikariCP&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${version.hikaricp}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;io.github.lukehutch&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;fast-classpath-scanner&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${version.fastscanner}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.oracle&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;ojdbc6&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${version.oracle}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${version.mysql}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.postgresql&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;postgresql&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${version.postgres}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can add a line in each handler to get the DataSource as a static variable.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    private static final DataSource ds = (DataSource) SingletonServiceFactory.getBean(DataSource.class);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you can build, start and access the server with curl, that means the database connection
is created. The next step we will try to query from database.&lt;/p&gt;

&lt;h1 id=&#34;single-database-query&#34;&gt;Single Database Query&lt;/h1&gt;

&lt;p&gt;Let&amp;rsquo;s copy connection to query&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt/light-java-example/database
cp -r connection query

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And let&amp;rsquo;s update QueryGetHandler.java&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.networknt.database.handler;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.networknt.config.Config;
import com.networknt.database.model.RandomNumber;
import com.networknt.service.SingletonServiceFactory;
import io.undertow.server.HttpHandler;
import io.undertow.server.HttpServerExchange;
import io.undertow.util.Headers;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.Future;

public class QueryGetHandler implements HttpHandler {
    private static final DataSource ds = (DataSource) SingletonServiceFactory.getBean(DataSource.class);
    private static final ObjectMapper mapper = Config.getInstance().getMapper();

    @Override
    public void handleRequest(HttpServerExchange exchange) throws Exception {
        if (exchange.isInIoThread()) {
            exchange.dispatch(this);
            return;
        }
        int queries = 1;

        RandomNumber[] randomNumbers = new RandomNumber[queries];
        try (final Connection connection = ds.getConnection()) {
            Map&amp;lt;Integer, Future&amp;lt;RandomNumber&amp;gt;&amp;gt; futureWorlds = new ConcurrentHashMap&amp;lt;&amp;gt;();
            for (int i = 0; i &amp;lt; queries; i++) {
                futureWorlds.put(i, Helper.EXECUTOR.submit(new Callable&amp;lt;RandomNumber&amp;gt;(){
                    @Override
                    public RandomNumber call() throws Exception {
                        try (PreparedStatement statement = connection.prepareStatement(
                                &amp;quot;SELECT * FROM world WHERE id = ?&amp;quot;,
                                ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY)) {

                            statement.setInt(1, Helper.randomWorld());
                            ResultSet resultSet = statement.executeQuery();
                            resultSet.next();
                            return new RandomNumber(
                                    resultSet.getInt(&amp;quot;id&amp;quot;),
                                    resultSet.getInt(&amp;quot;randomNumber&amp;quot;));
                        }
                    }
                }));
            }

            for (int i = 0; i &amp;lt; queries; i++) {
                randomNumbers[i] = futureWorlds.get(i).get();
            }
        }
        exchange.getResponseHeaders().put(
                Headers.CONTENT_TYPE, &amp;quot;application/json&amp;quot;);

        exchange.getResponseSender().send(mapper.writeValueAsString(randomNumbers[0]));
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And add a helper class Helper.java&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.networknt.database.handler;

import io.undertow.server.HttpServerExchange;

import java.util.Deque;
import java.util.concurrent.*;

/**
 * Created by stevehu on 2017-01-23.
 */
public class Helper {
    private Helper() {
        throw new AssertionError();
    }

    /**
     * Returns the value of the &amp;quot;queries&amp;quot; request parameter, which is an integer
     * bound between 1 and 500 with a default value of 1.
     *
     * @param exchange the current HTTP exchange
     * @return the value of the &amp;quot;queries&amp;quot; request parameter
     */
    static int getQueries(HttpServerExchange exchange) {
        Deque&amp;lt;String&amp;gt; values = exchange.getQueryParameters().get(&amp;quot;queries&amp;quot;);
        if (values == null) {
            return 1;
        }
        String textValue = values.peekFirst();
        if (textValue == null) {
            return 1;
        }
        try {
            int parsedValue = Integer.parseInt(textValue);
            return Math.min(500, Math.max(1, parsedValue));
        } catch (NumberFormatException e) {
            return 1;
        }
    }

    /**
     * Returns a random integer that is a suitable value for both the {@code id}
     * and {@code randomNumber} properties of a world object.
     *
     * @return a random world number
     */
    static int randomWorld() {
        return 1 + ThreadLocalRandom.current().nextInt(10000);
    }

    private static final int cpuCount = Runtime.getRuntime().availableProcessors();

    // todo: parameterize multipliers
    public static ExecutorService EXECUTOR =
            new ThreadPoolExecutor(
                    cpuCount * 2, cpuCount * 25, 200, TimeUnit.MILLISECONDS,
                    new LinkedBlockingQueue&amp;lt;Runnable&amp;gt;(cpuCount * 100),
                    new ThreadPoolExecutor.CallerRunsPolicy());

}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And add a constructor that accept two integer as parameters for RandomNumber.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  public RandomNumber(int id, int randomNumber) {
    this.id = id;
    this.randomNumber = randomNumber;
  }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are good to go.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt/light-java-example/database/query
mvn clean install exec:exec
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Access the query endpoint and you will result the random number as result.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl http://localhost:8080/v1/query

{&amp;quot;id&amp;quot;:4495,&amp;quot;randomNumber&amp;quot;:6569}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;multiple-database-queries&#34;&gt;Multiple Database Queries&lt;/h1&gt;

&lt;p&gt;Let&amp;rsquo;s build multiple queries based on the codebase of single query.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt/light-java-example/database
cp -r query queries
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s update queries project for QueriesGetHandler.java&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.networknt.database.handler;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.networknt.config.Config;
import com.networknt.database.model.RandomNumber;
import com.networknt.service.SingletonServiceFactory;
import io.undertow.server.HttpHandler;
import io.undertow.server.HttpServerExchange;
import io.undertow.util.Headers;
import io.undertow.util.HttpString;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.Future;

import org.apache.commons.lang3.StringEscapeUtils;

import javax.sql.DataSource;

public class QueriesGetHandler implements HttpHandler {
    private static final DataSource ds = (DataSource) SingletonServiceFactory.getBean(DataSource.class);
    private static final ObjectMapper mapper = Config.getInstance().getMapper();

    @Override
    public void handleRequest(HttpServerExchange exchange) throws Exception {
        if (exchange.isInIoThread()) {
            exchange.dispatch(this);
            return;
        }
        int queries = Helper.getQueries(exchange);

        RandomNumber[] randomNumbers = new RandomNumber[queries];
        try (final Connection connection = ds.getConnection()) {
            Map&amp;lt;Integer, Future&amp;lt;RandomNumber&amp;gt;&amp;gt; futureWorlds = new ConcurrentHashMap&amp;lt;&amp;gt;();
            for (int i = 0; i &amp;lt; queries; i++) {
                futureWorlds.put(i, Helper.EXECUTOR.submit(new Callable&amp;lt;RandomNumber&amp;gt;(){
                    @Override
                    public RandomNumber call() throws Exception {
                        try (PreparedStatement statement = connection.prepareStatement(
                                &amp;quot;SELECT * FROM world WHERE id = ?&amp;quot;,
                                ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY)) {

                            statement.setInt(1, Helper.randomWorld());
                            ResultSet resultSet = statement.executeQuery();
                            resultSet.next();
                            return new RandomNumber(
                                    resultSet.getInt(&amp;quot;id&amp;quot;),
                                    resultSet.getInt(&amp;quot;randomNumber&amp;quot;));
                        }
                    }
                }));
            }

            for (int i = 0; i &amp;lt; queries; i++) {
                randomNumbers[i] = futureWorlds.get(i).get();
            }
        }
        exchange.getResponseHeaders().put(
                Headers.CONTENT_TYPE, &amp;quot;application/json&amp;quot;);
        exchange.getResponseSender().send(mapper.writeValueAsString(randomNumbers));
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s build and test the server&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt/light-java-example/database/queries
mvn clean install exec:exec
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s test it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl http://localhost:8080/v1/queries
[{&amp;quot;id&amp;quot;:1480,&amp;quot;randomNumber&amp;quot;:4720}]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again with 10 random numbers&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl http://localhost:8080/v1/queries?queries=10

[{&amp;quot;id&amp;quot;:4473,&amp;quot;randomNumber&amp;quot;:2370},{&amp;quot;id&amp;quot;:1142,&amp;quot;randomNumber&amp;quot;:3999},{&amp;quot;id&amp;quot;:6022,&amp;quot;randomNumber&amp;quot;:1683},{&amp;quot;id&amp;quot;:159,&amp;quot;randomNumber&amp;quot;:4017},{&amp;quot;id&amp;quot;:8512,&amp;quot;randomNumber&amp;quot;:3248},{&amp;quot;id&amp;quot;:4291,&amp;quot;randomNumber&amp;quot;:620},{&amp;quot;id&amp;quot;:3238,&amp;quot;randomNumber&amp;quot;:1257},{&amp;quot;id&amp;quot;:8524,&amp;quot;randomNumber&amp;quot;:256},{&amp;quot;id&amp;quot;:7869,&amp;quot;randomNumber&amp;quot;:1709},{&amp;quot;id&amp;quot;:6410,&amp;quot;randomNumber&amp;quot;:9362}]
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;update-database&#34;&gt;Update Database&lt;/h1&gt;

&lt;p&gt;Let&amp;rsquo;s copy the queries to updates in order to work on updates&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt/light-java-example/database
cp -r queries updates
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s update UpdatesGetHandler.java in updates folder.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.networknt.database.handler;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.networknt.config.Config;
import com.networknt.database.model.RandomNumber;
import com.networknt.service.SingletonServiceFactory;
import io.undertow.server.HttpHandler;
import io.undertow.server.HttpServerExchange;
import io.undertow.util.Headers;
import io.undertow.util.HttpString;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.Future;

import org.apache.commons.lang3.StringEscapeUtils;

import javax.sql.DataSource;

public class UpdatesGetHandler implements HttpHandler {
    private static final DataSource ds = (DataSource) SingletonServiceFactory.getBean(DataSource.class);
    private static final ObjectMapper mapper = Config.getInstance().getMapper();

    @Override
    public void handleRequest(HttpServerExchange exchange) throws Exception {
        if (exchange.isInIoThread()) {
            exchange.dispatch(this);
            return;
        }
        int queries = Helper.getQueries(exchange);
        RandomNumber[] worlds = new RandomNumber[queries];
        try (final Connection connection = ds.getConnection()) {
            Map&amp;lt;Integer, Future&amp;lt;RandomNumber&amp;gt;&amp;gt; futureWorlds = new ConcurrentHashMap&amp;lt;&amp;gt;();
            for (int i = 0; i &amp;lt; queries; i++) {
                futureWorlds.put(i, Helper.EXECUTOR.submit(new Callable&amp;lt;RandomNumber&amp;gt;() {
                    @Override
                    public RandomNumber call() throws Exception {
                        RandomNumber rn;
                        try (PreparedStatement update = connection.prepareStatement(
                                &amp;quot;UPDATE world SET randomNumber = ? WHERE id= ?&amp;quot;)) {
                            try (PreparedStatement query = connection.prepareStatement(
                                    &amp;quot;SELECT * FROM world WHERE id = ?&amp;quot;,
                                    ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY)) {

                                query.setInt(1, Helper.randomWorld());
                                ResultSet resultSet = query.executeQuery();
                                resultSet.next();
                                rn = new RandomNumber(
                                        resultSet.getInt(&amp;quot;id&amp;quot;),
                                        resultSet.getInt(&amp;quot;randomNumber&amp;quot;));
                            }
                            rn.setRandomNumber(Helper.randomWorld());
                            update.setInt(1, rn.getRandomNumber());
                            update.setInt(2, rn.getId());
                            update.executeUpdate();
                            return rn;
                        }
                    }
                }));
            }
            for (int i = 0; i &amp;lt; queries; i++) {
                worlds[i] = futureWorlds.get(i).get();
            }
        }
        exchange.getResponseHeaders().put(
                Headers.CONTENT_TYPE, &amp;quot;application/json&amp;quot;);
        exchange.getResponseSender().send(mapper.writeValueAsString(worlds));
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s build and start the server&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt/light-java-example/database/updates
mvn clean install exec:exec

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s test it with one update&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl http://localhost:8080/v1/updates

[{&amp;quot;id&amp;quot;:4682,&amp;quot;randomNumber&amp;quot;:1717}]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s test it with multiple updates&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl http://localhost:8080/v1/updates?queries=10

[{&amp;quot;id&amp;quot;:6395,&amp;quot;randomNumber&amp;quot;:938},{&amp;quot;id&amp;quot;:4124,&amp;quot;randomNumber&amp;quot;:4406},{&amp;quot;id&amp;quot;:7694,&amp;quot;randomNumber&amp;quot;:936},{&amp;quot;id&amp;quot;:502,&amp;quot;randomNumber&amp;quot;:5784},{&amp;quot;id&amp;quot;:6992,&amp;quot;randomNumber&amp;quot;:8037},{&amp;quot;id&amp;quot;:3607,&amp;quot;randomNumber&amp;quot;:3462},{&amp;quot;id&amp;quot;:6910,&amp;quot;randomNumber&amp;quot;:6195},{&amp;quot;id&amp;quot;:7388,&amp;quot;randomNumber&amp;quot;:9233},{&amp;quot;id&amp;quot;:6235,&amp;quot;randomNumber&amp;quot;:4825},{&amp;quot;id&amp;quot;:4924,&amp;quot;randomNumber&amp;quot;:1066}]
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;switch-to-postgres&#34;&gt;Switch to Postgres&lt;/h1&gt;

&lt;p&gt;The first step is to start the postgres database in docker. The command
has shown above.&lt;/p&gt;

&lt;p&gt;To switch to Postgres database, you just need to replace server.json from
dbscript/postgres/config folder. First let&amp;rsquo;s create a new folder from
updates and modify the service.json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt/light-java-example/database
cp -r updates postgres
cp dbscript/postgres/config/service.json postgres/src/main/resources/config
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s build the server from postgres folder.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd postgres
mvn clean install exec:exec
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can test the server with curl to verify that the server is working with
Postgres database.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl http://localhost:8080/v1/query
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;switch-to-oracle&#34;&gt;Switch to Oracle&lt;/h1&gt;

&lt;p&gt;The first step is to start Oracle database in docker. The command has
shown above.&lt;/p&gt;

&lt;p&gt;Next we need to add a repo into pom.xml as Oracle client jar is not in
maven central due to licensing issue.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;repositories&amp;gt;
        &amp;lt;!-- Repository for ORACLE ojdbc6. --&amp;gt;
        &amp;lt;repository&amp;gt;
            &amp;lt;id&amp;gt;codelds&amp;lt;/id&amp;gt;
            &amp;lt;url&amp;gt;https://code.lds.org/nexus/content/groups/main-repo&amp;lt;/url&amp;gt;
        &amp;lt;/repository&amp;gt;
    &amp;lt;/repositories&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To switch to Oracle database, you just need to replace server.json from
dbscript/oracle/config folder. First let&amp;rsquo;s create a new folder from
updates and modify the service.json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt/light-java-example/database
cp -r updates oracle
cp dbscript/oracle/config/service.json oracle/src/main/resources/config
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s build the server from postgres folder.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd oracle
mvn clean install exec:exec
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can test the server with curl to verify that the server is working with
Oracle database.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl http://localhost:8080/v1/query
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;end-to-end-test&#34;&gt;End-to-End Test&lt;/h1&gt;

&lt;p&gt;In this step, we are going to create some end-to-end test cases. As these tests
are very important in ensuring the server you build works. They give us confidence
on changing the code and support continuous integration to production.&lt;/p&gt;

&lt;p&gt;Given our code is based on a light weight Http framework, all our tests will be
using the real server. There is a TestServer.java in the generated code already
and each handler will have a generated test case. The only thing we need to do
is to add testing logic.&lt;/p&gt;

&lt;p&gt;First let&amp;rsquo;s create a new folder call test from updates which is using Mysql.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt/light-java-example/database
cp -r updates test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s go to IDE and navigate to the test folder under src. You can find there
are three test cases for each handler and there is an extra class called
TestServer.java&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at the generated QueryGetHandlerTest.java&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.networknt.database.handler;

import com.networknt.client.Client;
import com.networknt.server.Server;
import com.networknt.exception.ClientException;
import com.networknt.exception.ApiException;
import org.apache.commons.io.IOUtils;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.methods.*;
import org.apache.http.impl.client.CloseableHttpClient;
import org.junit.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;

/**
* Generated by swagger-codegen
*/
public class QueryGetHandlerTest {
    @ClassRule
    public static TestServer server = TestServer.getInstance();

    static final Logger logger = LoggerFactory.getLogger(QueryGetHandlerTest.class);

    @Test
    public void testQueryGetHandler() throws ClientException, ApiException {
        CloseableHttpClient client = Client.getInstance().getSyncClient();
        HttpGet httpGet = new HttpGet(&amp;quot;http://localhost:8080/v1/query&amp;quot;);
        /*
        Client.getInstance().addAuthorization(httpPost);
        try {
            CloseableHttpResponse response = client.execute(httpGet);
            Assert.assertEquals(200, response.getStatusLine().getStatusCode());
            Assert.assertEquals(&amp;quot;getQuery&amp;quot;, IOUtils.toString(response.getEntity().getContent(), &amp;quot;utf8&amp;quot;));
        } catch (Exception e) {
            e.printStackTrace();
        }
        */
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this test file, we can see that a static TestServer instance is started
with @ClassRule to be shared by all test cases in this test file. Also, there
is one test case with some of the logic commented out. This test is a positive
test generated based on swagger specification. The result checking code
is commented out because we don&amp;rsquo;t know what is the exact object returned.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s modify it to make it work in our service that is connecting to Mysql.
Later on, we are going to remove Mysql dependency with H2 database embedded.&lt;/p&gt;

&lt;h1 id=&#34;performance-test&#34;&gt;Performance Test&lt;/h1&gt;

&lt;p&gt;To test the endpoint on your localhost, use the following command. You cannot
use localhost, so you have to find out your ip address.&lt;/p&gt;

&lt;p&gt;You can use ifconfig to find you local ip.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --rm williamyeh/wrk -t4 -c50 -d30s --timeout 2s http://192.168.1.131:8080/v1/query
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the result.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Running 30s test @ http://192.168.1.131:8080/v1/query
  4 threads and 50 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    10.30ms    3.78ms  74.03ms   89.91%
    Req/Sec     1.18k   160.15     1.86k    72.50%
  141321 requests in 30.05s, 20.73MB read
Requests/sec:   4703.17
Transfer/sec:    706.30KB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As we are using Mysql docker container and its maximum connection can only reach 100.
If you can increase the connection pool size, you can get even better performance.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Running Light-Java Application as Linux Service</title>
      <link>https://networknt.github.io/light-java/devops/linux_service/</link>
      <pubDate>Sat, 07 Jan 2017 08:03:47 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-java/devops/linux_service/</guid>
      <description>

&lt;p&gt;Light-Java application can be easily started as Unix/Linux services using either init.d or systemd given it
is packaged as a fatjar.&lt;/p&gt;

&lt;h2 id=&#34;installation-as-an-init-d-service-system-v&#34;&gt;Installation as an init.d service (System V)&lt;/h2&gt;

&lt;p&gt;If your application is packaged as a fatjar, and you’re not using a custom script, then your application
can be used as an init.d service. Simply symlink the jar to init.d to support the standard start, stop,
restart and status commands.&lt;/p&gt;

&lt;p&gt;The script supports the following features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Starts the services as the user that owns the jar file&lt;/li&gt;
&lt;li&gt;Tracks application’s PID using /var/run/&lt;appname&gt;/&lt;appname&gt;.pid&lt;/li&gt;
&lt;li&gt;Writes console logs to /var/log/&lt;appname&gt;.log&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Assuming that you have a Light Java application installed in /var/myapp, to install the application as an
init.d service simply create a symlink:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo ln -s /var/myapp/myapp.jar /etc/init.d/myapp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once installed, you can start and stop the service in the usual way. For example, on a Debian based system:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;service myapp start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also flag the application to start automatically using your standard operating system tools. For
example, on Debian:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;update-rc.d myapp defaults &amp;lt;priority&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;securing-an-init-d-service&#34;&gt;Securing an init.d service&lt;/h3&gt;

&lt;p&gt;When executed as root, as is the case when root is being used to start an init.d service, the default
executable script will run the application as the user which owns the jar file. You should never run
a Light Java application as root so your application’s jar file should never be owned by root. Instead,
create a specific user to run your application and use chown to make it the owner of the jar file. For
example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chown bootapp:bootapp your-app.jar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case, the default executable script will run the application as the bootapp user.&lt;/p&gt;

&lt;p&gt;To reduce the chances of the application’s user account being compromised, you should consider preventing
it from using a login shell. Set the account’s shell to /usr/sbin/nologin, for example.&lt;/p&gt;

&lt;p&gt;You should also take steps to prevent the modification of your application’s jar file. Firstly, configure
its permissions so that it cannot be written and can only be read or executed by its owner:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chmod 500 your-app.jar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Secondly, you should also take steps to limit the damage if your application or the account that’s running
it is compromised. If an attacker does gain access, they could make the jar file writable and change its
contents. One way to protect against this is to make it immutable using chattr:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo chattr +i your-app.jar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will prevent any user, including root, from modifying the jar.&lt;/p&gt;

&lt;p&gt;f root is used to control the application’s service and you use a .conf file to customize its startup,
the .conf file will be read and evaluated by the root user. It should be secured accordingly. Use chmod
so that the file can only be read by the owner and use chown to make root the owner:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chmod 400 your-app.conf
sudo chown root:root your-app.conf
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Running Light-Java Application as Windows Service</title>
      <link>https://networknt.github.io/light-java/devops/windows_service/</link>
      <pubDate>Sat, 07 Jan 2017 08:03:33 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-java/devops/windows_service/</guid>
      <description>

&lt;p&gt;Light-Java is packaged as a fatjar and normally will be running in docker container
on production; however, it can be executed on Windows or Linux host machine or VM
with the following command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;java -jar filename.jar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For production deployment, you want to make sure that when you host server/VM
is restarted, the application will be restarted automatically.&lt;/p&gt;

&lt;p&gt;The following describes step-by-step how you can create a Windows service for your
Light-Java application or any Java application that can be packaged in a fatjar.&lt;/p&gt;

&lt;p&gt;There are two different options but the first option is more generic and popular.&lt;/p&gt;

&lt;h2 id=&#34;windows-service-wrapper&#34;&gt;Windows Service Wrapper&lt;/h2&gt;

&lt;p&gt;Due to difficulties with the GPL license of the Java Service Wrapper
(the second option below) in combination with e.g. the MIT license of Jenkins,
the Windows Service Wrapper project, also known as &lt;a href=&#34;https://github.com/kohsuke/winsw&#34;&gt;winsw&lt;/a&gt;,
is the best choice.&lt;/p&gt;

&lt;p&gt;Winsw provides programmatic means to install/uninstall/start/stop a service. In
addition, it may be used to run any kind of executable as a service under Windows,
whereas Java Service Wrapper, as implied by its name, only supports Java applications.&lt;/p&gt;

&lt;p&gt;First, you download the binaries &lt;a href=&#34;http://repo.jenkins-ci.org/releases/com/sun/winsw/winsw/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next, the configuration file that defines our Windows service, MyApp.xml, should
look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;service&amp;gt;
    &amp;lt;id&amp;gt;MyApp&amp;lt;/id&amp;gt;
    &amp;lt;name&amp;gt;MyApp&amp;lt;/name&amp;gt;
    &amp;lt;description&amp;gt;This runs Spring Boot as a Service.&amp;lt;/description&amp;gt;
    &amp;lt;env name=&amp;quot;MYAPP_HOME&amp;quot; value=&amp;quot;%BASE%&amp;quot;/&amp;gt;
    &amp;lt;executable&amp;gt;java&amp;lt;/executable&amp;gt;
    &amp;lt;arguments&amp;gt;-Xmx256m -jar &amp;quot;%BASE%\MyApp.jar&amp;quot;&amp;lt;/arguments&amp;gt;
    &amp;lt;logmode&amp;gt;rotate&amp;lt;/logmode&amp;gt;
&amp;lt;/service&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, you have to rename the winsw.exe to MyApp.exe so that its name matches
with the MyApp.xml configuration file. Thereafter you can install the service
like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ MyApp.exe install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similarly, you may use uninstall, start, stop, etc.&lt;/p&gt;

&lt;h2 id=&#34;java-service-wrapper&#34;&gt;Java Service Wrapper&lt;/h2&gt;

&lt;p&gt;In case you don’t mind the GPL licensing of the &lt;a href=&#34;http://wrapper.tanukisoftware.com/doc/english/index.html&#34;&gt;Java Service Wrapper&lt;/a&gt;
project, this alternative may address your needs to configure your JAR file as
a Windows service equally well. Basically, the Java Service Wrapper also requires
you to specify in a configuration file which specifies how to run your process
as a service under Windows.&lt;/p&gt;

&lt;p&gt;This &lt;a href=&#34;http://edn.embarcadero.com/article/32068&#34;&gt;article&lt;/a&gt; explains in a very
detailed way how to set up such an execution of a JAR file as a service under
Windows.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Nodejs Pitfalls</title>
      <link>https://networknt.github.io/light-java/benchmarks/nodejs/</link>
      <pubDate>Fri, 18 Nov 2016 14:41:29 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-java/benchmarks/nodejs/</guid>
      <description>

&lt;p&gt;When talking about microservices, a lot of Nodejs developers will say that
Node is a better platform than Java and other languages to build microservices.
The arguments are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nodejs is faster than Java at runtime.&lt;/li&gt;
&lt;li&gt;Nodejs development is more productive than Java.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These claims are proved to be false already as I&amp;rsquo;ve been working on both
platforms in banking industry for the last couple of years. I have been
building REST API frameworks on both Java and Nodejs and the following are
my observations on Nodejs in enterprise computing.&lt;/p&gt;

&lt;h2 id=&#34;production-hell&#34;&gt;Production hell&lt;/h2&gt;

&lt;p&gt;As workers are single-threaded, any uncaught exception will crash the worker
and all the in-flight transactions will be lost and you don&amp;rsquo;t know what is
the state of each in-flight request. This is the biggest problem faced and
I have worked with several core Nodejs developers trying to mitigate the risk.&lt;/p&gt;

&lt;p&gt;The end result is to capture it in the server.js and then wait for in-flight
to complete as many as possible in a unknown state of the server and then
shutdown the server. Not ideal but it reduce the risk to certain level. Due to
this reason, Nodejs API platform is only recommended for readonly API in the
bank.&lt;/p&gt;

&lt;p&gt;Node server crashes under load (cpu 90% or up). We found this during out loaded
test with Winston logger enabled and the server always dead without any response
after a while. The reason is these callbacks don&amp;rsquo;t have enough cpu time to
complete and there are piling up in memory until you run out of memory, the server
won&amp;rsquo;t shutdown in this situation but simply won&amp;rsquo;t respond. The solution for
us is to monitor the cpu usage and starting more containers when it is in
heavy load.&lt;/p&gt;

&lt;h2 id=&#34;callback-hell&#34;&gt;Callback Hell&lt;/h2&gt;

&lt;p&gt;This is know issue for Javascript. Although promise helps a lot, it is still a
big issue with Node platform.&lt;/p&gt;

&lt;h2 id=&#34;code-maintenance&#34;&gt;Code Maintenance&lt;/h2&gt;

&lt;p&gt;Nodejs is easy to get into and very fast to build small Hello World application;
however, building complex enterprise level application with thousands of line of
code is very hard. When I look at my own code wrote one year ago, I couldn&amp;rsquo;t
reason about what that piece code does. I have to put some debug info and run it
to figure out how the code works. Callback Hell is one of the causes. For
enterprise applications, easy to understand and maintain is very important and I
feel sorry for the bank employees who have taken over my work.&lt;/p&gt;

&lt;h2 id=&#34;debugging&#34;&gt;Debugging&lt;/h2&gt;

&lt;p&gt;Javascript as a platform doesn&amp;rsquo;t have a good runtime debugging tool that you can inspect
variables during runtime easily. There are some tools but none of them works as
good as other languages. I use a customized logger built by myself and put a lot
of logging statement in order to debug my code and I&amp;rsquo;ve seen so many js developers
just use console.log:)&lt;/p&gt;

&lt;h2 id=&#34;no-transaction-support&#34;&gt;No Transaction Support&lt;/h2&gt;

&lt;p&gt;No transaction support on the platform makes it not enterprise ready. Let&amp;rsquo;s say
you are building a stock order API, once the server receives the request, it needs
to save the order in backend database and route the order to an exchange for execution.
what if the communication to Exchange is down? There is no way that the local
database update can be rolled back.&lt;/p&gt;

&lt;h2 id=&#34;lack-of-connectivity-to-backend-system&#34;&gt;Lack of Connectivity to Backend System&lt;/h2&gt;

&lt;p&gt;In the above order API, the order has to be routed to an exchange through MQ Queue
but node didn&amp;rsquo;t support it 2 years ago. Also, a lot of existing backend
systems and databases are not supported even today. I have worked with Strongloop
and IBM teams for three months to make IBM DB2
drive(&lt;a href=&#34;https://github.com/ibmdb/node-ibm_db&#34;&gt;https://github.com/ibmdb/node-ibm_db&lt;/a&gt;) worked on production without
memory leak.&lt;/p&gt;

&lt;h2 id=&#34;insufficient-of-module-and-version-management&#34;&gt;Insufficient of Module and Version Management&lt;/h2&gt;

&lt;p&gt;A lot of people praises npm and I agree that it is very good tool to manage modules.
However, only manage modules is no enough, it has to manage modules with versions.&lt;/p&gt;

&lt;p&gt;Most Node developers will have this experience. You have an application running today
and tomorrow, you run npm install again and it stops working:) As one of the dependencies
got a new version and it is not backward compatible. Shrinkwrap helps a little bit but
it is very hard to update one or two immediate dependent modules as there is no way to
update sub dependencies. Another way is to check in node_modules into git and packaged it
into docker container. Now we always package node_modules into docker image.&lt;/p&gt;

&lt;h2 id=&#34;windows-un-friendly&#34;&gt;Windows Un-Friendly&lt;/h2&gt;

&lt;p&gt;while trying to check in node_modules folder into git on Windows platform, most cases
you will get an error as some files are buried too deep in the directory and Windows
has limitation on path length. This issue has been partially fixed in later version
of Node as npm tries to flatten all the dependencies.&lt;/p&gt;

&lt;p&gt;Some of the modules depending on C/C++ that cannot be compiled on Windows. It causes
issues for teams that use different platforms for development.&lt;/p&gt;

&lt;p&gt;Given Windows is not case sensitive on file names, application developed on Windows
usually cannot be executed on Linux the first time.&lt;/p&gt;

&lt;h2 id=&#34;long-running-process-hogs-cpu&#34;&gt;Long Running process hogs CPU&lt;/h2&gt;

&lt;p&gt;This is not a problem of Nodejs but mistake of developers. I have seen too many this
kind of mistakes and I want to highlight it here. As node is using event loop
to dispatch tasks/callbacks, if any callback designed wrongly and doesn&amp;rsquo;t give up CPU
for a period of time, the entire system will suffer. If you have to process thousands
of records loaded from database, process them in 100 blocks. There are so many articles
talking about this topic.&lt;/p&gt;

&lt;h2 id=&#34;public-module-quality&#34;&gt;Public Module Quality&lt;/h2&gt;

&lt;p&gt;No doubt there is a very active community for Nodejs and there are a lot of modules published
on public npm repository. I myself got several modules published.&lt;/p&gt;

&lt;p&gt;On the other hand, there are so many modules are in bad shape as developers of these modules
often migrated from frontend without any enterprise level experience. Some of modules got
10 line of the code but will depending on 8 other modules. Write a small express application
in nodejs and take a look at how many modules in node_modules folder. Is you application
using them all? I guess less than 5 percent of the code in node_modules are in the
execution path and the rest of them are just wasting your hard drive space.&lt;/p&gt;

&lt;p&gt;A legendary Node developer TJ mentioned the same reason in his farewell article
regarding to modules. Javascript sets the bar very low and it attracts a lot of low level
developers. Remember Visual Basic was the most popular language on Microsoft platform?&lt;/p&gt;

&lt;h2 id=&#34;stability-of-the-platform&#34;&gt;Stability of the Platform&lt;/h2&gt;

&lt;p&gt;For one bank I worked last year, they are still using Nodejs 0.10.39 as that was the only
production ready version. Both Strongloop and Joyent told us to stay on that version and as
I understand, other customers are on the same version. We were told to upgrade to 0.12.x
once it was prouduction ready and then Nodejs and IO.js were merged and Nodejs 4 was out.
Before Nodejs 4 was production ready, they&amp;rsquo;ve moved to Nodejs 5 and now on Nodejs 6.&lt;/p&gt;

&lt;p&gt;We are having big issue with Nodejs 0.10.39 as https module is not performing with API to
API calls and the issue was resolved in 0.12.x. So our recommendation for Nodejs API
framework added another condition upon only readonly API - The API must not call another
API in https. All APIs that calling another API with https must be implemented in Java
framework.&lt;/p&gt;

&lt;h2 id=&#34;talents-abandoned-the-ship&#34;&gt;Talents abandoned the ship&lt;/h2&gt;

&lt;p&gt;As you might know, TJ who is the developer of express - most popular nodejs framework left
Nodejs to GO. Here is his &lt;a href=&#34;https://medium.com/@tjholowaychuk/farewell-node-js-4ba9e7f3e52b#.5brqa9has&#34;&gt;farewell&lt;/a&gt;
There are other heavy weight Nodejs developers left and that might make you think what
is going on.&lt;/p&gt;

&lt;h2 id=&#34;existing-customers-are-stuck-or-leaving&#34;&gt;Existing Customers are stuck or leaving&lt;/h2&gt;

&lt;p&gt;There are some early adopters of Nodejs and all of them are trapped with old version of Nodejs
and they are so afraid to upgrade to the new version as memory leak will be hard to
resolve - refer to my production hell.&lt;/p&gt;

&lt;p&gt;Other companies, just rewrite the application with other language. One example is
&lt;a href=&#34;https://medium.com/@theflapjack103/the-way-of-the-gopher-6693db15ae1f#.jfcsl8hlg&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the bank I&amp;rsquo;ve worked, they wrote some APIs in Nodejs in 2014 but most of them were rewritten
in Java in 2016.&lt;/p&gt;

&lt;h2 id=&#34;memory-footprint-is-high-on-multiple-core-platform&#34;&gt;Memory Footprint is high on multiple core platform&lt;/h2&gt;

&lt;p&gt;For one worker, it uses less memory than Java, but on a multi-core system, you have to start
workers per cpu core in order to utilize the resource to its full potential. These workers
are independent and there is no shared memory, they allocate heap independently. If you start
four or eight workers, it uses more memory than Java which has only one instance multi-threaded
with shared heap memory.&lt;/p&gt;

&lt;h2 id=&#34;much-slower-than-new-java-platforms&#34;&gt;Much slower than New Java platforms&lt;/h2&gt;

&lt;p&gt;As for speed, it is faster than WebSphere/WebLogic/JBoss but not in the same level as other
new containerless Java frameworks and platforms.&lt;/p&gt;

&lt;p&gt;Here is a &lt;a href=&#34;https://github.com/networknt/light-java-example/tree/master/performance&#34;&gt;benchmarks&lt;/a&gt;
that have both popular Java microservices frameworks and Nodejs/Express. The above performance
result only focus on raw throughput and latency. While more code is added, Nodejs will be
getting slower and slower.&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;I work on both Nodejs and Java so my opinion is not biased but to point out the facts on
Nodejs platform. No doubt you can build rock solid Nodejs application with a group of senior
developers but it is very hard to find that level of developers. I am not saying Java is
better as I know there are a lot of issues with Java. I just hope these points will help
you in choosing your next application platform.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Web Server</title>
      <link>https://networknt.github.io/light-java/example/webserver/</link>
      <pubDate>Fri, 18 Nov 2016 08:25:10 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-java/example/webserver/</guid>
      <description>

&lt;p&gt;Most documents and articles regarding to Light-Java are about REST API; however,
there are a lot user cases that combine the API and static site rendering together,
especially, single page applications built on top of React or Angular.&lt;/p&gt;

&lt;h1 id=&#34;handler-provider&#34;&gt;Handler Provider&lt;/h1&gt;

&lt;p&gt;As we know, the Light-Java needs a plugin to inject application logic and for
API project that is based on OpenAPI specification, this is generated by the
&lt;a href=&#34;https://networknt.github.io/light-java/tools/swagger-codegen/&#34;&gt;swagger-codegen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The generated Handler Provider maps each endpoint to a corresponding handler
generated. For API server that need to serve static content along with APIs,
we need to wrap this map with Resource handler to serve static content. On top
of resource handler, we need a predicates handler to rewrite request to index.html
which can loaded your single page application.&lt;/p&gt;

&lt;p&gt;In the example web server, I redirect to index.html if path is not in the
following list.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/images&lt;/li&gt;
&lt;li&gt;/assets&lt;/li&gt;
&lt;li&gt;/api&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Above rules make sure that images and other asserts(css etc) can be loaded and
API endpoint will be started as /api/xxx&lt;/p&gt;

&lt;h1 id=&#34;web-server-configuration&#34;&gt;Web Server Configuration&lt;/h1&gt;

&lt;p&gt;In most of the case, each APP or API built on top of Light-Java framework will
have a configuration file to control how it behaves during runtime. Here is the
content of webserver.json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;base&amp;quot;: &amp;quot;/public&amp;quot;,
  &amp;quot;transferMinSize&amp;quot;: &amp;quot;100&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Given that base is defined as /public, we know the static content root will be
/public and all static content will be served from this folder or subfolders.&lt;/p&gt;

&lt;h1 id=&#34;location-of-static-content&#34;&gt;Location of static content&lt;/h1&gt;

&lt;p&gt;As Light-Java applications are packaged as a jar so the static content must be
served from somewhere inside the jar file. Where is the location for the static
content that can be mapped to /public?&lt;/p&gt;

&lt;p&gt;The answer is src/main/resources/public. As static content is loaded from /public
and internally it is based on the classpath. As we all know that resources is
part of the classpath.&lt;/p&gt;

&lt;h1 id=&#34;docker-container&#34;&gt;Docker Container&lt;/h1&gt;

&lt;p&gt;Above section describes how to serve static content from packaged jar file and it
is only suitable for development. When you deploy the app/api to official environment
with docker container, the /public must be externalized so that website can be updated
independently without repackage the server.&lt;/p&gt;

&lt;p&gt;Here is the Dockerfile in the example.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM insideo/jre8
EXPOSE 8080
ADD /target/webserver-0.1.0.jar server.jar
ADD /src/main/resources/public /public
CMD [&amp;quot;/bin/sh&amp;quot;,&amp;quot;-c&amp;quot;,&amp;quot;java -Dlight-java-config-dir=/config -jar /server.jar&amp;quot;]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The static contant in src/main/resources/public is added to the /public in the contain
and this folder can be mapped to host directory with -v if you want to update the site
in host file system.&lt;/p&gt;

&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;

&lt;p&gt;This example is very useful in self contained microservices that has a very
simple UI built on top of React or Angular. It give you an interface to
interact with the services running on the same instance.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Integration Patterns</title>
      <link>https://networknt.github.io/light-java/architecture/integration/</link>
      <pubDate>Sat, 12 Nov 2016 20:55:44 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-java/architecture/integration/</guid>
      <description>

&lt;p&gt;While working with my clients to transform monolithic Java EE applications to
microservices architecture, one of the most frequently asked questions from
my clients is how do you integrate your newly built microservices with existing
Java EE applications. In other words, how to leverage existing application
stacks when exposing REST APIs with microservices?&lt;/p&gt;

&lt;p&gt;For most organizations especially financial institutions, they have big Java
EE applications running on Weblogic/Websphere that they&amp;rsquo;ve invested efforts
for a decade or longer. You cannot image that they can rewrite everything and
switch to microservices overnight.&lt;/p&gt;

&lt;p&gt;I have been working the following four different approaches over the last 5
years and I will give my recommendations based on my experience. Please be
aware that this is just a generic recommendation and it cannot be applied
to all use cases.&lt;/p&gt;

&lt;h1 id=&#34;api-gateway&#34;&gt;API Gateway&lt;/h1&gt;

&lt;p&gt;Most commercial API gateways offer the XML to JSON and JSON to XML
transformation feature and this was good selling point to in early days. They
promised that you buy their product and the gateway will transform your
XML based web services to JSON based REST APIs. The problem with this
approach is performance, as all of them provide a generic transformer working
with external defined mapping logic. The transformation is CPU intensive and
with the overhead of gateway security and other layers, the throughput and
latency are not acceptable. Also, there are other issues with commercial
gateways as I documented at &lt;a href=&#34;https://networknt.github.io/light-java/architecture/gateway/&#34;&gt;https://networknt.github.io/light-java/architecture/gateway/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;customized-transformation-in-api&#34;&gt;Customized Transformation in API&lt;/h1&gt;

&lt;p&gt;Some developers and architects realized that buying a gateway cannot resolve
the problem magically so they tried to build the transform logic into the API
itself. The transformation code is customized per API and it is much more
efficient that generic transformer in gateways. This provide a little bit
more flexibility and a little bit increased performance but it is not easy
to write the transform code as most web services have very complicated request
and response schemas. Performance wise, it is better than commercial gateway
solutions but still very bad.&lt;/p&gt;

&lt;h1 id=&#34;calling-service-layer-behind-soa-or-emb&#34;&gt;Calling service layer behind SOA or EMB&lt;/h1&gt;

&lt;p&gt;Most web services are built with multiple layers and chances are you have
a service layer behind your web service tier with Java native APIs. In this
case, we can bypass web services and calling the native Java API (most likely
session beans) from your REST APIs. This gives us a relative good performance
and leverage the most complicated services in the application tier. It is also
a low cost solution to bring REST API on top of your existing applications.&lt;/p&gt;

&lt;p&gt;The only drawback is that these app layers are deployed on Java EE platform
and they have limited throughput and very hard to be scaled.&lt;/p&gt;

&lt;h1 id=&#34;calling-book-of-record-directly&#34;&gt;Calling Book of Record directly&lt;/h1&gt;

&lt;p&gt;In order to fully realize the benefits of microservices architecture, the
existing monolithic application must be rewritten so that microservices can
talk to the book of record directly. And this can be done during a long period
of time to break up existing system to function areas and convert them one by
one.&lt;/p&gt;

&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;

&lt;p&gt;As describe above, it is recommended to rewrite the existing monolithic app
but if resources are constrained, then build microservices by calling
existing services are acceptable. As microserivces can be individually deployed
and replaced, it is easy to convert them all to the final stage one by one.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Monitoring</title>
      <link>https://networknt.github.io/light-java/architecture/monitoring/</link>
      <pubDate>Wed, 09 Nov 2016 21:13:27 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-java/architecture/monitoring/</guid>
      <description>

&lt;p&gt;Monitoring used to be a somewhat passive thing. You used tools to monitor the
application process/logs and perhaps send an alert if something seemed wrong,&lt;br /&gt;
but mostly it was hands off. When we move to microservices architecture, things
are changing.&lt;/p&gt;

&lt;h2 id=&#34;user-experience-and-microservices-monitoring&#34;&gt;User Experience and Microservices Monitoring&lt;/h2&gt;

&lt;p&gt;With Microservices which are released more often, you can try new features and
see how they impact user usage patterns. With this feedback, you can improve
your application. It is not uncommon to employ A/B testing and multi-variant
testing to try out new combinations of features. Monitoring is more than just
watching for failure. With big data, data science, and microservices,
monitoring microservices runtime stats is required to know your application
users. You want to know what your users like and dislike and react.&lt;/p&gt;

&lt;h2 id=&#34;debugging-and-microservices-monitoring&#34;&gt;Debugging and Microservices Monitoring&lt;/h2&gt;

&lt;p&gt;Runtime statistics and metrics are critical for distributed systems. Since
microservices architecture use a lot of remote calls. Monitoring microservices
metrics can include request per second, available memory, #threads, #connections,
failed authentication, expired tokens, etc. These parameters are important for
understanding and debugging your code. Working with distributed systems is hard.
Working with distributed systems without reactive monitoring is crazy. Reactive
monitoring allows you to react to failure conditions and ramp of services for
higher loads.&lt;/p&gt;

&lt;h2 id=&#34;circuit-breaker-and-microservices-monitoring&#34;&gt;Circuit Breaker and Microservices Monitoring&lt;/h2&gt;

&lt;p&gt;You can employ the Circuit Breaker pattern to prevent a catastrophic cascade,
and reactive microservices monitoring can be the trigger. Downstream services
can be registered in a service discovery so that you can mark nodes as unhealthy
as well react by reroute in the case of outages. The reaction can be serving up
a deprecated version of the data or service, but the key is to avoid cascading
failure. You don&amp;rsquo;t want your services falling over like dominoes.&lt;/p&gt;

&lt;h2 id=&#34;cloud-orchestration-and-microservices-monitoring&#34;&gt;Cloud Orchestration and Microservices Monitoring&lt;/h2&gt;

&lt;p&gt;Reactive microservices monitoring would enable you to detect heavy load, and
spin up new instances with the cloud orchestration platform of your choice
(EC2, CloudStack, OpenStack, Rackspace, boto, etc.).&lt;/p&gt;

&lt;h2 id=&#34;public-microservices-and-microservices-monitoring&#34;&gt;Public Microservices and Microservices Monitoring&lt;/h2&gt;

&lt;p&gt;Microservices monitoring of runtime statistics can be used to rate limiting
a partners Application ID. You don&amp;rsquo;t want partners to consume all of your
well-tuned, high-performant microservices resources. It is okay to trust your
partners but use Microservices Monitoring to verify.&lt;/p&gt;

&lt;p&gt;Monitoring public microservices is your way to verify. Once you make microservices
publicly available or partner available, you have to monitor and rate limit.&lt;/p&gt;

&lt;p&gt;This is not a new concept. If you have ever used a public REST API from Google for
example, you are well aware of rate limiting. A rate limit will do things like limit
the number of connections you’re allowed to make. It is common for rate limits to
limit the number of certain requests that a client id or partner id is allowed to
make in a given time period. This is protection.&lt;/p&gt;

&lt;p&gt;Deploying public or partner accessible microservices without this protection is
lunacy and a recipe for disaster, unless you like failing when someone decides to
hit your endpoints 10x more than you did the capacity planning for. Avoid long
nights and tears. Monitor microservices that you publish, and limit access to them.&lt;/p&gt;

&lt;p&gt;The reactive manifesto is a good tutor for the types of monitoring you will want
to do and states that your system should react to change instead of just fail.&lt;/p&gt;

&lt;h2 id=&#34;microservices-framework-and-microservices-monitoring&#34;&gt;Microservices Framework and Microservices Monitoring&lt;/h2&gt;

&lt;p&gt;Light-Java a mircoservices framework that comes with a runtime metrics which can
be used for Microservices Monitoring.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can query /server/health endpoint to detect if the service is available and healthy.&lt;/li&gt;
&lt;li&gt;The framework collects metrics info and pushes it into influxdb and dashboard can be viewed from Grafana.&lt;/li&gt;
&lt;li&gt;Rate limiting can be enabled at client_id level or ip address/user level.&lt;/li&gt;
&lt;li&gt;Kubernetes monitors load of each pods and can start new instances on demand.&lt;/li&gt;
&lt;li&gt;TraceabilityId and CorrelationId in logs that can be traced with tools like Logstash, GrayLog and Splunk.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;reactive-microservices-monitoring&#34;&gt;Reactive Microservices Monitoring&lt;/h2&gt;

&lt;p&gt;Reactive Microservices Monitoring is an essential ingredient of microservices architecture.
You need it for debugging, knowing your users, working with partners, building reactive
systems that react to load and failures without cascading outages. Reactive Microservices
Monitoring can not be a hindsight decision. Build your microservices with microservices
monitoring in mind from the start. Make sure that the microservices lib that you use has
monitoring of runtime statistics built in from the start. Make sure that is a core part of
the microservices library. Code Hale Statistics allow you to gather metrics in
a standard way. Tools like Influxdb and Grafana, Kibana help you understand the
data, and build dashboards. Light Java, the Java Microservices Framework, includes a metrics
middleware which feeds into CodeHale Metrics. Light Java also proivdes a rate limiting
middleware to limit access per client_id or IP address/user. The container orchestration tool
like Kubernetes can also spin up new nodes/pods. With big data, data science,
and microservices, monitoring microservices runtime stats is required to know your application
users, know your partners, know what your system will do under load, etc.&lt;/p&gt;

&lt;h2 id=&#34;microservice-logging&#34;&gt;Microservice Logging&lt;/h2&gt;

&lt;p&gt;Every instance of the service will have a unique identifier which most commonly will be
the docker container name or the hostname if not deployed in docker container. The code
to retrieve docker container name and hostname is the same.&lt;/p&gt;

&lt;p&gt;Along with docker container name, traceabilityId and correlationId will be logged as
context info for each logging statement. And once log files are aggregated together in
ELK, users can trace a particular transaction based on the traceabilityId or correlationId.&lt;/p&gt;

&lt;p&gt;As microservices might be deployed across multiple geo-regions, the timestamp logged must
be UTC time so that logs can be easily ordered in the ELK.&lt;/p&gt;

&lt;h2 id=&#34;microservice-alerting&#34;&gt;Microservice Alerting&lt;/h2&gt;

&lt;p&gt;Logstash has features to send out alert when certain error code is spotted in the log files.&lt;/p&gt;

&lt;p&gt;The framework has a component called status and it has all the errors defined in a JSON
file which can be externalized. All the error code will be in a format ERRXXXXX and
certain error code can be setup in the alert to send out email or communicate to support
team with other channels.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>traceability</title>
      <link>https://networknt.github.io/light-java/architecture/traceability/</link>
      <pubDate>Sun, 06 Nov 2016 11:04:20 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-java/architecture/traceability/</guid>
      <description>

&lt;p&gt;For microservices architecture, it is very important to trace request from one service to
another in the entire call tree in order to have big picture if something happens or have
an audit log that is aggregated by database or Splunk.&lt;/p&gt;

&lt;p&gt;In the framework, we have two Ids to serve this purpose.&lt;/p&gt;

&lt;h2 id=&#34;x-traceability-id&#34;&gt;X-Traceability-Id&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Generated by client&lt;/li&gt;
&lt;li&gt;Unique for this client only&lt;/li&gt;
&lt;li&gt;Can be database sequence number or UUID&lt;/li&gt;
&lt;li&gt;Must be passed to the next service&lt;/li&gt;
&lt;li&gt;Must be returned to the caller&lt;/li&gt;
&lt;li&gt;Will be logged in per request audit log&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;x-correlation-id&#34;&gt;X-Correlation-Id&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Generated in the immediate service from client&lt;/li&gt;
&lt;li&gt;Must be UUID&lt;/li&gt;
&lt;li&gt;Must be passed to the next service&lt;/li&gt;
&lt;li&gt;Will be logged in per request audit log&lt;/li&gt;
&lt;li&gt;Every service/API must check if this id available and generate one if doesn&amp;rsquo;t exist in request header.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;pass-ids-to-the-next-service-api&#34;&gt;Pass Ids to the next service/API&lt;/h1&gt;

&lt;p&gt;In order to pass these ids to the next service, the call to the next service
must use Client module provided by the framework. It will put these ids to
the HttpRequest header with method calls.&lt;/p&gt;

&lt;p&gt;Hers is an example to set JWT tokens, traceabilityId and correlationId&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;recommended-log-analysis-tool&#34;&gt;Recommended Log Analysis Tool&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/products/logstash&#34;&gt;ELK/Logstash (Open Source)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Graylog2/graylog2-server&#34;&gt;Graylog (Open Source with commercial version)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.splunk.com/&#34;&gt;Splunk (Commercial)&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Traceability</title>
      <link>https://networknt.github.io/light-java/middleware/traceability/</link>
      <pubDate>Sun, 06 Nov 2016 10:24:22 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-java/middleware/traceability/</guid>
      <description>

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;For microservices architecture, a request sent from client may pass through several services to the
backend respository/Book of Record and then response is returned in the reverse path. If there is an
error in the call tree, we need to identify where is the problem during runtime. Also, for some mission
critical applications, the entire call tree must be in the audit log to meet regulatory compliance
requirement. For example, Banking applications.&lt;/p&gt;

&lt;p&gt;The framework has two tracing IDs built in and X-Traceability-Id is one of them that handled by this
Middleware component. Another one is X-Correlation-Id which is documented in [Traceability]().&lt;/p&gt;

&lt;p&gt;X-Traceability-Id is generated by the original client and might not be unique across the API domain. It
is unique for that particular client though. It is usually a sequence number generated from database
or a UUID. The usage of this id is to debug broken transactions as every service will have this id
logged once if the service is called and will return this id in response header to the caller.&lt;/p&gt;

&lt;p&gt;Every API/Service is responsible to pass the X-Traceability-Id (from request header) to the next service
(set the request header by Client when calling another service).&lt;/p&gt;

&lt;p&gt;Not all client will supply traceability_id so this is an optional field in the request header. If it
doesn&amp;rsquo;t exist, do nothing. If it does exist, the framework is responsible to pass it to the next API
in the chain or pass to the Book of Record.&lt;/p&gt;

&lt;p&gt;It is recommended that X-Traceability-Id should be persisted in Backend Repository/Book of Record.
However, this might not be possible for some legacy application, i.e.
mainframe applications.&lt;/p&gt;

&lt;p&gt;It should only be logged once in the audit log once your API processing is done and successful.&lt;/p&gt;

&lt;h1 id=&#34;configuration&#34;&gt;Configuration&lt;/h1&gt;

&lt;p&gt;The configuration for this handler is very simple, just control if this handler is enabled or not.
It will only be pluged into the request/response chain if enabled is true in the traceability.json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;Traceability Handler&amp;quot;,
  &amp;quot;enabled&amp;quot;: true
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;calling-sequence&#34;&gt;Calling sequence&lt;/h1&gt;

&lt;p&gt;This handler will be loaded after metric handler.&lt;/p&gt;

&lt;h1 id=&#34;dependencies&#34;&gt;Dependencies&lt;/h1&gt;

&lt;p&gt;This handler set the response header from request header; however, to make it work across services, it
depends the following middleware or component to work.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SimpleAuditHandler to log the traceabilityId to the audit log file.&lt;/li&gt;
&lt;li&gt;Client to pass the X-Traceability-Id to the next service through HttpRequest Header.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Plugin Architecture</title>
      <link>https://networknt.github.io/light-java/architecture/plugin/</link>
      <pubDate>Sat, 29 Oct 2016 17:22:16 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java/architecture/plugin/</guid>
      <description>

&lt;p&gt;In the framework design, we have adopted the same principal of microservices architecture to break
down the entire framework into smaller pieces so that each can be customized and replaced if
necessary. The only difference is that all the modules in the framework are wired in request/response
chain for best performance.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://networknt.github.io/light-java/images/light_java_component.png&#34; alt=&#34;component&#34; /&gt;&lt;/p&gt;

&lt;p&gt;There are four type of components that can be wired in at different stage of the server start up. The
following is the loading sequence.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Startup Hook Providers&lt;/li&gt;
&lt;li&gt;Shutdown Hook Providers&lt;/li&gt;
&lt;li&gt;Handler Provider&lt;/li&gt;
&lt;li&gt;Middleware Handlers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://networknt.github.io/light-java/images/startup_sequence.png&#34; alt=&#34;startup_sequence&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;plugin-implementation&#34;&gt;Plugin implementation&lt;/h1&gt;

&lt;p&gt;There are so many way to implement plugins and wire in different implementations of the same
interface. Spring is one of the popular ways. However, it will make our framework depending on
a version of spring framework and that can cause a lot of problems if the API handlers are
using different version of spring framework. Also, we don&amp;rsquo;t want to make the framework depending
on spring and force everyone to include it. In the end, we are using Java SPI
(Service Provider Interface). In your generated API project, you can find four files in
/src/main/resources/META-INF/services. These files contains plugins to be loaded/executed during
server startup and shutdown.&lt;/p&gt;

&lt;h1 id=&#34;shutdown-hook-providers&#34;&gt;Shutdown Hook Providers&lt;/h1&gt;

&lt;p&gt;Shutdown hook providers are plugins that would be called during server shutdown in order to release
resources. For example, close database connections.&lt;/p&gt;

&lt;p&gt;All shutdown hook providers will implement interface com.networknt.server.ShutdownHookProvider&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public interface ShutdownHookProvider {
    void onShutdown();
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The onShutdown() in your implementation will be called before server shutdown.&lt;/p&gt;

&lt;h1 id=&#34;startup-hook-providers&#34;&gt;Startup Hook Providers&lt;/h1&gt;

&lt;p&gt;Startup hook providers are plugins that would be called during server startup in order to initialize
resources. For example, create database connection pool, load spring application context etc.&lt;/p&gt;

&lt;p&gt;All startup hook providers will implement interface com.networknt.server.StartupHookProvider&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public interface StartupHookProvider {
    void onStartup();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The onStartup() in your implementation will be called before server startup.&lt;/p&gt;

&lt;h1 id=&#34;handler-provider&#34;&gt;Handler Provider&lt;/h1&gt;

&lt;p&gt;There is only one handler provider that is needed to wire in API implementations. In most of the
cases, it would be an instance of io.undertow.server.RoutingHandler just like the generated &lt;a href=&#34;https://github.com/networknt/light-java-example/tree/master/petstore&#34;&gt;petstore
project&lt;/a&gt;. However, it is not
limited and it can be several handlers chained together. One example is the
&lt;a href=&#34;https://github.com/networknt/light-java-example/tree/master/webserver&#34;&gt;webserver example&lt;/a&gt; and it
has several handlers chained together to provide API routing as well as static website. The handler
provide code can be found &lt;a href=&#34;https://github.com/networknt/light-java-example/blob/master/webserver/src/main/java/com/networknt/webserver/handler/WebServerHandlerProvider.java&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have OpenAPI specification defined, this handler provider will be generated from
&lt;a href=&#34;https://github.com/networknt/swagger-codegen&#34;&gt;swagger-codegen&lt;/a&gt;. &lt;a href=&#34;https://github.com/networknt/light-java-example/blob/master/petstore/src/main/java/io/swagger/handler/PathHandlerProvider.java&#34;&gt;Here&lt;/a&gt;
is a generated petstore handler provider that has the mapping for all endpoints.&lt;/p&gt;

&lt;p&gt;Handler provider implements interface com.networknt.server.HandlerProvider&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public interface HandlerProvider {
    HttpHandler getHandler();
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The getHandler() will return an HttpHandler or a chain of HttpHandlers wrapped together. This handler
will be called in the request/response chain right after all middleware handlers are called.&lt;/p&gt;

&lt;h1 id=&#34;middleware-handlers&#34;&gt;Middleware Handlers&lt;/h1&gt;

&lt;p&gt;There are some &lt;a href=&#34;https://networknt.github.io/light-java/middleware/&#34;&gt;builtin middleware components&lt;/a&gt;
in the framework to address common cross cutting concerns. There are implemented in a way we think
the best to meet most of business requirements. In other words, there are opinionated. For product
that built top of the framework, you can add/customize/replace existing middleware handlers.&lt;/p&gt;

&lt;p&gt;All middleware handlers need to implement interface com.networknt.handler.MiddlewareHandler.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public interface MiddlewareHandler extends HttpHandler {

    HttpHandler getNext();

    MiddlewareHandler setNext(final HttpHandler next);

    boolean isEnabled();

    void register();

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;boolean isEnabled()&lt;/p&gt;

&lt;p&gt;Every middleware handler has a corresponding config file which is the same name lower case
with .json extension. There must be flag to indicate if the handle will be wired in during
server startup. This gives user a chance to temporary disable a particular middleware handler
without changing the SPI configuration.&lt;/p&gt;

&lt;p&gt;void register()&lt;/p&gt;

&lt;p&gt;This function will be called when the middleware is wired in the request/response chain. It registers
itself and configuration to server info component which can be accessed through a special endpoint
to get runtime information on middleware handlers and their configuration along with other system
info.&lt;/p&gt;

&lt;p&gt;MiddlewareHandler setNext(final HttpHandler next)&lt;/p&gt;

&lt;p&gt;As middleware handler are chained together, so the existing handler must be put in the current
handler as next. When the current handler is completed, it will call the next handler if there is
no error. And eventually, the user provided handler will be called if all middleware handler are
completed without an error.&lt;/p&gt;

&lt;h3 id=&#34;the-sequence-of-middleware-handlers&#34;&gt;The sequence of middleware handlers.&lt;/h3&gt;

&lt;p&gt;There are dependencies between middleware handlers so the sequence to plug them in is very important.&lt;/p&gt;

&lt;p&gt;For default plugins generated from &lt;a href=&#34;https://networknt.github.io/light-java/tools/swagger-codegen/&#34;&gt;swagger-codegen&lt;/a&gt;,
please refer to &lt;a href=&#34;https://networknt.github.io/light-java/other/server/&#34;&gt;Server&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;diagram&#34;&gt;Diagram&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;https://networknt.github.io/light-java/images/handler_chain.png&#34; alt=&#34;handler_chain&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Note that audit, metrics and exception need to hooked in the response in order to handle exceptions
on both request and response phase, calculate response time and dump response info into the audit.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Memory Monitoring on Mac</title>
      <link>https://networknt.github.io/light-java/tools/memory_monitor/</link>
      <pubDate>Thu, 27 Oct 2016 08:44:57 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java/tools/memory_monitor/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;While you are testing performance of your microservices, you might be interested in
monitoring your server memory usage. The memory footprint is very important as we
are talking about microservices - we might need to deploy hundreds or even thousands
of microservices to compose a big application. In today&amp;rsquo;s cloud environment, you can
create vms or containers based on cpu, memory and hard drive usage and usually memory
is the big constraint and more costly than cpu and hard drive.&lt;/p&gt;

&lt;h1 id=&#34;monitoring-memory-usage-for-java&#34;&gt;Monitoring Memory Usage for Java&lt;/h1&gt;

&lt;p&gt;It is very hard to get the accurate memory usage for Java process.&lt;/p&gt;

&lt;h1 id=&#34;on-mac&#34;&gt;On Mac&lt;/h1&gt;

&lt;p&gt;On Mac, I usually start my performance test with [wrk]() and run it for 1 minute and
monitor the memory with Activity Monitor. The memory tab will give you a snapshot of
memory usage on each process. The number is not the real memory usage but the max
memory usage and you can see it only increases to certain point and stays there.&lt;/p&gt;

&lt;h1 id=&#34;on-linux&#34;&gt;On Linux&lt;/h1&gt;

&lt;h1 id=&#34;on-windows&#34;&gt;On Windows&lt;/h1&gt;

&lt;p&gt;I am not using Windows so I have limited experience on how to monitor Java memory usage
on this platform. However, the generic JDK tools should work as other platforms.&lt;/p&gt;

&lt;p&gt;If anyone has better ideas, please let me know or send me a pull request.&lt;/p&gt;

&lt;h1 id=&#34;example&#34;&gt;Example&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>info</title>
      <link>https://networknt.github.io/light-java/other/info/</link>
      <pubDate>Sun, 23 Oct 2016 13:23:59 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java/other/info/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Almost every module in light-java has a configuration file that can be
externalized with default can be in the module itself or the API implementation
config folder. In order to give an overview of the server runtime, system
properties, specification as well as configurations for each enabled modules,
there is a special handler that can be included in your swagger specification.&lt;/p&gt;

&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;info.json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;Server info endpoint that can output environment and component along with configuration&amp;quot;,
  &amp;quot;enableServerInfo&amp;quot;: true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unlike other modules, server info handler is not plugin into the handler chain
during server start up. It should be part of the swagger specification and
route to this handler in the routing handler. If enableServerInfo is false,
then an error message will returned with ERR10013 - SERVER_INFO_DISABLED.&lt;/p&gt;

&lt;h2 id=&#34;swagger&#34;&gt;Swagger&lt;/h2&gt;

&lt;p&gt;Along with other endpoints/paths defined in the swagger specification, an
extra endpoint should be added with special oauth2 scope for this handler.
It is recommended to use /basePath/server/info so that some automatic tool
or API portal server can access to it in a standard way.&lt;/p&gt;

&lt;h2 id=&#34;extension&#34;&gt;Extension&lt;/h2&gt;

&lt;p&gt;For other contributed modules or API application specific modules, please
following the following guideline to register your module
in /basePath/server/info endpoint.&lt;/p&gt;

&lt;p&gt;For handlers, it is registered when injecting into the handler chain during
server start up.
For other utilities, it should have a static block to register itself during
server start up.&lt;/p&gt;

&lt;p&gt;Here is the example code to register module and its config.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ModuleRegistry.registerModule(ValidatorHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(ValidatorHandler.CONFIG_NAME), null);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mask-sensitive-data-in-config&#34;&gt;Mask sensitive data in config&lt;/h2&gt;

&lt;p&gt;When module registers itself, it provide the configuration in JSON format for
the module. Some components have sensitive info in their configuration, for
example, db password, client secret etc. The third parameter in registerModule
is a list of keys in the configuration file that need to be masked.&lt;/p&gt;

&lt;p&gt;Here is an example.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;List&amp;lt;String&amp;gt; masks = new ArrayList&amp;lt;String&amp;gt;();
masks.add(&amp;quot;trustPass&amp;quot;);
masks.add(&amp;quot;keyPass&amp;quot;);
ModuleRegistry.registerModule(Client.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), masks);

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;output&#34;&gt;Output&lt;/h2&gt;

&lt;p&gt;Here is the output from undertow swagger-codegen petstore specification.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;environment&amp;quot;: {
    &amp;quot;host&amp;quot;: {
      &amp;quot;ip&amp;quot;: &amp;quot;127.0.0.1&amp;quot;,
      &amp;quot;hostname&amp;quot;: &amp;quot;joy&amp;quot;,
      &amp;quot;dns&amp;quot;: &amp;quot;localhost&amp;quot;
    },
    &amp;quot;runtime&amp;quot;: {
      &amp;quot;availableProcessors&amp;quot;: 4,
      &amp;quot;freeMemory&amp;quot;: 430837608,
      &amp;quot;totalMemory&amp;quot;: 504889344,
      &amp;quot;maxMemory&amp;quot;: 7486832640
    },
    &amp;quot;system&amp;quot;: {
      &amp;quot;javaVendor&amp;quot;: &amp;quot;Oracle Corporation&amp;quot;,
      &amp;quot;javaVersion&amp;quot;: &amp;quot;1.8.0_66&amp;quot;,
      &amp;quot;osName&amp;quot;: &amp;quot;Linux&amp;quot;,
      &amp;quot;osVersion&amp;quot;: &amp;quot;4.2.0-42-generic&amp;quot;,
      &amp;quot;userTimezone&amp;quot;: &amp;quot;America/Toronto&amp;quot;
    }
  },
  &amp;quot;specification&amp;quot;: {
    &amp;quot;basePath&amp;quot;: &amp;quot;/v2&amp;quot;,
    &amp;quot;paths&amp;quot;: {
      &amp;quot;/pet&amp;quot;: {
        &amp;quot;post&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;pet&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Add a new pet to the store&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;addPet&amp;quot;,
          &amp;quot;consumes&amp;quot;: [
            &amp;quot;application/json&amp;quot;,
            &amp;quot;application/xml&amp;quot;
          ],
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;in&amp;quot;: &amp;quot;body&amp;quot;,
              &amp;quot;name&amp;quot;: &amp;quot;body&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;Pet object that needs to be added to the store&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/Pet&amp;quot;
              }
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;405&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Invalid input&amp;quot;
            }
          },
          &amp;quot;security&amp;quot;: [
            {
              &amp;quot;petstore_auth&amp;quot;: [
                &amp;quot;write:pets&amp;quot;,
                &amp;quot;read:pets&amp;quot;
              ]
            }
          ],
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        },
        &amp;quot;put&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;pet&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Update an existing pet&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;updatePet&amp;quot;,
          &amp;quot;consumes&amp;quot;: [
            &amp;quot;application/json&amp;quot;,
            &amp;quot;application/xml&amp;quot;
          ],
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;in&amp;quot;: &amp;quot;body&amp;quot;,
              &amp;quot;name&amp;quot;: &amp;quot;body&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;Pet object that needs to be added to the store&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/Pet&amp;quot;
              }
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;400&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Invalid ID supplied&amp;quot;
            },
            &amp;quot;404&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Pet not found&amp;quot;
            },
            &amp;quot;405&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Validation exception&amp;quot;
            }
          },
          &amp;quot;security&amp;quot;: [
            {
              &amp;quot;petstore_auth&amp;quot;: [
                &amp;quot;write:pets&amp;quot;,
                &amp;quot;read:pets&amp;quot;
              ]
            }
          ],
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        }
      },
      &amp;quot;/pet/findByStatus&amp;quot;: {
        &amp;quot;get&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;pet&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Finds Pets by status&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;Multiple status values can be provided with comma separated strings&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;findPetsByStatus&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;status&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;query&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;Status values that need to be considered for filter&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
              &amp;quot;items&amp;quot;: {
                &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
                &amp;quot;enum&amp;quot;: [
                  &amp;quot;available&amp;quot;,
                  &amp;quot;pending&amp;quot;,
                  &amp;quot;sold&amp;quot;
                ],
                &amp;quot;default&amp;quot;: &amp;quot;available&amp;quot;
              },
              &amp;quot;collectionFormat&amp;quot;: &amp;quot;multi&amp;quot;
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;200&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;successful operation&amp;quot;,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
                &amp;quot;items&amp;quot;: {
                  &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/Pet&amp;quot;
                }
              }
            },
            &amp;quot;400&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Invalid status value&amp;quot;
            }
          },
          &amp;quot;security&amp;quot;: [
            {
              &amp;quot;petstore_auth&amp;quot;: [
                &amp;quot;write:pets&amp;quot;,
                &amp;quot;read:pets&amp;quot;
              ]
            }
          ],
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        }
      },
      &amp;quot;/pet/findByTags&amp;quot;: {
        &amp;quot;get&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;pet&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Finds Pets by tags&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;findPetsByTags&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;tags&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;query&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;Tags to filter by&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
              &amp;quot;items&amp;quot;: {
                &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
              },
              &amp;quot;collectionFormat&amp;quot;: &amp;quot;multi&amp;quot;
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;200&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;successful operation&amp;quot;,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
                &amp;quot;items&amp;quot;: {
                  &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/Pet&amp;quot;
                }
              }
            },
            &amp;quot;400&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Invalid tag value&amp;quot;
            }
          },
          &amp;quot;security&amp;quot;: [
            {
              &amp;quot;petstore_auth&amp;quot;: [
                &amp;quot;write:pets&amp;quot;,
                &amp;quot;read:pets&amp;quot;
              ]
            }
          ],
          &amp;quot;deprecated&amp;quot;: true,
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        }
      },
      &amp;quot;/pet/{petId}&amp;quot;: {
        &amp;quot;get&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;pet&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Find pet by ID&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;Returns a single pet&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;getPetById&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;petId&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;path&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;ID of pet to return&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
              &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;200&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;successful operation&amp;quot;,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/Pet&amp;quot;
              }
            },
            &amp;quot;400&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Invalid ID supplied&amp;quot;
            },
            &amp;quot;404&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Pet not found&amp;quot;
            }
          },
          &amp;quot;security&amp;quot;: [
            {
              &amp;quot;api_key&amp;quot;: []
            }
          ],
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        },
        &amp;quot;post&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;pet&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Updates a pet in the store with form data&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;updatePetWithForm&amp;quot;,
          &amp;quot;consumes&amp;quot;: [
            &amp;quot;application/x-www-form-urlencoded&amp;quot;
          ],
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;petId&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;path&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;ID of pet that needs to be updated&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
              &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
            },
            {
              &amp;quot;name&amp;quot;: &amp;quot;name&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;formData&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;Updated name of the pet&amp;quot;,
              &amp;quot;required&amp;quot;: false,
              &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
            },
            {
              &amp;quot;name&amp;quot;: &amp;quot;status&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;formData&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;Updated status of the pet&amp;quot;,
              &amp;quot;required&amp;quot;: false,
              &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;405&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Invalid input&amp;quot;
            }
          },
          &amp;quot;security&amp;quot;: [
            {
              &amp;quot;petstore_auth&amp;quot;: [
                &amp;quot;write:pets&amp;quot;,
                &amp;quot;read:pets&amp;quot;
              ]
            }
          ],
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/x-www-form-urlencoded&amp;quot;
        },
        &amp;quot;delete&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;pet&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Deletes a pet&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;deletePet&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;api_key&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;header&amp;quot;,
              &amp;quot;required&amp;quot;: false,
              &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
            },
            {
              &amp;quot;name&amp;quot;: &amp;quot;petId&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;path&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;Pet id to delete&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
              &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;400&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Invalid ID supplied&amp;quot;
            },
            &amp;quot;404&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Pet not found&amp;quot;
            }
          },
          &amp;quot;security&amp;quot;: [
            {
              &amp;quot;petstore_auth&amp;quot;: [
                &amp;quot;write:pets&amp;quot;,
                &amp;quot;read:pets&amp;quot;
              ]
            }
          ],
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        }
      },
      &amp;quot;/pet/{petId}/uploadImage&amp;quot;: {
        &amp;quot;post&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;pet&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;uploads an image&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;uploadFile&amp;quot;,
          &amp;quot;consumes&amp;quot;: [
            &amp;quot;multipart/form-data&amp;quot;
          ],
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;petId&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;path&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;ID of pet to update&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
              &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
            },
            {
              &amp;quot;name&amp;quot;: &amp;quot;additionalMetadata&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;formData&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;Additional data to pass to server&amp;quot;,
              &amp;quot;required&amp;quot;: false,
              &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
            },
            {
              &amp;quot;name&amp;quot;: &amp;quot;file&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;formData&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;file to upload&amp;quot;,
              &amp;quot;required&amp;quot;: false,
              &amp;quot;type&amp;quot;: &amp;quot;file&amp;quot;
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;200&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;successful operation&amp;quot;,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/ApiResponse&amp;quot;
              }
            }
          },
          &amp;quot;security&amp;quot;: [
            {
              &amp;quot;petstore_auth&amp;quot;: [
                &amp;quot;write:pets&amp;quot;,
                &amp;quot;read:pets&amp;quot;
              ]
            }
          ],
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;multipart/form-data&amp;quot;
        }
      },
      &amp;quot;/store/inventory&amp;quot;: {
        &amp;quot;get&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;store&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Returns pet inventories by status&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;Returns a map of status codes to quantities&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;getInventory&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;200&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;successful operation&amp;quot;,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
                &amp;quot;additionalProperties&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
                  &amp;quot;format&amp;quot;: &amp;quot;int32&amp;quot;
                }
              }
            }
          },
          &amp;quot;security&amp;quot;: [
            {
              &amp;quot;api_key&amp;quot;: []
            }
          ],
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        }
      },
      &amp;quot;/store/order&amp;quot;: {
        &amp;quot;post&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;store&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Place an order for a pet&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;placeOrder&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;in&amp;quot;: &amp;quot;body&amp;quot;,
              &amp;quot;name&amp;quot;: &amp;quot;body&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;order placed for purchasing the pet&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/Order&amp;quot;
              }
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;200&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;successful operation&amp;quot;,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/Order&amp;quot;
              }
            },
            &amp;quot;400&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Invalid Order&amp;quot;
            }
          },
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        }
      },
      &amp;quot;/store/order/{orderId}&amp;quot;: {
        &amp;quot;get&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;store&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Find purchase order by ID&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;For valid response try integer IDs with value &amp;gt;= 1 and &amp;lt;= 10. Other values will generated exceptions&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;getOrderById&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;orderId&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;path&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;ID of pet that needs to be fetched&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
              &amp;quot;maximum&amp;quot;: 10,
              &amp;quot;minimum&amp;quot;: 1,
              &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;200&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;successful operation&amp;quot;,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/Order&amp;quot;
              }
            },
            &amp;quot;400&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Invalid ID supplied&amp;quot;
            },
            &amp;quot;404&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Order not found&amp;quot;
            }
          },
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        },
        &amp;quot;delete&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;store&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Delete purchase order by ID&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;deleteOrder&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;orderId&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;path&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;ID of the order that needs to be deleted&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
              &amp;quot;minimum&amp;quot;: 1,
              &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;400&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Invalid ID supplied&amp;quot;
            },
            &amp;quot;404&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Order not found&amp;quot;
            }
          },
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        }
      },
      &amp;quot;/user&amp;quot;: {
        &amp;quot;post&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;user&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Create user&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;This can only be done by the logged in user.&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;createUser&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;in&amp;quot;: &amp;quot;body&amp;quot;,
              &amp;quot;name&amp;quot;: &amp;quot;body&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;Created user object&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/User&amp;quot;
              }
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;default&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;successful operation&amp;quot;
            }
          },
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        }
      },
      &amp;quot;/user/createWithArray&amp;quot;: {
        &amp;quot;post&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;user&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Creates list of users with given input array&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;createUsersWithArrayInput&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;in&amp;quot;: &amp;quot;body&amp;quot;,
              &amp;quot;name&amp;quot;: &amp;quot;body&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;List of user object&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
                &amp;quot;items&amp;quot;: {
                  &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/User&amp;quot;
                }
              }
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;default&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;successful operation&amp;quot;
            }
          },
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        }
      },
      &amp;quot;/user/createWithList&amp;quot;: {
        &amp;quot;post&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;user&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Creates list of users with given input array&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;createUsersWithListInput&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;in&amp;quot;: &amp;quot;body&amp;quot;,
              &amp;quot;name&amp;quot;: &amp;quot;body&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;List of user object&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
                &amp;quot;items&amp;quot;: {
                  &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/User&amp;quot;
                }
              }
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;default&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;successful operation&amp;quot;
            }
          },
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        }
      },
      &amp;quot;/user/login&amp;quot;: {
        &amp;quot;get&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;user&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Logs user into the system&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;loginUser&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;username&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;query&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;The user name for login&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
            },
            {
              &amp;quot;name&amp;quot;: &amp;quot;password&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;query&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;The password for login in clear text&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;200&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;successful operation&amp;quot;,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
              },
              &amp;quot;headers&amp;quot;: {
                &amp;quot;X-Rate-Limit&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
                  &amp;quot;format&amp;quot;: &amp;quot;int32&amp;quot;,
                  &amp;quot;description&amp;quot;: &amp;quot;calls per hour allowed by the user&amp;quot;
                },
                &amp;quot;X-Expires-After&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
                  &amp;quot;format&amp;quot;: &amp;quot;date-time&amp;quot;,
                  &amp;quot;description&amp;quot;: &amp;quot;date in UTC when token expires&amp;quot;
                }
              }
            },
            &amp;quot;400&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Invalid username/password supplied&amp;quot;
            }
          },
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        }
      },
      &amp;quot;/user/logout&amp;quot;: {
        &amp;quot;get&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;user&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Logs out current logged in user session&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;logoutUser&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;default&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;successful operation&amp;quot;
            }
          },
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        }
      },
      &amp;quot;/user/{username}&amp;quot;: {
        &amp;quot;get&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;user&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Get user by user name&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;getUserByName&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;username&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;path&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;The name that needs to be fetched. Use user1 for testing. &amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;200&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;successful operation&amp;quot;,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/User&amp;quot;
              }
            },
            &amp;quot;400&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Invalid username supplied&amp;quot;
            },
            &amp;quot;404&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;User not found&amp;quot;
            }
          },
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        },
        &amp;quot;put&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;user&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Updated user&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;This can only be done by the logged in user.&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;updateUser&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;username&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;path&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;name that need to be updated&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
            },
            {
              &amp;quot;in&amp;quot;: &amp;quot;body&amp;quot;,
              &amp;quot;name&amp;quot;: &amp;quot;body&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;Updated user object&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/User&amp;quot;
              }
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;400&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Invalid user supplied&amp;quot;
            },
            &amp;quot;404&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;User not found&amp;quot;
            }
          },
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        },
        &amp;quot;delete&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;user&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Delete user&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;This can only be done by the logged in user.&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;deleteUser&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;username&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;path&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;The name that needs to be deleted&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;400&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Invalid username supplied&amp;quot;
            },
            &amp;quot;404&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;User not found&amp;quot;
            }
          },
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        }
      }
    },
    &amp;quot;host&amp;quot;: &amp;quot;petstore.swagger.io&amp;quot;,
    &amp;quot;schemes&amp;quot;: [
      &amp;quot;http&amp;quot;
    ],
    &amp;quot;externalDocs&amp;quot;: {
      &amp;quot;description&amp;quot;: &amp;quot;Find out more about Swagger&amp;quot;,
      &amp;quot;url&amp;quot;: &amp;quot;http://swagger.io&amp;quot;
    },
    &amp;quot;securityDefinitions&amp;quot;: {
      &amp;quot;petstore_auth&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;oauth2&amp;quot;,
        &amp;quot;authorizationUrl&amp;quot;: &amp;quot;http://petstore.swagger.io/oauth/dialog&amp;quot;,
        &amp;quot;flow&amp;quot;: &amp;quot;implicit&amp;quot;,
        &amp;quot;scopes&amp;quot;: {
          &amp;quot;write:pets&amp;quot;: &amp;quot;modify pets in your account&amp;quot;,
          &amp;quot;read:pets&amp;quot;: &amp;quot;read your pets&amp;quot;
        }
      },
      &amp;quot;api_key&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;apiKey&amp;quot;,
        &amp;quot;name&amp;quot;: &amp;quot;api_key&amp;quot;,
        &amp;quot;in&amp;quot;: &amp;quot;header&amp;quot;
      }
    },
    &amp;quot;definitions&amp;quot;: {
      &amp;quot;Order&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
        &amp;quot;properties&amp;quot;: {
          &amp;quot;id&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
            &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
          },
          &amp;quot;petId&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
            &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
          },
          &amp;quot;quantity&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
            &amp;quot;format&amp;quot;: &amp;quot;int32&amp;quot;
          },
          &amp;quot;shipDate&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
            &amp;quot;format&amp;quot;: &amp;quot;date-time&amp;quot;
          },
          &amp;quot;status&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
            &amp;quot;description&amp;quot;: &amp;quot;Order Status&amp;quot;,
            &amp;quot;enum&amp;quot;: [
              &amp;quot;placed&amp;quot;,
              &amp;quot;approved&amp;quot;,
              &amp;quot;delivered&amp;quot;
            ]
          },
          &amp;quot;complete&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;boolean&amp;quot;,
            &amp;quot;default&amp;quot;: false
          }
        },
        &amp;quot;xml&amp;quot;: {
          &amp;quot;name&amp;quot;: &amp;quot;Order&amp;quot;
        }
      },
      &amp;quot;Category&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
        &amp;quot;properties&amp;quot;: {
          &amp;quot;id&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
            &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
          },
          &amp;quot;name&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
          }
        },
        &amp;quot;xml&amp;quot;: {
          &amp;quot;name&amp;quot;: &amp;quot;Category&amp;quot;
        }
      },
      &amp;quot;User&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
        &amp;quot;properties&amp;quot;: {
          &amp;quot;id&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
            &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
          },
          &amp;quot;username&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
          },
          &amp;quot;firstName&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
          },
          &amp;quot;lastName&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
          },
          &amp;quot;email&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
          },
          &amp;quot;password&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
          },
          &amp;quot;phone&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
          },
          &amp;quot;userStatus&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
            &amp;quot;format&amp;quot;: &amp;quot;int32&amp;quot;,
            &amp;quot;description&amp;quot;: &amp;quot;User Status&amp;quot;
          }
        },
        &amp;quot;xml&amp;quot;: {
          &amp;quot;name&amp;quot;: &amp;quot;User&amp;quot;
        }
      },
      &amp;quot;Tag&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
        &amp;quot;properties&amp;quot;: {
          &amp;quot;id&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
            &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
          },
          &amp;quot;name&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
          }
        },
        &amp;quot;xml&amp;quot;: {
          &amp;quot;name&amp;quot;: &amp;quot;Tag&amp;quot;
        }
      },
      &amp;quot;ApiResponse&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
        &amp;quot;properties&amp;quot;: {
          &amp;quot;code&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
            &amp;quot;format&amp;quot;: &amp;quot;int32&amp;quot;
          },
          &amp;quot;type&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
          },
          &amp;quot;message&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
          }
        }
      },
      &amp;quot;Pet&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
        &amp;quot;required&amp;quot;: [
          &amp;quot;name&amp;quot;,
          &amp;quot;photoUrls&amp;quot;
        ],
        &amp;quot;properties&amp;quot;: {
          &amp;quot;id&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
            &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
          },
          &amp;quot;category&amp;quot;: {
            &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/Category&amp;quot;
          },
          &amp;quot;name&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
            &amp;quot;example&amp;quot;: &amp;quot;doggie&amp;quot;
          },
          &amp;quot;photoUrls&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
            &amp;quot;xml&amp;quot;: {
              &amp;quot;name&amp;quot;: &amp;quot;photoUrl&amp;quot;,
              &amp;quot;wrapped&amp;quot;: true
            },
            &amp;quot;items&amp;quot;: {
              &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
            }
          },
          &amp;quot;tags&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
            &amp;quot;xml&amp;quot;: {
              &amp;quot;name&amp;quot;: &amp;quot;tag&amp;quot;,
              &amp;quot;wrapped&amp;quot;: true
            },
            &amp;quot;items&amp;quot;: {
              &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/Tag&amp;quot;
            }
          },
          &amp;quot;status&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
            &amp;quot;description&amp;quot;: &amp;quot;pet status in the store&amp;quot;,
            &amp;quot;enum&amp;quot;: [
              &amp;quot;available&amp;quot;,
              &amp;quot;pending&amp;quot;,
              &amp;quot;sold&amp;quot;
            ]
          }
        },
        &amp;quot;xml&amp;quot;: {
          &amp;quot;name&amp;quot;: &amp;quot;Pet&amp;quot;
        }
      }
    },
    &amp;quot;swagger&amp;quot;: &amp;quot;2.0&amp;quot;,
    &amp;quot;info&amp;quot;: {
      &amp;quot;description&amp;quot;: &amp;quot;This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.&amp;quot;,
      &amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;,
      &amp;quot;title&amp;quot;: &amp;quot;Swagger Petstore&amp;quot;,
      &amp;quot;termsOfService&amp;quot;: &amp;quot;http://swagger.io/terms/&amp;quot;,
      &amp;quot;contact&amp;quot;: {
        &amp;quot;email&amp;quot;: &amp;quot;apiteam@swagger.io&amp;quot;
      },
      &amp;quot;license&amp;quot;: {
        &amp;quot;name&amp;quot;: &amp;quot;Apache 2.0&amp;quot;,
        &amp;quot;url&amp;quot;: &amp;quot;http://www.apache.org/licenses/LICENSE-2.0.html&amp;quot;
      }
    },
    &amp;quot;tags&amp;quot;: [
      {
        &amp;quot;name&amp;quot;: &amp;quot;pet&amp;quot;,
        &amp;quot;description&amp;quot;: &amp;quot;Everything about your Pets&amp;quot;,
        &amp;quot;externalDocs&amp;quot;: {
          &amp;quot;description&amp;quot;: &amp;quot;Find out more&amp;quot;,
          &amp;quot;url&amp;quot;: &amp;quot;http://swagger.io&amp;quot;
        }
      },
      {
        &amp;quot;name&amp;quot;: &amp;quot;store&amp;quot;,
        &amp;quot;description&amp;quot;: &amp;quot;Access to Petstore orders&amp;quot;
      },
      {
        &amp;quot;name&amp;quot;: &amp;quot;user&amp;quot;,
        &amp;quot;description&amp;quot;: &amp;quot;Operations about user&amp;quot;,
        &amp;quot;externalDocs&amp;quot;: {
          &amp;quot;description&amp;quot;: &amp;quot;Find out more about our store&amp;quot;,
          &amp;quot;url&amp;quot;: &amp;quot;http://swagger.io&amp;quot;
        }
      }
    ]
  },
  &amp;quot;component&amp;quot;: [
    {
      &amp;quot;moduleName&amp;quot;: &amp;quot;com.networknt.info.ServerInfoHandler&amp;quot;,
      &amp;quot;config&amp;quot;: {
        &amp;quot;description&amp;quot;: &amp;quot;Server info endpoint that can output environment and component along with configuration&amp;quot;,
        &amp;quot;enableServerInfo&amp;quot;: true
      }
    },
    {
      &amp;quot;moduleName&amp;quot;: &amp;quot;com.networknt.validator.ValidatorHandler&amp;quot;,
      &amp;quot;config&amp;quot;: {
        &amp;quot;description&amp;quot;: &amp;quot;Validate request/response against swagger spec during runtime&amp;quot;,
        &amp;quot;enableValidator&amp;quot;: true,
        &amp;quot;enableResponseValidator&amp;quot;: false
      }
    },
    {
      &amp;quot;moduleName&amp;quot;: &amp;quot;com.networknt.info.SimpleAuditHandler&amp;quot;,
      &amp;quot;config&amp;quot;: {
        &amp;quot;description&amp;quot;: &amp;quot;controls how audit info should be logged. FullAudit is not recommended on produciton if performance is important&amp;quot;,
        &amp;quot;enableFullAudit&amp;quot;: false,
        &amp;quot;simple&amp;quot;: {
          &amp;quot;statusCode&amp;quot;: true,
          &amp;quot;responseTime&amp;quot;: true,
          &amp;quot;headers&amp;quot;: [
            &amp;quot;correlationId&amp;quot;,
            &amp;quot;traceabilityId&amp;quot;,
            &amp;quot;clientId&amp;quot;,
            &amp;quot;userId&amp;quot;,
            &amp;quot;scopeClientId&amp;quot;,
            &amp;quot;endpoint&amp;quot;
          ]
        },
        &amp;quot;enableSimpleAudit&amp;quot;: true,
        &amp;quot;full&amp;quot;: {
          &amp;quot;enableMask&amp;quot;: true,
          &amp;quot;request&amp;quot;: {
            &amp;quot;headers&amp;quot;: [
              &amp;quot;contentType&amp;quot;,
              &amp;quot;characterEncoding&amp;quot;
            ],
            &amp;quot;cookies&amp;quot;: true,
            &amp;quot;queryParameters&amp;quot;: true,
            &amp;quot;body&amp;quot;: true
          },
          &amp;quot;response&amp;quot;: {
            &amp;quot;headers&amp;quot;: true,
            &amp;quot;cookies&amp;quot;: true,
            &amp;quot;body&amp;quot;: true,
            &amp;quot;statusCode&amp;quot;: true,
            &amp;quot;contentLength&amp;quot;: true
          }
        }
      }
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Other Component</title>
      <link>https://networknt.github.io/light-java/other/</link>
      <pubDate>Sun, 23 Oct 2016 13:22:33 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java/other/</guid>
      <description>&lt;p&gt;light-java is a Java API framework based on undertow http core that supports
swagger code generation and runtime request validation and security verification.&lt;/p&gt;

&lt;p&gt;It contains the following components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://networknt.github.io/light-java/other/server/&#34;&gt;server&lt;/a&gt; - a framework on top of undertow http core that support plugins to
performance different middleware handling.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://networknt.github.io/light-java/other/config/&#34;&gt;config&lt;/a&gt; - A module
that supports externalized configuration for standalone application and docker
container.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://networknt.github.io/light-java/other/utility/&#34;&gt;utility&lt;/a&gt; - utility classes that are shared between modules.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://networknt.github.io/light-java/other/client/&#34;&gt;client&lt;/a&gt; - wrapper of apache HttpClient and HttpAsyncClient. support automatically
cache and renew client credentials jwt token&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://networknt.github.io/light-java/other/info/&#34;&gt;info&lt;/a&gt; - a handler that
injects an endpoint /server/info that can out all plugged in component on the
server and configuration of each component.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://networknt.github.io/light-java/other/mask/&#34;&gt;mask&lt;/a&gt; - used to mask sensitive info before logging to audit.log or server.log&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://networknt.github.io/light-java/other/status/&#34;&gt;status&lt;/a&gt; - used to model error http response and assist production monitoring
with unique error code.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/networknt/swagger-codegen&#34;&gt;swagger-codegen&lt;/a&gt; - a code generator
that generates the routing handlers and running API application based on swagger specification.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>server</title>
      <link>https://networknt.github.io/light-java/other/server/</link>
      <pubDate>Sun, 23 Oct 2016 13:21:19 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java/other/server/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This module is responsible for managing life cycle of the embedded Undertow core http server. It starts the
server and initializes all middleware plugins along with route handler providers. It stops the server and
allow the resources to be released even someone click ctrl+c.&lt;/p&gt;

&lt;h2 id=&#34;middleware&#34;&gt;Middleware&lt;/h2&gt;

&lt;p&gt;Middleware plugins are the key components in the framework as they perform the heavy lifting behind the
scene. These components address the cross cutting concerns for all API implementation so that API developers
can focus on their domain logic only. Each component will have a config file (same name but with .json ext)
to control if the component will be enabled and its behavior. The framework has provide a list of the
middleware plugins and experienced developers can add other plugins into the request/response chain.&lt;/p&gt;

&lt;p&gt;To add your own middleware plugins, update com.networknt.handler.MiddlewareHandler in
your API project folder src/main/resources/META-INF/services&lt;/p&gt;

&lt;p&gt;Here is the default middleware configuration generated by &lt;a href=&#34;https://github.com/networknt/swagger-codegen&#34;&gt;swagger-codegen&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# This file is generated and should not be changed unless you want to plug in more handlers into the handler chain
# for cross cutting concerns. In most cases, you should replace some of the default handlers with your own implementation
# Please note: the sequence of these handlers are very important.

#Validator Validate request based on swagger specification (depending on Swagger and Body)
com.networknt.validator.ValidatorHandler
#Sanitizer Encode cross site scripting
com.networknt.sanitizer.SanitizerHandler
#SimpleAudit Log important info about the request into audit log
com.networknt.audit.AuditHandler
#Body Parse body based on content type in the header.
com.networknt.body.BodyHandler
#Security JWT token verification and scope verification (depending on SwaggerHandler)
com.networknt.security.JwtVerifyHandler
#Swagger Parsing swagger specification based on request uri and method.
com.networknt.swagger.SwaggerHandler
#Traceability check if X-Traceability-Id is in request header and put it into response header
com.networknt.traceability.TraceabilityHandler
#Metrics In order to calculate response time accurately, this needs to be the second.
com.networknt.metrics.MetricsHandler
#Exception Global exception handler that needs to be called first.
com.networknt.exception.ExceptionHandler

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;route-provider&#34;&gt;Route Provider&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/networknt/swagger-codegen&#34;&gt;swagger-codegen&lt;/a&gt; generates all the handlers and corresponding
test cases based on OpenAPI specification. It also generate PathHandlerProvider to group these handlers
together. This class is loaded by the server via Java SPI. The config file
com.networknt.server.HandlerProvider can be found at /src/main/resources/META-INF/services&lt;/p&gt;

&lt;p&gt;Here is an example of the config.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;io.swagger.handler.PathHandlerProvider

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;server.json is the configuration file for this module. To make it simpler, it only ip and port are
configurable at the moment. Other server parameters are set for the best performance assuming clould
deployment. In the future, these parameters might be exposed in the server.json.&lt;/p&gt;

&lt;p&gt;Here is an exmaple of server.json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;server config&amp;quot;,
  &amp;quot;ip&amp;quot;: &amp;quot;0.0.0.0&amp;quot;,
  &amp;quot;port&amp;quot;: 8080
}

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>status</title>
      <link>https://networknt.github.io/light-java/other/status/</link>
      <pubDate>Sun, 23 Oct 2016 13:20:51 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java/other/status/</guid>
      <description>

&lt;p&gt;In the scenario that error happens on the server, a Status object is designed
to encapsulate standard http response 4xx and 5xx as well as application specific
error code ERRXXXXX (prefixed with ERR with another 5 digits) and error message.
Additionally, an description of the error will be available for more info about
the error.&lt;/p&gt;

&lt;h1 id=&#34;data-elements&#34;&gt;Data Elements&lt;/h1&gt;

&lt;p&gt;Here are the four fields in the Status object.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    int statusCode;
    String code;
    String message;
    String description;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;construct-the-object-from-status-json&#34;&gt;Construct the object from status.json&lt;/h1&gt;

&lt;p&gt;status.json is a configuration file that contains all the status error defined
for the application and it has the structure like this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;ERR10000&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 401,
    &amp;quot;code&amp;quot;: &amp;quot;ERR10000&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;INVALID_AUTH_TOKEN&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Incorrect signature or malformed token in authorization header&amp;quot;
  },
  &amp;quot;ERR10001&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 401,
    &amp;quot;code&amp;quot;: &amp;quot;ERR10001&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;AUTH_TOKEN_EXPIRED&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Jwt token in authorization header expired&amp;quot;
  },
  .
  .
  .
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To construct the object from this config&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    static final String STATUS_METHOD_NOT_ALLOWED = &amp;quot;ERR10008&amp;quot;;
    .
    .
    .
    Status status = new Status(STATUS_METHOD_NOT_ALLOWED);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To construct the object with arguments to have a description with context
information.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   return new Status(&amp;quot;ERR11000&amp;quot;, queryParameter.getName(), swaggerOperation.getPathString().original());

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;convert-to-json-response&#34;&gt;Convert to JSON response.&lt;/h1&gt;

&lt;p&gt;There are several way to serialize the object to JSON in response. And string
concat is almost 10 times faster than Jackson ObjectMapper. For one million
objects:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Jackson Perf 503
ToString Perf 65

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;error-code-range-allocation&#34;&gt;Error code range allocation&lt;/h1&gt;

&lt;p&gt;The error code prefixed with ERR with another 5 digits so that it can be easily
scanned in log files. Also, certain error code can be used to trigger an alert
such as email or pager notification on system wide issues.&lt;/p&gt;

&lt;p&gt;In order to make sure there is no conflict for error code allocation between
teams, here is the rule&lt;/p&gt;

&lt;p&gt;10000-19999 reserved for the framework/system.
   * 10000-10100 security&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;11000-11999 validation&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;12000-12999 undertow-oauth2&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;20000-29999 common error codes within your business domain.
90000-99999 customize error code that cannot be found in common range.&lt;/p&gt;

&lt;h1 id=&#34;send-the-json-as-response&#34;&gt;Send the JSON as response&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;    Status status = new Status(STATUS_METHOD_NOT_ALLOWED);
    exchange.setStatusCode(status.getStatusCode());
    exchange.getResponseSender().send(status.toString());

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>