<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Light Java - The fastest Java API Framework</title>
    <link>https://networknt.github.io/light-java/index.xml</link>
    <description>Recent content on Light Java - The fastest Java API Framework</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <lastBuildDate>Mon, 06 Feb 2017 21:34:10 -0500</lastBuildDate>
    <atom:link href="https://networknt.github.io/light-java/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>zookeeper</title>
      <link>https://networknt.github.io/light-java/other/zookeeper/</link>
      <pubDate>Mon, 06 Feb 2017 21:34:10 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-java/other/zookeeper/</guid>
      <description></description>
    </item>
    
    <item>
      <title>switcher</title>
      <link>https://networknt.github.io/light-java/other/switcher/</link>
      <pubDate>Mon, 06 Feb 2017 21:34:02 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-java/other/switcher/</guid>
      <description></description>
    </item>
    
    <item>
      <title>service</title>
      <link>https://networknt.github.io/light-java/other/service/</link>
      <pubDate>Mon, 06 Feb 2017 21:33:54 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-java/other/service/</guid>
      <description></description>
    </item>
    
    <item>
      <title>registry</title>
      <link>https://networknt.github.io/light-java/other/registry/</link>
      <pubDate>Mon, 06 Feb 2017 21:33:47 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-java/other/registry/</guid>
      <description></description>
    </item>
    
    <item>
      <title>health</title>
      <link>https://networknt.github.io/light-java/other/health/</link>
      <pubDate>Mon, 06 Feb 2017 21:33:38 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-java/other/health/</guid>
      <description></description>
    </item>
    
    <item>
      <title>handler</title>
      <link>https://networknt.github.io/light-java/other/handler/</link>
      <pubDate>Mon, 06 Feb 2017 21:33:25 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-java/other/handler/</guid>
      <description></description>
    </item>
    
    <item>
      <title>consul</title>
      <link>https://networknt.github.io/light-java/other/consul/</link>
      <pubDate>Mon, 06 Feb 2017 21:33:14 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-java/other/consul/</guid>
      <description></description>
    </item>
    
    <item>
      <title>cluster</title>
      <link>https://networknt.github.io/light-java/other/cluster/</link>
      <pubDate>Mon, 06 Feb 2017 21:33:04 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-java/other/cluster/</guid>
      <description></description>
    </item>
    
    <item>
      <title>balance</title>
      <link>https://networknt.github.io/light-java/other/balance/</link>
      <pubDate>Mon, 06 Feb 2017 21:32:51 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-java/other/balance/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Correlation Id</title>
      <link>https://networknt.github.io/light-java/middleware/correlation/</link>
      <pubDate>Mon, 06 Feb 2017 09:59:28 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-java/middleware/correlation/</guid>
      <description>

&lt;p&gt;This is a handler that checks if X-Correlation-Id exists in request header. If it doesn&amp;rsquo;t exist
it will generate a UUID and put it into the request header. During API to API calls, this header
will be passed to the next API by Client module.&lt;/p&gt;

&lt;h1 id=&#34;generating&#34;&gt;Generating&lt;/h1&gt;

&lt;p&gt;The correlationId is very useful in microservices architecture as there are multiple services
involved in a same client request. When logs are aggregated into a centralized tool, it is
very important there is an unique identifier to associate logs from multiple services for the
same request. The Id is an UUID and must be generated in the first service called from client.&lt;/p&gt;

&lt;h1 id=&#34;passing&#34;&gt;Passing&lt;/h1&gt;

&lt;p&gt;Since the first service generates the Id, it must be passed to other services somehow so that
subsequent services can use it to log their messages. In our &lt;a href=&#34;https://networknt.github.io/light-java/other/client/&#34;&gt;client&lt;/a&gt;
module, it passes the correlationId from the current request header to the request to the next
service.&lt;/p&gt;

&lt;h1 id=&#34;logging&#34;&gt;Logging&lt;/h1&gt;

&lt;p&gt;This handler gets the X-Correlation-Id from request header or generate one if it doesn&amp;rsquo;t
exist in the request header. After that, it puts it into the org.slf4j.MDC so that logback
can put it into the log for every logging statement.&lt;/p&gt;

&lt;h1 id=&#34;logback-xml&#34;&gt;logback.xml&lt;/h1&gt;

&lt;p&gt;In the generated logback.xml, the cId is part of the appender config as pattern &amp;ldquo;%X{cId}&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;appender name=&amp;quot;stdout&amp;quot; class=&amp;quot;ch.qos.logback.core.ConsoleAppender&amp;quot;&amp;gt;
        &amp;lt;!-- encoders are assigned the type
             ch.qos.logback.classic.encoder.PatternLayoutEncoder by default --&amp;gt;
        &amp;lt;encoder&amp;gt;
            &amp;lt;pattern&amp;gt;%d{HH:mm:ss.SSS} [%thread] %X{cId} %-5level %logger{36} - %msg%n&amp;lt;/pattern&amp;gt;
        &amp;lt;/encoder&amp;gt;
    &amp;lt;/appender&amp;gt;

    &amp;lt;appender name=&amp;quot;log&amp;quot; class=&amp;quot;ch.qos.logback.core.FileAppender&amp;quot;&amp;gt;
        &amp;lt;File&amp;gt;target/test.log&amp;lt;/File&amp;gt;
        &amp;lt;Append&amp;gt;false&amp;lt;/Append&amp;gt;
        &amp;lt;layout class=&amp;quot;ch.qos.logback.classic.PatternLayout&amp;quot;&amp;gt;
            &amp;lt;Pattern&amp;gt;%d{HH:mm:ss.SSS} [%thread] %X{cId} %-5level %class{36}:%L %M - %msg%n&amp;lt;/Pattern&amp;gt;
        &amp;lt;/layout&amp;gt;
    &amp;lt;/appender&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>keytool</title>
      <link>https://networknt.github.io/light-java/tools/keytool/</link>
      <pubDate>Fri, 03 Feb 2017 14:12:47 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-java/tools/keytool/</guid>
      <description>&lt;p&gt;This is a Java command line tool to generate and manipulate keys.&lt;/p&gt;

&lt;p&gt;To create a server.keystore for TLS.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;keytool -genkey -alias mycert -keyalg RSA -sigalg MD5withRSA -keystore server.keystore -storepass secret  -keypass secret -validity 9999
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then copy this file to light-java/src/main/resources/config/tls folder. At
the same time, update server.json for keystoreName, keystorePass, keyPass.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;server config&amp;quot;,
  &amp;quot;ip&amp;quot;: &amp;quot;0.0.0.0&amp;quot;,
  &amp;quot;httpPort&amp;quot;: 8080,
  &amp;quot;enableHttp&amp;quot;: true,
  &amp;quot;httpsPort&amp;quot;: 8443,
  &amp;quot;enableHttps&amp;quot;: true,
  &amp;quot;keystoreName&amp;quot;: &amp;quot;tls/server.keystore&amp;quot;,
  &amp;quot;keystorePass&amp;quot;: &amp;quot;secret&amp;quot;,
  &amp;quot;keyPass&amp;quot;: &amp;quot;secret&amp;quot;,
  &amp;quot;enableTwoWayTls&amp;quot;: false,
  &amp;quot;truststoreName&amp;quot;: &amp;quot;tls/server.truststore&amp;quot;,
  &amp;quot;truststorePass&amp;quot;: &amp;quot;password&amp;quot;,
  &amp;quot;serviceId&amp;quot;: &amp;quot;com.networknt.petstore-1.0.0&amp;quot;,
  &amp;quot;enableRegistry&amp;quot;: false
}

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Registry and Discovery</title>
      <link>https://networknt.github.io/light-java/tutorials/discovery/</link>
      <pubDate>Fri, 27 Jan 2017 20:57:14 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-java/tutorials/discovery/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;This is a tutorial to show you how to use service registry and discovery
for microservices. We are going to use api_a, api_b, api_c and api_d as
our examples. To simply the tutorial, I am going to disable the security
all the time.&lt;/p&gt;

&lt;p&gt;The specifications for above APIs can be found at
&lt;a href=&#34;https://github.com/networknt/swagger&#34;&gt;https://github.com/networknt/swagger&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;preparation&#34;&gt;Preparation&lt;/h1&gt;

&lt;p&gt;In order to follow the steps below, please make sure you have the same
working environment.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A computer with MacOS or Linux (Windows should work but I never tried)&lt;/li&gt;
&lt;li&gt;Install git&lt;/li&gt;
&lt;li&gt;Install Docker&lt;/li&gt;
&lt;li&gt;Install JDK 8 and Maven&lt;/li&gt;
&lt;li&gt;Install Java IDE (Intellij IDEA Community Edition is recommended)&lt;/li&gt;
&lt;li&gt;Create a working directory under your user directory called networknt.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;cd ~
mkdir networknt
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;clone-the-specifications&#34;&gt;Clone the specifications&lt;/h1&gt;

&lt;p&gt;In order to generate the initial projects, we need to call swagger-codegen
and we need the specifications for these services.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt
git clone git@github.com:networknt/swagger.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this repo, you have a generate.sh in the root folder to use docker
container of swagger-codegen to generate the code and there are api_a,
api_b, api_c and api_d folder for swagger.yaml files and config.json
files for each API.&lt;/p&gt;

&lt;h1 id=&#34;code-generation&#34;&gt;Code generation&lt;/h1&gt;

&lt;p&gt;We are going to generate the code into light-java-example repo, so let&amp;rsquo;s
clone this repo into our working directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt
git clone git@github.com:networknt/light-java-example.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above repo, there is a folder discovery contains all the projects
for this tutorial. In order to start from scratch, let&amp;rsquo;s change the existing
folder to discovery.bak as a backup so that you can compare if your code is
not working in each step.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt/light-java-example
mv discovery discovery.bak
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s generate the four APIs.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt/swagger
./generate.sh ~/networknt/swagger/api_a ~/networknt/light-java-example/discovery/api_a
./generate.sh ~/networknt/swagger/api_b ~/networknt/light-java-example/discovery/api_b
./generate.sh ~/networknt/swagger/api_c ~/networknt/light-java-example/discovery/api_c
./generate.sh ~/networknt/swagger/api_d ~/networknt/light-java-example/discovery/api_d

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have four projects generated and compiled under generated folder under each
project folder.&lt;/p&gt;

&lt;h1 id=&#34;test-generated-code&#34;&gt;Test generated code&lt;/h1&gt;

&lt;p&gt;Now you can test the generated projects to make sure they are working with mock
data. We will pick up one project to test it but you can test them all.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt/light-java-example/discovery/api_a/generated
mvn exec:exec
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From another terminal, access the server with curl command and check the result.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl http://localhost:8080/v1/data
[ &amp;quot;aeiou&amp;quot; ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this time, all projects are listening the same port 8080, so you have to shutdown
one server in order to start another one to test them all. The return result should
be the same as they are generated from the similar specifications.&lt;/p&gt;

&lt;h1 id=&#34;static&#34;&gt;Static&lt;/h1&gt;

&lt;p&gt;Now we have four standalone services and the next step is to connect them together.&lt;/p&gt;

&lt;p&gt;Here is the call tree for these services.&lt;/p&gt;

&lt;p&gt;API A will call API B and API C to fulfill its request. API B will call API D
to fulfill its request.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;API A -&amp;gt; API B -&amp;gt; API D
      -&amp;gt; API C
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before we change the code, let&amp;rsquo;s copy the generated projects to new folders so
that we can compare the changes later on.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt/light-java-example/discovery/api_a
cp -r generated static
cd ~/networknt/light-java-example/discovery/api_b
cp -r generated static
cd ~/networknt/light-java-example/discovery/api_c
cp -r generated static
cd ~/networknt/light-java-example/discovery/api_d
cp -r generated static
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s start update the code in static folders for each project. If you are
using Intellij IDEA Community Edition, you need to open light-java-example
repo and then import each project by right click pom.xml in each static folder.&lt;/p&gt;

&lt;p&gt;As indicated from the title, here we are going to hard code urls in API to API
calls in configuration files. That means these services will be deployed on the
known hosts with known ports. And we will have a config file for each project to
define the calling service urls.&lt;/p&gt;

&lt;h3 id=&#34;api-a&#34;&gt;API A&lt;/h3&gt;

&lt;p&gt;For API A, as it is calling API B and API C, its handler needs to be changed to
calling two other APIs and needs to load a configuration file that define the
urls for API B and API C.&lt;/p&gt;

&lt;p&gt;DataGetHandler.java&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.networknt.apia.handler;

import com.fasterxml.jackson.core.type.TypeReference;
import com.networknt.client.Client;
import com.networknt.config.Config;
import com.networknt.exception.ClientException;
import io.undertow.server.HttpHandler;
import io.undertow.server.HttpServerExchange;
import io.undertow.util.HttpString;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import java.util.concurrent.CountDownLatch;

import org.apache.commons.lang3.StringEscapeUtils;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.concurrent.FutureCallback;
import org.apache.http.impl.nio.client.CloseableHttpAsyncClient;

public class DataGetHandler implements HttpHandler {
    static String CONFIG_NAME = &amp;quot;api_a&amp;quot;;
    static String apibUrl = (String)Config.getInstance().getJsonMapConfig(CONFIG_NAME).get(&amp;quot;api_b_endpoint&amp;quot;);
    static String apicUrl = (String) Config.getInstance().getJsonMapConfig(CONFIG_NAME).get(&amp;quot;api_c_endpoint&amp;quot;);

    @Override
    public void handleRequest(HttpServerExchange exchange) throws Exception {
        List&amp;lt;String&amp;gt; list = new Vector&amp;lt;String&amp;gt;();
        final HttpGet[] requests = new HttpGet[] {
                new HttpGet(apibUrl),
                new HttpGet(apicUrl),
        };
        try {
            CloseableHttpAsyncClient client = Client.getInstance().getAsyncClient();
            final CountDownLatch latch = new CountDownLatch(requests.length);
            for (final HttpGet request: requests) {
                //Client.getInstance().propagateHeaders(request, exchange);
                client.execute(request, new FutureCallback&amp;lt;HttpResponse&amp;gt;() {
                    @Override
                    public void completed(final HttpResponse response) {
                        try {
                            List&amp;lt;String&amp;gt; apiList = (List&amp;lt;String&amp;gt;) Config.getInstance().getMapper().readValue(response.getEntity().getContent(),
                                    new TypeReference&amp;lt;List&amp;lt;String&amp;gt;&amp;gt;(){});
                            list.addAll(apiList);
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                        latch.countDown();
                    }

                    @Override
                    public void failed(final Exception ex) {
                        ex.printStackTrace();
                        latch.countDown();
                    }

                    @Override
                    public void cancelled() {
                        System.out.println(&amp;quot;cancelled&amp;quot;);
                        latch.countDown();
                    }
                });
            }
            latch.await();
        } catch (ClientException e) {
            e.printStackTrace();
            throw new Exception(&amp;quot;ClientException:&amp;quot;, e);
        }
        // now add API A specific messages
        list.add(&amp;quot;API A: Message 1&amp;quot;);
        list.add(&amp;quot;API A: Message 2&amp;quot;);
        exchange.getResponseSender().send(Config.getInstance().getMapper().writeValueAsString(list));
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following is the config file that define the url for API B and API C. This is hard
coded and can only be changed in this config file and restart the server. For now, I
am just changing the file in src/main/resources/config folder, but it should be externalized
on official environment.&lt;/p&gt;

&lt;p&gt;api_a.json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;api_a config&amp;quot;,
  &amp;quot;api_b_endpoint&amp;quot;: &amp;quot;http://localhost:7002/v1/data&amp;quot;,
  &amp;quot;api_c_endpoint&amp;quot;: &amp;quot;http://localhost:7003/v1/data&amp;quot;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As default port for generated server is 8080, we need to change API A to 7001 so that
we can start all servers on the same host.&lt;/p&gt;

&lt;p&gt;server.json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;server config&amp;quot;,
  &amp;quot;ip&amp;quot;: &amp;quot;0.0.0.0&amp;quot;,
  &amp;quot;port&amp;quot;: 7001,
  &amp;quot;serviceId&amp;quot;: &amp;quot;com.networknt.apia-1.0.0&amp;quot;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;api-b&#34;&gt;API B&lt;/h3&gt;

&lt;p&gt;Change the handler to call API D and load configuration for API D url.&lt;/p&gt;

&lt;p&gt;DataGetHandler.java&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.networknt.apib.handler;

import com.fasterxml.jackson.core.type.TypeReference;
import com.networknt.client.Client;
import com.networknt.config.Config;
import com.networknt.exception.ClientException;
import io.undertow.server.HttpHandler;
import io.undertow.server.HttpServerExchange;
import io.undertow.util.HttpString;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.commons.lang3.StringEscapeUtils;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;

public class DataGetHandler implements HttpHandler {
    static String CONFIG_NAME = &amp;quot;api_b&amp;quot;;
    static String apidUrl = (String) Config.getInstance().getJsonMapConfig(CONFIG_NAME).get(&amp;quot;api_d_endpoint&amp;quot;);


    @Override
    public void handleRequest(HttpServerExchange exchange) throws Exception {
        List&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;String&amp;gt;();
        try {
            CloseableHttpClient client = Client.getInstance().getSyncClient();
            HttpGet httpGet = new HttpGet(apidUrl);
            //Client.getInstance().propagateHeaders(httpGet, exchange);
            CloseableHttpResponse response = client.execute(httpGet);
            int responseCode = response.getStatusLine().getStatusCode();
            if(responseCode != 200){
                throw new Exception(&amp;quot;Failed to call API D: &amp;quot; + responseCode);
            }
            List&amp;lt;String&amp;gt; apidList = (List&amp;lt;String&amp;gt;) Config.getInstance().getMapper().readValue(response.getEntity().getContent(),
                    new TypeReference&amp;lt;List&amp;lt;String&amp;gt;&amp;gt;(){});
            list.addAll(apidList);
        } catch (ClientException e) {
            throw new Exception(&amp;quot;Client Exception: &amp;quot;, e);
        } catch (IOException e) {
            throw new Exception(&amp;quot;IOException:&amp;quot;, e);
        }
        // now add API B specific messages
        list.add(&amp;quot;API B: Message 1&amp;quot;);
        list.add(&amp;quot;API B: Message 2&amp;quot;);
        exchange.getResponseSender().send(Config.getInstance().getMapper().writeValueAsString(list));
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Configuration file for API D url.&lt;/p&gt;

&lt;p&gt;api_b.json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;api_b config&amp;quot;,
  &amp;quot;api_d_endpoint&amp;quot;: &amp;quot;http://localhost:7004/v1/data&amp;quot;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change port number for API B to 7002 from 8080.
server.json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;server config&amp;quot;,
  &amp;quot;ip&amp;quot;: &amp;quot;0.0.0.0&amp;quot;,
  &amp;quot;port&amp;quot;: 7002,
  &amp;quot;serviceId&amp;quot;: &amp;quot;com.networknt.apib-1.0.0&amp;quot;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;api-c&#34;&gt;API C&lt;/h3&gt;

&lt;p&gt;Update API C handler to return information that associates with API C.&lt;/p&gt;

&lt;p&gt;DataGetHandler.java&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.networknt.apic.handler;

import com.networknt.config.Config;
import io.undertow.server.HttpHandler;
import io.undertow.server.HttpServerExchange;
import io.undertow.util.HttpString;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.commons.lang3.StringEscapeUtils;

public class DataGetHandler implements HttpHandler {
    @Override
    public void handleRequest(HttpServerExchange exchange) throws Exception {
        List&amp;lt;String&amp;gt; messages = new ArrayList&amp;lt;String&amp;gt;();
        messages.add(&amp;quot;API C: Message 1&amp;quot;);
        messages.add(&amp;quot;API C: Message 2&amp;quot;);
        exchange.getResponseSender().send(Config.getInstance().getMapper().writeValueAsString(messages));
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Update port number for API C to 7003 from 8080.&lt;/p&gt;

&lt;p&gt;server.json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;server config&amp;quot;,
  &amp;quot;ip&amp;quot;: &amp;quot;0.0.0.0&amp;quot;,
  &amp;quot;port&amp;quot;: 7003,
  &amp;quot;serviceId&amp;quot;: &amp;quot;com.networknt.apic-1.0.0&amp;quot;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;api-d&#34;&gt;API D&lt;/h3&gt;

&lt;p&gt;Update Handler for API D to return messages related to API D.&lt;/p&gt;

&lt;p&gt;DataGetHandler.java&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.networknt.apid.handler;

import com.networknt.config.Config;
import io.undertow.server.HttpHandler;
import io.undertow.server.HttpServerExchange;
import io.undertow.util.HttpString;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.commons.lang3.StringEscapeUtils;

public class DataGetHandler implements HttpHandler {
    @Override
    public void handleRequest(HttpServerExchange exchange) throws Exception {
        List&amp;lt;String&amp;gt; messages = new ArrayList&amp;lt;String&amp;gt;();
        messages.add(&amp;quot;API D: Message 1&amp;quot;);
        messages.add(&amp;quot;API D: Message 2&amp;quot;);
        exchange.getResponseSender().send(Config.getInstance().getMapper().writeValueAsString(messages));
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Update port to 7004 from 8080&lt;/p&gt;

&lt;p&gt;server.json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;server config&amp;quot;,
  &amp;quot;ip&amp;quot;: &amp;quot;0.0.0.0&amp;quot;,
  &amp;quot;port&amp;quot;: 7004,
  &amp;quot;serviceId&amp;quot;: &amp;quot;com.networknt.apid-1.0.0&amp;quot;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;start-servers&#34;&gt;Start Servers&lt;/h3&gt;

&lt;p&gt;Now let&amp;rsquo;s start all four servers from four terminals.&lt;/p&gt;

&lt;p&gt;API A&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt/light-java-example/discovery/api_a/static
mvn clean install exec:exec
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;API B&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt/light-java-example/discovery/api_b/static
mvn clean install exec:exec

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;API C&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt/light-java-example/discovery/api_c/static
mvn clean install exec:exec

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;API D&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt/light-java-example/discovery/api_d/static
mvn clean install exec:exec

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;test-servers&#34;&gt;Test Servers&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s access API A and see if we can get messages from all four servers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl http://localhost:7001/v1/data

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The result is&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[&amp;quot;API C: Message 1&amp;quot;,&amp;quot;API C: Message 2&amp;quot;,&amp;quot;API D: Message 1&amp;quot;,&amp;quot;API D: Message 2&amp;quot;,&amp;quot;API B: Message 1&amp;quot;,&amp;quot;API B: Message 2&amp;quot;,&amp;quot;API A: Message 1&amp;quot;,&amp;quot;API A: Message 2&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;dynamic&#34;&gt;Dynamic&lt;/h1&gt;

&lt;p&gt;The above step uses static urls defined in configuration files. It won&amp;rsquo;t work in a
dynamic clustered environment as there are more instances of each service. In this
step, we are going to use cluster component with direct registry so that we don&amp;rsquo;t
need to start external consul or zookeeper instances. We still go through registry
for service discovery but the registry is defined in service.json. Next step we
will use consul server for the discovery to mimic real production environment.&lt;/p&gt;

&lt;p&gt;First let&amp;rsquo;s create a folder from static to dynamic.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt/light-java-example/discovery/api_a
cp -r static dynamic
cd ~/networknt/light-java-example/discovery/api_b
cp -r static dynamic
cd ~/networknt/light-java-example/discovery/api_c
cp -r static dynamic
cd ~/networknt/light-java-example/discovery/api_d
cp -r static dynamic
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;api-a-1&#34;&gt;API A&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s update API A Handler to use Cluster instance instead of using static config
files.&lt;/p&gt;

&lt;p&gt;DataGetHandler.java&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.networknt.apia.handler;

import com.fasterxml.jackson.core.type.TypeReference;
import com.networknt.client.Client;
import com.networknt.cluster.Cluster;
import com.networknt.config.Config;
import com.networknt.exception.ClientException;
import com.networknt.service.SingletonServiceFactory;
import io.undertow.server.HttpHandler;
import io.undertow.server.HttpServerExchange;

import java.io.IOException;
import java.util.List;
import java.util.Vector;
import java.util.concurrent.CountDownLatch;

import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.concurrent.FutureCallback;
import org.apache.http.impl.nio.client.CloseableHttpAsyncClient;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DataGetHandler implements HttpHandler {
    private static Logger logger = LoggerFactory.getLogger(DataGetHandler.class);
    private static Cluster cluster = (Cluster) SingletonServiceFactory.getBean(Cluster.class);

    @Override
    public void handleRequest(HttpServerExchange exchange) throws Exception {
        List&amp;lt;String&amp;gt; list = new Vector&amp;lt;&amp;gt;();

        String apibUrl = cluster.serviceToUrl(&amp;quot;http&amp;quot;, &amp;quot;com.networknt.apib-1.0.0&amp;quot;) + &amp;quot;/v1/data&amp;quot;;
        if(logger.isDebugEnabled()) logger.debug(&amp;quot;apibUrl = &amp;quot; + apibUrl);
        String apicUrl = cluster.serviceToUrl(&amp;quot;http&amp;quot;, &amp;quot;com.networknt.apic-1.0.0&amp;quot;) + &amp;quot;/v1/data&amp;quot;;
        if(logger.isDebugEnabled()) logger.debug(&amp;quot;apicUrl = &amp;quot; + apicUrl);
        final HttpGet[] requests = new HttpGet[] {
                new HttpGet(apibUrl),
                new HttpGet(apicUrl),
        };
        try {
            CloseableHttpAsyncClient client = Client.getInstance().getAsyncClient();
            final CountDownLatch latch = new CountDownLatch(requests.length);
            for (final HttpGet request: requests) {
                //Client.getInstance().propagateHeaders(request, exchange);
                client.execute(request, new FutureCallback&amp;lt;HttpResponse&amp;gt;() {
                    @Override
                    public void completed(final HttpResponse response) {
                        try {
                            List&amp;lt;String&amp;gt; apiList = Config.getInstance().getMapper().readValue(response.getEntity().getContent(),
                                    new TypeReference&amp;lt;List&amp;lt;String&amp;gt;&amp;gt;(){});
                            list.addAll(apiList);
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                        latch.countDown();
                    }

                    @Override
                    public void failed(final Exception ex) {
                        ex.printStackTrace();
                        latch.countDown();
                    }

                    @Override
                    public void cancelled() {
                        System.out.println(&amp;quot;cancelled&amp;quot;);
                        latch.countDown();
                    }
                });
            }
            latch.await();
        } catch (ClientException e) {
            e.printStackTrace();
            throw new Exception(&amp;quot;ClientException:&amp;quot;, e);
        }
        // now add API A specific messages
        list.add(&amp;quot;API A: Message 1&amp;quot;);
        list.add(&amp;quot;API A: Message 2&amp;quot;);
        exchange.getResponseSender().send(Config.getInstance().getMapper().writeValueAsString(list));
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For discovery, some new modules should be included into the pom.xml.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.networknt&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;service&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${version.light-java}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.networknt&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;registry&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${version.light-java}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.networknt&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;balance&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${version.light-java}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.networknt&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;cluster&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${version.light-java}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.networknt&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;consul&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${version.light-java}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, we need service.json to inject several singleton implementations of
Cluster, LoadBanlance, URL and Registry. Please note that the key in parameters
is serviceId of your calling APIs&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;singleton service factory configuration&amp;quot;,
  &amp;quot;singletons&amp;quot;: [
    {
      &amp;quot;com.networknt.registry.URL&amp;quot;: [
        {
          &amp;quot;com.networknt.registry.URLImpl&amp;quot;: {
            &amp;quot;protocol&amp;quot;: &amp;quot;https&amp;quot;,
            &amp;quot;host&amp;quot;: &amp;quot;localhost&amp;quot;,
            &amp;quot;port&amp;quot;: 8080,
            &amp;quot;path&amp;quot;: &amp;quot;direct&amp;quot;,
            &amp;quot;parameters&amp;quot;: {
              &amp;quot;com.networknt.apib-1.0.0&amp;quot;: &amp;quot;http://localhost:7002&amp;quot;,
              &amp;quot;com.networknt.apic-1.0.0&amp;quot;: &amp;quot;http://localhost:7003&amp;quot;
            }
          }
        }
      ]
    },
    {
      &amp;quot;com.networknt.registry.Registry&amp;quot; : [
        &amp;quot;com.networknt.registry.support.DirectRegistry&amp;quot;
      ]
    },
    {
      &amp;quot;com.networknt.balance.LoadBalance&amp;quot; : [
        &amp;quot;com.networknt.balance.RoundRobinLoadBalance&amp;quot;
      ]
    },
    {
      &amp;quot;com.networknt.cluster.Cluster&amp;quot; : [
        &amp;quot;com.networknt.cluster.LightCluster&amp;quot;
      ]
    }
  ]
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;api-b-1&#34;&gt;API B&lt;/h3&gt;

&lt;p&gt;DataGetHandler.java&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.networknt.apib.handler;

import com.fasterxml.jackson.core.type.TypeReference;
import com.networknt.client.Client;
import com.networknt.cluster.Cluster;
import com.networknt.config.Config;
import com.networknt.exception.ClientException;
import com.networknt.service.SingletonServiceFactory;
import io.undertow.server.HttpHandler;
import io.undertow.server.HttpServerExchange;
import io.undertow.util.HttpString;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.commons.lang3.StringEscapeUtils;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DataGetHandler implements HttpHandler {
    private static Logger logger = LoggerFactory.getLogger(DataGetHandler.class);
    private static Cluster cluster = (Cluster) SingletonServiceFactory.getBean(Cluster.class);

    @Override
    public void handleRequest(HttpServerExchange exchange) throws Exception {
        List&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();
        String apidUrl = cluster.serviceToUrl(&amp;quot;http&amp;quot;, &amp;quot;com.networknt.apid-1.0.0&amp;quot;) + &amp;quot;/v1/data&amp;quot;;
        if(logger.isDebugEnabled()) logger.debug(&amp;quot;apidUrl = &amp;quot; + apidUrl);

        try {
            CloseableHttpClient client = Client.getInstance().getSyncClient();
            HttpGet httpGet = new HttpGet(apidUrl);
            //Client.getInstance().propagateHeaders(httpGet, exchange);
            CloseableHttpResponse response = client.execute(httpGet);
            int responseCode = response.getStatusLine().getStatusCode();
            if(responseCode != 200){
                throw new Exception(&amp;quot;Failed to call API D: &amp;quot; + responseCode);
            }
            List&amp;lt;String&amp;gt; apidList = Config.getInstance().getMapper().readValue(response.getEntity().getContent(),
                    new TypeReference&amp;lt;List&amp;lt;String&amp;gt;&amp;gt;(){});
            list.addAll(apidList);
        } catch (ClientException e) {
            throw new Exception(&amp;quot;Client Exception: &amp;quot;, e);
        } catch (IOException e) {
            throw new Exception(&amp;quot;IOException:&amp;quot;, e);
        }
        // now add API B specific messages
        list.add(&amp;quot;API B: Message 1&amp;quot;);
        list.add(&amp;quot;API B: Message 2&amp;quot;);
        exchange.getResponseSender().send(Config.getInstance().getMapper().writeValueAsString(list));
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As API B is calling API D, it needs discovery as well and the following dependencies
should be added to pom.xml&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.networknt&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;service&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${version.light-java}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.networknt&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;registry&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${version.light-java}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.networknt&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;balance&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${version.light-java}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.networknt&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;cluster&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${version.light-java}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.networknt&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;consul&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${version.light-java}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inject interface implementations and define the API D url.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;singleton service factory configuration&amp;quot;,
  &amp;quot;singletons&amp;quot;: [
    {
      &amp;quot;com.networknt.registry.URL&amp;quot;: [
        {
          &amp;quot;com.networknt.registry.URLImpl&amp;quot;: {
            &amp;quot;protocol&amp;quot;: &amp;quot;https&amp;quot;,
            &amp;quot;host&amp;quot;: &amp;quot;localhost&amp;quot;,
            &amp;quot;port&amp;quot;: 8080,
            &amp;quot;path&amp;quot;: &amp;quot;direct&amp;quot;,
            &amp;quot;parameters&amp;quot;: {
              &amp;quot;com.networknt.apid-1.0.0&amp;quot;: &amp;quot;http://localhost:7004&amp;quot;
            }
          }
        }
      ]
    },
    {
      &amp;quot;com.networknt.registry.Registry&amp;quot; : [
        &amp;quot;com.networknt.registry.support.DirectRegistry&amp;quot;
      ]
    },
    {
      &amp;quot;com.networknt.balance.LoadBalance&amp;quot; : [
        &amp;quot;com.networknt.balance.RoundRobinLoadBalance&amp;quot;
      ]
    },
    {
      &amp;quot;com.networknt.cluster.Cluster&amp;quot; : [
        &amp;quot;com.networknt.cluster.LightCluster&amp;quot;
      ]
    }
  ]
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;api-c-1&#34;&gt;API C&lt;/h3&gt;

&lt;p&gt;API C is not calling any other APIs, so there is no change to its handler.&lt;/p&gt;

&lt;h3 id=&#34;api-d-1&#34;&gt;API D&lt;/h3&gt;

&lt;p&gt;API D is not calling any other APIs, so there is no change to its handler.&lt;/p&gt;

&lt;h3 id=&#34;start-servers-1&#34;&gt;Start Servers&lt;/h3&gt;

&lt;p&gt;Now let&amp;rsquo;s start all four servers from four terminals.&lt;/p&gt;

&lt;p&gt;API A&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt/light-java-example/discovery/api_a/dynamic
mvn clean install exec:exec
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;API B&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt/light-java-example/discovery/api_b/dynamic
mvn clean install exec:exec

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;API C&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt/light-java-example/discovery/api_c/dynamic
mvn clean install exec:exec

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;API D&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt/light-java-example/discovery/api_d/dynamic
mvn clean install exec:exec

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;test-servers-1&#34;&gt;Test Servers&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s access API A and see if we can get messages from all four servers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl http://localhost:7001/v1/data

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The result is&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[&amp;quot;API C: Message 1&amp;quot;,&amp;quot;API C: Message 2&amp;quot;,&amp;quot;API D: Message 1&amp;quot;,&amp;quot;API D: Message 2&amp;quot;,&amp;quot;API B: Message 1&amp;quot;,&amp;quot;API B: Message 2&amp;quot;,&amp;quot;API A: Message 1&amp;quot;,&amp;quot;API A: Message 2&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;multiple-api-d-instances&#34;&gt;Multiple API D Instances&lt;/h1&gt;

&lt;p&gt;In this step, we are going to start two API D instances that listening to 70041 and 70042.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s copy from dynamic to multiple for each API.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt/light-java-example/discovery/api_a
cp -r dynamic multiple
cd ~/networknt/light-java-example/discovery/api_b
cp -r dynamic multiple
cd ~/networknt/light-java-example/discovery/api_c
cp -r dynamic multiple
cd ~/networknt/light-java-example/discovery/api_d
cp -r dynamic multiple
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;api-b-2&#34;&gt;API B&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s modify API B service.json to have two API D instances that listen to 70041
and 70042.&lt;/p&gt;

&lt;p&gt;service.json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;singleton service factory configuration&amp;quot;,
  &amp;quot;singletons&amp;quot;: [
    {
      &amp;quot;com.networknt.registry.URL&amp;quot;: [
        {
          &amp;quot;com.networknt.registry.URLImpl&amp;quot;: {
            &amp;quot;protocol&amp;quot;: &amp;quot;https&amp;quot;,
            &amp;quot;host&amp;quot;: &amp;quot;localhost&amp;quot;,
            &amp;quot;port&amp;quot;: 8080,
            &amp;quot;path&amp;quot;: &amp;quot;direct&amp;quot;,
            &amp;quot;parameters&amp;quot;: {
              &amp;quot;com.networknt.apid-1.0.0&amp;quot;: &amp;quot;http://localhost:7004,http://localhost:7005&amp;quot;
            }
          }
        }
      ]
    },
    {
      &amp;quot;com.networknt.registry.Registry&amp;quot; : [
        &amp;quot;com.networknt.registry.support.DirectRegistry&amp;quot;
      ]
    },
    {
      &amp;quot;com.networknt.balance.LoadBalance&amp;quot; : [
        &amp;quot;com.networknt.balance.RoundRobinLoadBalance&amp;quot;
      ]
    },
    {
      &amp;quot;com.networknt.cluster.Cluster&amp;quot; : [
        &amp;quot;com.networknt.cluster.LightCluster&amp;quot;
      ]
    }
  ]
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;api-d-2&#34;&gt;API D&lt;/h3&gt;

&lt;p&gt;In order to start two instances with the same code base, we need to modify the
server.json before starting the server.&lt;/p&gt;

&lt;p&gt;Also, let&amp;rsquo;s update the handler so that we know which port serves the request.&lt;/p&gt;

&lt;p&gt;DataGetHandler.java&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.networknt.apid.handler;

import com.networknt.config.Config;
import com.networknt.server.Server;
import io.undertow.server.HttpHandler;
import io.undertow.server.HttpServerExchange;
import io.undertow.util.HttpString;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.commons.lang3.StringEscapeUtils;

public class DataGetHandler implements HttpHandler {
    @Override
    public void handleRequest(HttpServerExchange exchange) throws Exception {
        int port = Server.config.getPort();
        List&amp;lt;String&amp;gt; messages = new ArrayList&amp;lt;String&amp;gt;();
        messages.add(&amp;quot;API D: Message 1 from port &amp;quot; + port);
        messages.add(&amp;quot;API D: Message 2 from port &amp;quot; + port);
        exchange.getResponseSender().send(Config.getInstance().getMapper().writeValueAsString(messages));
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;start-servers-2&#34;&gt;Start Servers&lt;/h3&gt;

&lt;p&gt;Now let&amp;rsquo;s start all five servers from five terminals. API D has two instances.&lt;/p&gt;

&lt;p&gt;API A&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt/light-java-example/discovery/api_a/multiple
mvn clean install exec:exec
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;API B&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt/light-java-example/discovery/api_b/multiple
mvn clean install exec:exec

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;API C&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt/light-java-example/discovery/api_c/multiple
mvn clean install exec:exec

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;API D&lt;/p&gt;

&lt;p&gt;And start the first instance that listen to 7004.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt/light-java-example/discovery/api_d/multiple
mvn clean install exec:exec

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s start the second instance. Before starting the serer, let&amp;rsquo;s update
server.json with port 7005.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;server config&amp;quot;,
  &amp;quot;ip&amp;quot;: &amp;quot;0.0.0.0&amp;quot;,
  &amp;quot;port&amp;quot;: 7005,
  &amp;quot;serviceId&amp;quot;: &amp;quot;com.networknt.apid-1.0.0&amp;quot;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And start the second instance&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt/light-java-example/discovery/api_d/multiple
mvn clean install exec:exec

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;test-servers-2&#34;&gt;Test Servers&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;curl http://localhost:7001/v1/data
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the result can be the following alternatively.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[&amp;quot;API C: Message 1&amp;quot;,&amp;quot;API C: Message 2&amp;quot;,&amp;quot;API D: Message 1 from port 7004&amp;quot;,&amp;quot;API D: Message 2 from port 7004&amp;quot;,&amp;quot;API B: Message 1&amp;quot;,&amp;quot;API B: Message 2&amp;quot;,&amp;quot;API A: Message 1&amp;quot;,&amp;quot;API A: Message 2&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[&amp;quot;API C: Message 1&amp;quot;,&amp;quot;API C: Message 2&amp;quot;,&amp;quot;API D: Message 1 from port 7005&amp;quot;,&amp;quot;API D: Message 2 from port 7005&amp;quot;,&amp;quot;API B: Message 1&amp;quot;,&amp;quot;API B: Message 2&amp;quot;,&amp;quot;API A: Message 1&amp;quot;,&amp;quot;API A: Message 2&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;consul&#34;&gt;Consul&lt;/h1&gt;

&lt;p&gt;Above step multiple demonstrates how to use direct registry to enable load balance and
it works the same way as Consul and Zookeeper registry. In this step, we are going to
use Consul for registry to enable cluster.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s copy from multiple to consul for each API.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt/light-java-example/discovery/api_a
cp -r multiple consul
cd ~/networknt/light-java-example/discovery/api_b
cp -r multiple consul
cd ~/networknt/light-java-example/discovery/api_c
cp -r multiple consul
cd ~/networknt/light-java-example/discovery/api_d
cp -r multiple consul
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;api-a-2&#34;&gt;API A&lt;/h3&gt;

&lt;p&gt;In order to switch from direct registry to consul registry, we just need to update
service.json configuration to inject the consul implementation to the registry interface.&lt;/p&gt;

&lt;p&gt;service.json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;singleton service factory configuration&amp;quot;,
  &amp;quot;singletons&amp;quot;: [
    {
      &amp;quot;com.networknt.registry.URL&amp;quot;: [
        {
          &amp;quot;com.networknt.registry.URLImpl&amp;quot;: {
            &amp;quot;protocol&amp;quot;: &amp;quot;light&amp;quot;,
            &amp;quot;host&amp;quot;: &amp;quot;localhost&amp;quot;,
            &amp;quot;port&amp;quot;: 8080,
            &amp;quot;path&amp;quot;: &amp;quot;consul&amp;quot;,
            &amp;quot;parameters&amp;quot;: {
              &amp;quot;registryRetryPeriod&amp;quot;: &amp;quot;30000&amp;quot;
            }
          }
        }
      ]
    },
    {
      &amp;quot;com.networknt.consul.client.ConsulClient&amp;quot;: [
        {
          &amp;quot;com.networknt.consul.client.ConsulEcwidClient&amp;quot;: [
            {&amp;quot;java.lang.String&amp;quot;: &amp;quot;localhost&amp;quot;},
            {&amp;quot;int&amp;quot;: 8500}
          ]
        }
      ]
    },
    {
      &amp;quot;com.networknt.registry.Registry&amp;quot; : [
        &amp;quot;com.networknt.consul.ConsulRegistry&amp;quot;
      ]
    },
    {
      &amp;quot;com.networknt.balance.LoadBalance&amp;quot; : [
        &amp;quot;com.networknt.balance.RoundRobinLoadBalance&amp;quot;
      ]
    },
    {
      &amp;quot;com.networknt.cluster.Cluster&amp;quot; : [
        &amp;quot;com.networknt.cluster.LightCluster&amp;quot;
      ]
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Although in our case, there is no caller service for API A, we still need to register
it to consul by enable it in server.json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;server config&amp;quot;,
  &amp;quot;ip&amp;quot;: &amp;quot;0.0.0.0&amp;quot;,
  &amp;quot;port&amp;quot;: 7001,
  &amp;quot;serviceId&amp;quot;: &amp;quot;com.networknt.apia-1.0.0&amp;quot;,
  &amp;quot;enableRegistry&amp;quot;: true
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;api-b-3&#34;&gt;API B&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s update service.json to inject consul registry instead of direct registry used in
the previous step.&lt;/p&gt;

&lt;p&gt;service.json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;singleton service factory configuration&amp;quot;,
  &amp;quot;singletons&amp;quot;: [
    {
      &amp;quot;com.networknt.registry.URL&amp;quot;: [
        {
          &amp;quot;com.networknt.registry.URLImpl&amp;quot;: {
            &amp;quot;protocol&amp;quot;: &amp;quot;light&amp;quot;,
            &amp;quot;host&amp;quot;: &amp;quot;localhost&amp;quot;,
            &amp;quot;port&amp;quot;: 8080,
            &amp;quot;path&amp;quot;: &amp;quot;consul&amp;quot;,
            &amp;quot;parameters&amp;quot;: {
              &amp;quot;registryRetryPeriod&amp;quot;: &amp;quot;30000&amp;quot;
            }
          }
        }
      ]
    },
    {
      &amp;quot;com.networknt.consul.client.ConsulClient&amp;quot;: [
        {
          &amp;quot;com.networknt.consul.client.ConsulEcwidClient&amp;quot;: [
            {&amp;quot;java.lang.String&amp;quot;: &amp;quot;localhost&amp;quot;},
            {&amp;quot;int&amp;quot;: 8500}
          ]
        }
      ]
    },
    {
      &amp;quot;com.networknt.registry.Registry&amp;quot; : [
        &amp;quot;com.networknt.consul.ConsulRegistry&amp;quot;
      ]
    },
    {
      &amp;quot;com.networknt.balance.LoadBalance&amp;quot; : [
        &amp;quot;com.networknt.balance.RoundRobinLoadBalance&amp;quot;
      ]
    },
    {
      &amp;quot;com.networknt.cluster.Cluster&amp;quot; : [
        &amp;quot;com.networknt.cluster.LightCluster&amp;quot;
      ]
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As API B will be called by API A, it needs to register itself to consul registry so
that API A can discover it through the same consul registry. To do that you only need
to enable server registry in config file.&lt;/p&gt;

&lt;p&gt;server.json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;server config&amp;quot;,
  &amp;quot;ip&amp;quot;: &amp;quot;0.0.0.0&amp;quot;,
  &amp;quot;port&amp;quot;: 7002,
  &amp;quot;serviceId&amp;quot;: &amp;quot;com.networknt.apib-1.0.0&amp;quot;,
  &amp;quot;enableRegistry&amp;quot;: true
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;api-c-2&#34;&gt;API C&lt;/h3&gt;

&lt;p&gt;Although API C is not calling any other APIs, it needs to register itself to consul
so that API A can discovery it from the same consul registry.&lt;/p&gt;

&lt;p&gt;service.json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;singleton service factory configuration&amp;quot;,
  &amp;quot;singletons&amp;quot;: [
    {
      &amp;quot;com.networknt.registry.URL&amp;quot;: [
        {
          &amp;quot;com.networknt.registry.URLImpl&amp;quot;: {
            &amp;quot;protocol&amp;quot;: &amp;quot;light&amp;quot;,
            &amp;quot;host&amp;quot;: &amp;quot;localhost&amp;quot;,
            &amp;quot;port&amp;quot;: 8080,
            &amp;quot;path&amp;quot;: &amp;quot;consul&amp;quot;,
            &amp;quot;parameters&amp;quot;: {
              &amp;quot;registryRetryPeriod&amp;quot;: &amp;quot;30000&amp;quot;
            }
          }
        }
      ]
    },
    {
      &amp;quot;com.networknt.consul.client.ConsulClient&amp;quot;: [
        {
          &amp;quot;com.networknt.consul.client.ConsulEcwidClient&amp;quot;: [
            {&amp;quot;java.lang.String&amp;quot;: &amp;quot;localhost&amp;quot;},
            {&amp;quot;int&amp;quot;: 8500}
          ]
        }
      ]
    },
    {
      &amp;quot;com.networknt.registry.Registry&amp;quot; : [
        &amp;quot;com.networknt.consul.ConsulRegistry&amp;quot;
      ]
    },
    {
      &amp;quot;com.networknt.balance.LoadBalance&amp;quot; : [
        &amp;quot;com.networknt.balance.RoundRobinLoadBalance&amp;quot;
      ]
    },
    {
      &amp;quot;com.networknt.cluster.Cluster&amp;quot; : [
        &amp;quot;com.networknt.cluster.LightCluster&amp;quot;
      ]
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;server.json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;server config&amp;quot;,
  &amp;quot;ip&amp;quot;: &amp;quot;0.0.0.0&amp;quot;,
  &amp;quot;port&amp;quot;: 7003,
  &amp;quot;serviceId&amp;quot;: &amp;quot;com.networknt.apic-1.0.0&amp;quot;,
  &amp;quot;enableRegistry&amp;quot;: true
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, in previous step, we didn&amp;rsquo;t add extra dependencies for registry, load balance
cluster and consul modules. Let&amp;rsquo;s add them here in pom.xml&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.networknt&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;registry&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${version.light-java}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.networknt&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;balance&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${version.light-java}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.networknt&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;cluster&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${version.light-java}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.networknt&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;consul&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${version.light-java}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;api-d-3&#34;&gt;API D&lt;/h3&gt;

&lt;p&gt;Although API D is not calling any other APIs, it needs to register itself to consul
so that API B can discovery it from the same consul registry.&lt;/p&gt;

&lt;p&gt;service.json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;singleton service factory configuration&amp;quot;,
  &amp;quot;singletons&amp;quot;: [
    {
      &amp;quot;com.networknt.registry.URL&amp;quot;: [
        {
          &amp;quot;com.networknt.registry.URLImpl&amp;quot;: {
            &amp;quot;protocol&amp;quot;: &amp;quot;light&amp;quot;,
            &amp;quot;host&amp;quot;: &amp;quot;localhost&amp;quot;,
            &amp;quot;port&amp;quot;: 8080,
            &amp;quot;path&amp;quot;: &amp;quot;consul&amp;quot;,
            &amp;quot;parameters&amp;quot;: {
              &amp;quot;registryRetryPeriod&amp;quot;: &amp;quot;30000&amp;quot;
            }
          }
        }
      ]
    },
    {
      &amp;quot;com.networknt.consul.client.ConsulClient&amp;quot;: [
        {
          &amp;quot;com.networknt.consul.client.ConsulEcwidClient&amp;quot;: [
            {&amp;quot;java.lang.String&amp;quot;: &amp;quot;localhost&amp;quot;},
            {&amp;quot;int&amp;quot;: 8500}
          ]
        }
      ]
    },
    {
      &amp;quot;com.networknt.registry.Registry&amp;quot; : [
        &amp;quot;com.networknt.consul.ConsulRegistry&amp;quot;
      ]
    },
    {
      &amp;quot;com.networknt.balance.LoadBalance&amp;quot; : [
        &amp;quot;com.networknt.balance.RoundRobinLoadBalance&amp;quot;
      ]
    },
    {
      &amp;quot;com.networknt.cluster.Cluster&amp;quot; : [
        &amp;quot;com.networknt.cluster.LightCluster&amp;quot;
      ]
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;server.json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;server config&amp;quot;,
  &amp;quot;ip&amp;quot;: &amp;quot;0.0.0.0&amp;quot;,
  &amp;quot;port&amp;quot;: 7004,
  &amp;quot;serviceId&amp;quot;: &amp;quot;com.networknt.apid-1.0.0&amp;quot;,
  &amp;quot;enableRegistry&amp;quot;: true
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also add extra dependencies to pom.xml to enable cluster.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.networknt&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;registry&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${version.light-java}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.networknt&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;balance&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${version.light-java}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.networknt&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;cluster&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${version.light-java}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.networknt&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;consul&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${version.light-java}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;start-consul&#34;&gt;Start Consul&lt;/h3&gt;

&lt;p&gt;Here we are starting consul server in docker to serve as a centralized registry. To make it
simpler, the ACL in consul is disable by setting acl_default_policy=allow.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -d -p 8400:8400 -p 8500:8500/tcp -p 8600:53/udp -e &#39;CONSUL_LOCAL_CONFIG={&amp;quot;acl_datacenter&amp;quot;:&amp;quot;dc1&amp;quot;,&amp;quot;acl_default_policy&amp;quot;:&amp;quot;allow&amp;quot;,&amp;quot;acl_down_policy&amp;quot;:&amp;quot;extend-cache&amp;quot;,&amp;quot;acl_master_token&amp;quot;:&amp;quot;the_one_ring&amp;quot;,&amp;quot;bootstrap_expect&amp;quot;:1,&amp;quot;datacenter&amp;quot;:&amp;quot;dc1&amp;quot;,&amp;quot;data_dir&amp;quot;:&amp;quot;/usr/local/bin/consul.d/data&amp;quot;,&amp;quot;server&amp;quot;:true}&#39; consul agent -server -ui -bind=127.0.0.1 -client=0.0.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;start-four-servers&#34;&gt;Start four servers&lt;/h3&gt;

&lt;p&gt;Now let&amp;rsquo;s start four terminals to start servers.&lt;/p&gt;

&lt;p&gt;API A&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt/light-java-example/discovery/api_a/consul
mvn clean install exec:exec
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;API B&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt/light-java-example/discovery/api_b/consul
mvn clean install exec:exec

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;API C&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt/light-java-example/discovery/api_c/consul
mvn clean install exec:exec

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;API D&lt;/p&gt;

&lt;p&gt;And start the first instance that listen to 7004 as default&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt/light-java-example/discovery/api_d/consul
mvn clean install exec:exec

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;test-four-servers&#34;&gt;Test four servers&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;curl http://localhost:7001/v1/data
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the result will be&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[&amp;quot;API C: Message 1&amp;quot;,&amp;quot;API C: Message 2&amp;quot;,&amp;quot;API D: Message 1 from port 7004&amp;quot;,&amp;quot;API D: Message 2 from port 7004&amp;quot;,&amp;quot;API B: Message 1&amp;quot;,&amp;quot;API B: Message 2&amp;quot;,&amp;quot;API A: Message 1&amp;quot;,&amp;quot;API A: Message 2&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;start-another-api-d&#34;&gt;Start another API D&lt;/h3&gt;

&lt;p&gt;Now let&amp;rsquo;s start the second instance of API D. Before starting the serer, let&amp;rsquo;s update
server.json with port 7005.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;server config&amp;quot;,
  &amp;quot;ip&amp;quot;: &amp;quot;0.0.0.0&amp;quot;,
  &amp;quot;port&amp;quot;: 7005,
  &amp;quot;serviceId&amp;quot;: &amp;quot;com.networknt.apid-1.0.0&amp;quot;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And start the second instance&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt/light-java-example/discovery/api_d/consul
mvn clean install exec:exec

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;test-servers-3&#34;&gt;Test Servers&lt;/h3&gt;

&lt;p&gt;Wait 10 seconds, your API B cached API D service urls will be updated automatically
with the new instance. Now you have to instance of API D to serve API B.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl http://localhost:7001/v1/data
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the result can be the following alternatively.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[&amp;quot;API C: Message 1&amp;quot;,&amp;quot;API C: Message 2&amp;quot;,&amp;quot;API D: Message 1 from port 7004&amp;quot;,&amp;quot;API D: Message 2 from port 7004&amp;quot;,&amp;quot;API B: Message 1&amp;quot;,&amp;quot;API B: Message 2&amp;quot;,&amp;quot;API A: Message 1&amp;quot;,&amp;quot;API A: Message 2&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[&amp;quot;API C: Message 1&amp;quot;,&amp;quot;API C: Message 2&amp;quot;,&amp;quot;API D: Message 1 from port 7005&amp;quot;,&amp;quot;API D: Message 2 from port 7005&amp;quot;,&amp;quot;API B: Message 1&amp;quot;,&amp;quot;API B: Message 2&amp;quot;,&amp;quot;API A: Message 1&amp;quot;,&amp;quot;API A: Message 2&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;shutdown-one-api-d&#34;&gt;Shutdown one API D&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s shutdown one instance of API D and wait for 10 seconds. Now when you call the same
curl command, API D message will be always served by the same port which is the one still
running.&lt;/p&gt;

&lt;h1 id=&#34;docker&#34;&gt;Docker&lt;/h1&gt;

&lt;p&gt;In this step, we are going to dockerize all the APIs and then use registrator for service
registry.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s copy from consul to docker for each API.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt/light-java-example/discovery/api_a
cp -r consul consuldocker
cd ~/networknt/light-java-example/discovery/api_b
cp -r consul consuldocker
cd ~/networknt/light-java-example/discovery/api_c
cp -r consul consuldocker
cd ~/networknt/light-java-example/discovery/api_d
cp -r consul consulcdocker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before starting the services, let&amp;rsquo;s start consul and registrator.&lt;/p&gt;

&lt;p&gt;Consul&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -d -p 8400:8400 -p 8500:8500/tcp -p 8600:53/udp -e &#39;CONSUL_LOCAL_CONFIG={&amp;quot;acl_datacenter&amp;quot;:&amp;quot;dc1&amp;quot;,&amp;quot;acl_default_policy&amp;quot;:&amp;quot;allow&amp;quot;,&amp;quot;acl_down_policy&amp;quot;:&amp;quot;extend-cache&amp;quot;,&amp;quot;acl_master_token&amp;quot;:&amp;quot;the_one_ring&amp;quot;,&amp;quot;bootstrap_expect&amp;quot;:1,&amp;quot;datacenter&amp;quot;:&amp;quot;dc1&amp;quot;,&amp;quot;data_dir&amp;quot;:&amp;quot;/usr/local/bin/consul.d/data&amp;quot;,&amp;quot;server&amp;quot;:true}&#39; consul agent -server -ui -bind=127.0.0.1 -client=0.0.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Regsitrator&lt;/p&gt;

&lt;p&gt;We use -ip 127.0.0.1 in the command line to make sure that ServiceAddress in
consul is populated with ip and port. The latest version of regsitrator won&amp;rsquo;t
set default ip anymore.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -d --name=registrator --net=host --volume=/var/run/docker.sock:/tmp/docker.sock gliderlabs/registrator:latest -ip 127.0.0.1 consul://localhost:8500
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;api-a-3&#34;&gt;API A&lt;/h3&gt;

&lt;p&gt;Since we are using registrator to register the service, we need to disable the application service registration.&lt;/p&gt;

&lt;p&gt;server.json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;server config&amp;quot;,
  &amp;quot;ip&amp;quot;: &amp;quot;0.0.0.0&amp;quot;,
  &amp;quot;port&amp;quot;: 7001,
  &amp;quot;serviceId&amp;quot;: &amp;quot;com.networknt.apia-1.0.0&amp;quot;,
  &amp;quot;enableRegistry&amp;quot;: false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt/light-java-example/discovery/api_a/consuldocker
mvn clean install
docker build -t networknt/com.networknt.apia-1.0.0 .
docker run -it -p 7001:7001 --net=host --name=com.networknt.apia-1.0.0 networknt/com.networknt.apia-1.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;api-b-4&#34;&gt;API B&lt;/h3&gt;

&lt;p&gt;server.json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;server config&amp;quot;,
  &amp;quot;ip&amp;quot;: &amp;quot;0.0.0.0&amp;quot;,
  &amp;quot;port&amp;quot;: 7002,
  &amp;quot;serviceId&amp;quot;: &amp;quot;com.networknt.apib-1.0.0&amp;quot;,
  &amp;quot;enableRegistry&amp;quot;: false
}

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt/light-java-example/discovery/api_b/consuldocker
mvn clean install
docker build -t networknt/com.networknt.apib-1.0.0 .
docker run -it -p 7002:7002 --net=host --name=com.networknt.apib-1.0.0 networknt/com.networknt.apib-1.0.0

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;api-c-3&#34;&gt;API C&lt;/h3&gt;

&lt;p&gt;server.json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;server config&amp;quot;,
  &amp;quot;ip&amp;quot;: &amp;quot;0.0.0.0&amp;quot;,
  &amp;quot;port&amp;quot;: 7003,
  &amp;quot;serviceId&amp;quot;: &amp;quot;com.networknt.apic-1.0.0&amp;quot;,
  &amp;quot;enableRegistry&amp;quot;: false
}

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt/light-java-example/discovery/api_c/consuldocker
mvn clean install
docker build -t networknt/com.networknt.apic-1.0.0 .
docker run -it -p 7003:7003 --net=host --name=com.networknt.apic-1.0.0 networknt/com.networknt.apic-1.0.0

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;api-d-4&#34;&gt;API D&lt;/h3&gt;

&lt;p&gt;server.json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;server config&amp;quot;,
  &amp;quot;ip&amp;quot;: &amp;quot;0.0.0.0&amp;quot;,
  &amp;quot;port&amp;quot;: 7004,
  &amp;quot;serviceId&amp;quot;: &amp;quot;com.networknt.apid-1.0.0&amp;quot;,
  &amp;quot;enableRegistry&amp;quot;: false
}

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;cd ~/networknt/light-java-example/discovery/api_d/consuldocker
mvn clean install
docker build -t networknt/com.networknt.apid-1.0.0 .
docker run -it -p 7004:7004 --net=host --name=com.networknt.apid-1.0.0 networknt/com.networknt.apid-1.0.0

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;test-servers-4&#34;&gt;Test Servers&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;curl http://localhost:7001/v1/data
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here is the result.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[&amp;quot;API C: Message 1&amp;quot;,&amp;quot;API C: Message 2&amp;quot;,&amp;quot;API D: Message 1 from port 7004&amp;quot;,&amp;quot;API D: Message 2 from port 7004&amp;quot;,&amp;quot;API B: Message 1&amp;quot;,&amp;quot;API B: Message 2&amp;quot;,&amp;quot;API A: Message 1&amp;quot;,&amp;quot;API A: Message 2&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;kubernetes&#34;&gt;Kubernetes&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>Examples</title>
      <link>https://networknt.github.io/light-java/example/</link>
      <pubDate>Wed, 25 Jan 2017 21:12:31 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-java/example/</guid>
      <description>&lt;p&gt;The following examples can be found in &lt;a href=&#34;https://github.com/networknt/light-java-example&#34;&gt;light-java-example&lt;/a&gt; repository.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://networknt.github.io/light-java/example/database/&#34;&gt;Database&lt;/a&gt; - How to access database&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://networknt.github.io/light-java/example/microservices/&#34;&gt;Microservices&lt;/a&gt; - How to build microservices&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://networknt.github.io/light-java/example/performance/&#34;&gt;Performance&lt;/a&gt; - Perforamnce comprison with other frameworks&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://networknt.github.io/light-java/example/petstore/&#34;&gt;Petstore&lt;/a&gt; - Generated Petstore example service&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://networknt.github.io/light-java/example/routing/&#34;&gt;Routing&lt;/a&gt; - Demo how routing works&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://networknt.github.io/light-java/example/swagger/&#34;&gt;Swagger&lt;/a&gt; - All swagger/OpenAPI specifications&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://networknt.github.io/light-java/example/webserver/&#34;&gt;Web Server&lt;/a&gt; - How to integrate API server and Web server together&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Tools</title>
      <link>https://networknt.github.io/light-java/tools/</link>
      <pubDate>Wed, 25 Jan 2017 21:05:31 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-java/tools/</guid>
      <description>&lt;p&gt;There are so many tools that help us to build microservices and here is a small list.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://networknt.github.io/light-java/tools/hugo-docs/&#34;&gt;Hugo&lt;/a&gt; is used to create the document site for all our repositories.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://networknt.github.io/light-java/tools/memory_monitor/&#34;&gt;Memory Monitoring&lt;/a&gt; on MacOS while doing performance test&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://networknt.github.io/light-java/tools/swagger-cli/&#34;&gt;Swagger CLI&lt;/a&gt; to validate, merge and convert swagger specification files.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://networknt.github.io/light-java/tools/swagger-editor/&#34;&gt;Swagger Editor&lt;/a&gt; is used to create and update swagger specifications.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://networknt.github.io/light-java/tools/wrk-perf/&#34;&gt;WRK&lt;/a&gt; is used as client for performance test.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Tutorials</title>
      <link>https://networknt.github.io/light-java/tutorials/</link>
      <pubDate>Wed, 25 Jan 2017 20:59:08 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-java/tutorials/</guid>
      <description>&lt;p&gt;The following tutorials will help users to get started and more will be added later.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://networknt.github.io/light-java/tutorials/microservices/&#34;&gt;How to build, test and deploy microserivces&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://networknt.github.io/light-java/tutorials/database/&#34;&gt;How to access database in microservices&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://networknt.github.io/light-java/tutorials/unit-test/&#34;&gt;How to do unit test&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://networknt.github.io/light-java/tutorials/end-to-end-test/&#34;&gt;How to do end-to-end test&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://networknt.github.io/light-java/tutorials/integration-test/&#34;&gt;How to do integration test&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://networknt.github.io/light-java/tutorials/debug/&#34;&gt;How to debug the service&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://networknt.github.io/light-java/tutorials/discovery/&#34;&gt;How to register and discover services&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>