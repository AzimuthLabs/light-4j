<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Others on Light 4J - A fast, lightweight Java microservices framework</title>
    <link>https://networknt.github.io/light-4j/other/</link>
    <description>Recent content in Others on Light 4J - A fast, lightweight Java microservices framework</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <lastBuildDate>Mon, 06 Feb 2017 21:34:10 -0500</lastBuildDate>
    
	<atom:link href="https://networknt.github.io/light-4j/other/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Zookeeper</title>
      <link>https://networknt.github.io/light-4j/other/zookeeper/</link>
      <pubDate>Mon, 06 Feb 2017 21:34:10 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-4j/other/zookeeper/</guid>
      <description>A Zookeeper registry implementation that use Zookeeper as registry and discovery server. It implements both registry and discovery in the same module for Zookeeper communication. If the API/server is delivered as docker image, another product called registrator will be used to register it with Zookeeper server. Otherwise, the server module will be responsible to register itself during startup.</description>
    </item>
    
    <item>
      <title>Switcher</title>
      <link>https://networknt.github.io/light-4j/other/switcher/</link>
      <pubDate>Mon, 06 Feb 2017 21:34:02 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-4j/other/switcher/</guid>
      <description>This module implement a switch and its notifier to support on/off state within the system.</description>
    </item>
    
    <item>
      <title>Service</title>
      <link>https://networknt.github.io/light-4j/other/service/</link>
      <pubDate>Mon, 06 Feb 2017 21:33:54 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-4j/other/service/</guid>
      <description>A light-weight and fast dependency injection framework without any third party dependencies.
Light Java framework encourage developers to build microservices with Functional Programming Style. One of the key principle is immutability so that the code can be optimized to take advantage of multi-core CPUs.
Unlike other IoC container, our service module only deals with singleton during server startup with constructor injection. It give developer an opportunity to choose from several implementations of an interface in service.</description>
    </item>
    
    <item>
      <title>Registry</title>
      <link>https://networknt.github.io/light-4j/other/registry/</link>
      <pubDate>Mon, 06 Feb 2017 21:33:47 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-4j/other/registry/</guid>
      <description>This module contains all the interfaces that are needed in registry and discovery. Also it implemented Direct registry which you can hard-code services into the service.json in order to simulate consul or zookeeper during development.</description>
    </item>
    
    <item>
      <title>Health Check</title>
      <link>https://networknt.github.io/light-4j/other/health/</link>
      <pubDate>Mon, 06 Feb 2017 21:33:38 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-4j/other/health/</guid>
      <description>This is an handler that needs to be injected into the request/response chain in order to return something that indicate the server is still alive. Currently it returns &amp;ldquo;OK&amp;rdquo; only.</description>
    </item>
    
    <item>
      <title>Handler</title>
      <link>https://networknt.github.io/light-4j/other/handler/</link>
      <pubDate>Mon, 06 Feb 2017 21:33:25 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-4j/other/handler/</guid>
      <description>This module defines an interface that all middleware handlers must be implemented in order to be loaded during server startup.
public interface MiddlewareHandler extends HttpHandler { HttpHandler getNext(); MiddlewareHandler setNext(final HttpHandler next); boolean isEnabled(); void register(); }  </description>
    </item>
    
    <item>
      <title>Consul</title>
      <link>https://networknt.github.io/light-4j/other/consul/</link>
      <pubDate>Mon, 06 Feb 2017 21:33:14 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-4j/other/consul/</guid>
      <description>A consul registry implementation that use Consul as registry and discovery server. It implements both registry and discovery in the same module for consul communication. If the API/server is delivered as docker image, another product called registrator will be used to register it with Consul agent. Otherwise, the server module will be responsible to register itself during startup.</description>
    </item>
    
    <item>
      <title>Cluster</title>
      <link>https://networknt.github.io/light-4j/other/cluster/</link>
      <pubDate>Mon, 06 Feb 2017 21:33:04 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-4j/other/cluster/</guid>
      <description>This module caches all the service instances that are needed by the current service and calling underline registry(Direct, Consul and ZooKeeper) to discover the service if necessary (first time a service is called and registry notifies something has been changed regarding to subscribe the services on Consul or ZooKeeper).</description>
    </item>
    
    <item>
      <title>Load Balance</title>
      <link>https://networknt.github.io/light-4j/other/balance/</link>
      <pubDate>Mon, 06 Feb 2017 21:32:51 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-4j/other/balance/</guid>
      <description>Client side discovery needs client side load balancer in order to pick up one and only one available service instance to a particular request.
Currently, only Round-Robin is supported and other implementations will follow.</description>
    </item>
    
    <item>
      <title>Server Info</title>
      <link>https://networknt.github.io/light-4j/other/info/</link>
      <pubDate>Sun, 23 Oct 2016 13:23:59 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-4j/other/info/</guid>
      <description>Introduction Almost every module in light-4j has a configuration file that can be externalized with default can be in the module itself or the API implementation config folder. In order to give an overview of the server runtime, system properties, specification as well as configurations for each enabled modules, there is a special handler that is injected in your swagger specification. Once this handler endpoint is called, it will output all the server info in a JSON format.</description>
    </item>
    
    <item>
      <title>Other Component</title>
      <link>https://networknt.github.io/light-4j/other/</link>
      <pubDate>Sun, 23 Oct 2016 13:22:33 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-4j/other/</guid>
      <description>light-4j is a Java API framework based on undertow http core that supports swagger/graphql/hybrid code generation and runtime request validation and security verification.
It contains the following components:
 server is a framework on top of Undertow http core that support plugins to perform different middleware handlers. It is light-weight, fast and supports HTTP/2.
 config is a module that supports externalized yml/yaml/json configuration for standalone applications and docker containers managed by Kubernetes.</description>
    </item>
    
    <item>
      <title>Server</title>
      <link>https://networknt.github.io/light-4j/other/server/</link>
      <pubDate>Sun, 23 Oct 2016 13:21:19 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-4j/other/server/</guid>
      <description>This module is responsible for managing life cycle of the embedded Undertow core http server. It starts the server and initializes all middleware plugins along with route handler providers. It stops the server and allow the resources to be released even someone click CTRL+C.
Startup Hooks During server startup, a list of startup hooks will be called to initialize the context and environment for the server instance. For example, creating database connection pool etc.</description>
    </item>
    
    <item>
      <title>Status</title>
      <link>https://networknt.github.io/light-4j/other/status/</link>
      <pubDate>Sun, 23 Oct 2016 13:20:51 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-4j/other/status/</guid>
      <description>In the scenario that error happens on the server, a Status object is designed to encapsulate standard http response 4xx and 5xx as well as application specific error code ERRXXXXX (prefixed with ERR with another 5 digits) and error message. Additionally, an description of the error will be available for more info about the error.
Data Elements Here are the four fields in the Status object.
 int statusCode; String code; String message; String description;  Construct the object from status.</description>
    </item>
    
    <item>
      <title>Utility</title>
      <link>https://networknt.github.io/light-4j/other/utility/</link>
      <pubDate>Sun, 23 Oct 2016 13:20:22 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-4j/other/utility/</guid>
      <description>This module contains some useful classes that shared by multiple modules within the framework.
Constants Contains all the constants shared by all modules.
ModuleRegistry When the plugin modules are loaded, it will register itself to this module along with configuration. When /server/info is called, the endpoint will return all plugged in modules and their configurations.
Util Some useful utility method like uuid generator etc.</description>
    </item>
    
    <item>
      <title>Mask</title>
      <link>https://networknt.github.io/light-4j/other/mask/</link>
      <pubDate>Sun, 23 Oct 2016 13:19:36 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-4j/other/mask/</guid>
      <description>In the entire life cycle of the exchange, there might a lot of logging statements written to log files or other persistence storage. These logs will be used to assist production issue identifying and resolving and a wide group of people might have access to these logs. In order to reduce the risk of leak customer info, sensitive info needs to masked before logging. For example, credit card number, sin number etc.</description>
    </item>
    
    <item>
      <title>Config</title>
      <link>https://networknt.github.io/light-4j/other/config/</link>
      <pubDate>Sun, 23 Oct 2016 13:18:22 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-4j/other/config/</guid>
      <description>A configuration module that supports externalized config in official standalone deployment or docker container. It is encouraged that every module should have its own configuration file and these files can be served by light-config-server which aggregates/merges config files from different level of organizations in github or other git servers.
Introduction Externalized configuration from the application package is very important. It allows us to deploy the same package to DEV/SIT/UAT/PROD environment with different configuration packages without reopening the delivery package.</description>
    </item>
    
    <item>
      <title>Client</title>
      <link>https://networknt.github.io/light-4j/other/client/</link>
      <pubDate>Sun, 23 Oct 2016 12:26:20 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-4j/other/client/</guid>
      <description>#
Client is used to call APIs from the following sources:
 Web Server Standalone Application/Mobile Application API/Service  It provides method to get authorization token and automatically gets client credentials token for scopes in API to API calls. It also helps to pass correlationId and traceabilityId to the next service.
Type of client Sync Client This is a wrapper of Apache HttpClient with built-in connection pools and TLS support.</description>
    </item>
    
    <item>
      <title>Security</title>
      <link>https://networknt.github.io/light-4j/other/security/</link>
      <pubDate>Wed, 12 Oct 2016 19:07:43 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-4j/other/security/</guid>
      <description>The current framework supports OAuth2 with JWT token but can be extended to other authentication and authorization approaches.
light-oauth2 server By default, the framework contains two pairs of public key certificates issued by our own oauth2 server which can be installed from docker. For more info, please refer to https://github.com/networknt/light-oauth2
Kid Since services are deployed in the cloud without static IP, the traditional push certificates to each service is not working anymore.</description>
    </item>
    
  </channel>
</rss>