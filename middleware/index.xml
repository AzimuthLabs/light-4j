<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Middlewares on Light 4J - A fast, lightweight Java microservices framework</title>
    <link>https://networknt.github.io/light-4j/middleware/</link>
    <description>Recent content in Middlewares on Light 4J - A fast, lightweight Java microservices framework</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <lastBuildDate>Fri, 17 Feb 2017 14:10:28 -0500</lastBuildDate>
    
	<atom:link href="https://networknt.github.io/light-4j/middleware/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Rate Limiting</title>
      <link>https://networknt.github.io/light-4j/middleware/limit/</link>
      <pubDate>Fri, 17 Feb 2017 14:10:28 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-4j/middleware/limit/</guid>
      <description>Although our framework can handle potential millions requests per second, for some public facing APIs, it might be a good idea to enable this handler to limit the concurrent request to certain level in order to avoid DDOS attacks.
As this handler will impact the overall performance a little bit, it is not configured as default in the swagger-codegen. You must manually enable it in your API with the following steps.</description>
    </item>
    
    <item>
      <title>Request and Response Dump</title>
      <link>https://networknt.github.io/light-4j/middleware/dump/</link>
      <pubDate>Mon, 06 Feb 2017 21:40:01 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-4j/middleware/dump/</guid>
      <description>This is a handler that dumps the entire request and response into a log file. It should only be used in development mode for debugging purpose as it is very slow.</description>
    </item>
    
    <item>
      <title>Correlation Id</title>
      <link>https://networknt.github.io/light-4j/middleware/correlation/</link>
      <pubDate>Mon, 06 Feb 2017 09:59:28 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-4j/middleware/correlation/</guid>
      <description>This is a handler that checks if X-Correlation-Id exists in request header. If it doesn&amp;rsquo;t exist it will generate a UUID and put it into the request header. During API to API calls, this header will be passed to the next API by Client module.
Generating The correlationId is very useful in microservices architecture as there are multiple services involved in a same client request. When logs are aggregated into a centralized tool, it is very important there is an unique identifier to associate logs from multiple services for the same request.</description>
    </item>
    
    <item>
      <title>Traceability</title>
      <link>https://networknt.github.io/light-4j/middleware/traceability/</link>
      <pubDate>Sun, 06 Nov 2016 10:24:22 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-4j/middleware/traceability/</guid>
      <description>#
For microservices architecture, a request sent from client may pass through several services to the backend respository/Book of Record and then response is returned in the reverse path. If there is an error in the call tree, we need to identify where is the problem during runtime. Also, for some mission critical applications, the entire call tree must be in the audit log to meet regulatory compliance requirement. For example, banking applications.</description>
    </item>
    
    <item>
      <title>sanitizer</title>
      <link>https://networknt.github.io/light-4j/middleware/sanitizer/</link>
      <pubDate>Sun, 23 Oct 2016 10:35:04 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-4j/middleware/sanitizer/</guid>
      <description>Introduction This is a middleware that addresses cross site scripting concerns. It encodes the header and body according to the configuration. As body encoding depends on Body middleware, it has to be plugged into the request/response chain after Body.
Configuration Here is the default configuration sanitizer.yml
description: Sanitize request for cross site scripting during runtime enabled: true sanitizeBody: true sanitizeHeader: true  If enabled is false, this middleware won&amp;rsquo;t be loaded during server startup.</description>
    </item>
    
    <item>
      <title>Metrics</title>
      <link>https://networknt.github.io/light-4j/middleware/metrics/</link>
      <pubDate>Sat, 15 Oct 2016 20:42:32 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-4j/middleware/metrics/</guid>
      <description>Introduction Metrics handler collects the API runtime information and report to Influxdb periodically (5 minutes to 15 minutes based on the volume of the API). A Grafana instance is hooked to Influxdb to output the metrics on dashboard from two different perspectives:
 Client oriented - client centric info to show how many APIs to call and each API runtime info.
 API oriented - API centric info to show how many clients is calling this API.</description>
    </item>
    
    <item>
      <title>Swagger Validator</title>
      <link>https://networknt.github.io/light-4j/middleware/swagger-validator/</link>
      <pubDate>Wed, 12 Oct 2016 19:13:19 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-4j/middleware/swagger-validator/</guid>
      <description>This handler is part of the light-rest-4j which is built on top of light-4j but focused on RESTful API only.
It encourages design driven implementation so swagger specification should be done before the implementation starts. With the light-codegen light-4j generator, the server stub can be generated and start running within minutes. However, we cannot rely on generator for validation as specification will be changed along the life cycle of the API.</description>
    </item>
    
    <item>
      <title>Swagger Meta</title>
      <link>https://networknt.github.io/light-4j/middleware/swagger-meta/</link>
      <pubDate>Wed, 12 Oct 2016 19:10:34 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-4j/middleware/swagger-meta/</guid>
      <description>Introduction This handler is part of the light-rest-4j which is built on top of light-4j but focused on RESTful API only.
It is designed based on swagger specification so it is our best interest to utilize the swagger.json to its full potential. Currently there are two components are using the swagger specification during runtime.
 swagger-security - Verify scope in the JWT token against scope defined in swagger specification if scope verification is true.</description>
    </item>
    
    <item>
      <title>Swagger Security</title>
      <link>https://networknt.github.io/light-4j/middleware/swagger-security/</link>
      <pubDate>Wed, 12 Oct 2016 19:07:43 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-4j/middleware/swagger-security/</guid>
      <description>This handler is part of the light-rest-4j which is built on top of light-4j but focused on RESTful API only.
It supports OAuth2 with JWT token distributed verification and can be extended to other authentication and authorization approaches.
JwtVerifyHandler This is the handler that is injected during server start up if security.json enableVerifyJwt is true. It does further scope verification if enableVerifyScope is true against swagger specification.
Distributed JWT verification Unlike simple web token, the resource server has to contact Authorization server to validate the bearer token.</description>
    </item>
    
    <item>
      <title>Exception Handler</title>
      <link>https://networknt.github.io/light-4j/middleware/exception/</link>
      <pubDate>Wed, 12 Oct 2016 19:03:24 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-4j/middleware/exception/</guid>
      <description>If any handler throws an exception within the handler chain, that exception will bubble up to the undertow server and eventually a 500 response will be sent to the consumer. In order to change the behaviour, an exception handler is provided to handle ApiException and other uncaught exceptions.
Please note that developers should capture any checked exceptions including ApiException in their handlers and return a specific error code to help client to debug what is going on on the server.</description>
    </item>
    
    <item>
      <title>Body Parser</title>
      <link>https://networknt.github.io/light-4j/middleware/body/</link>
      <pubDate>Wed, 12 Oct 2016 18:57:17 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-4j/middleware/body/</guid>
      <description>Introduction Body is an HttpHandler to parse the body according to the content type in the request header and attach the parsed result into the exchange so that subsequent handlers will use it directly.
Only POST, PUT and PATCH methods can have body and currently only JSON is supported as only light-rest-4j is using this middleware handler at the moment. In the future, other content type will be supported.</description>
    </item>
    
    <item>
      <title>Audit</title>
      <link>https://networknt.github.io/light-4j/middleware/audit/</link>
      <pubDate>Wed, 12 Oct 2016 18:48:58 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-4j/middleware/audit/</guid>
      <description>There are two built-in audit handlers that write logs into audit.log that setup in the logback appender.
SimpleAuditHandler Only logs several fields from request header and the fields are configurable. Optional, it can log response status and response time.
FullAuditHandler Dump every thing from request and response. This is mainly a development tool and may be used on production for some of the APIs without performance concerns.
Customized Handler For some users that need special audit logic or other channel to redirect the audit to, they can create their own audit handler and replace the default audit handler in /src/main/resources/META-INF/services/com.</description>
    </item>
    
    <item>
      <title>Middleware Handlers</title>
      <link>https://networknt.github.io/light-4j/middleware/</link>
      <pubDate>Fri, 07 Oct 2016 22:02:13 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-4j/middleware/</guid>
      <description>Introduction Light-4J is a Java API framework based on undertow http core which supports request and response manipulations in HttpServerExchange. Unlike servlet filter, it is very easy to add middleware handlers in the request and response chain to address all the cross-cutting concerns.
There are two types of middleware handlers: technical and contextual. All the middleware handlers provided by light-4j are technical as we don&amp;rsquo;t care about each individual service but apply the handlers blindly.</description>
    </item>
    
  </channel>
</rss>