<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Designs on Light 4J - A fast, lightweight Java microservices framework</title>
    <link>https://networknt.github.io/light-4j/design/</link>
    <description>Recent content in Designs on Light 4J - A fast, lightweight Java microservices framework</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <lastBuildDate>Fri, 09 Jun 2017 16:05:06 -0400</lastBuildDate>
    
	<atom:link href="https://networknt.github.io/light-4j/design/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Handling Partial Failure</title>
      <link>https://networknt.github.io/light-4j/design/partial-failure/</link>
      <pubDate>Fri, 09 Jun 2017 16:05:06 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-4j/design/partial-failure/</guid>
      <description>Introduction In a distributed system there is the ever-present risk of partial failure. Since clients and services are separate processes, a service might not be able to respond in a timely way to a clientâ€™s request. A service might be down because of a failure or for maintenance. Or the service might be overloaded and responding extremely slowly to requests. Also, as services are distributed across networks or even data centers, it increases the risk of partial failures especially you have too many small services interact each other to form a big application.</description>
    </item>
    
    <item>
      <title>monojee</title>
      <link>https://networknt.github.io/light-4j/design/monojee/</link>
      <pubDate>Thu, 09 Feb 2017 12:45:22 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-4j/design/monojee/</guid>
      <description></description>
    </item>
    
    <item>
      <title>newprod</title>
      <link>https://networknt.github.io/light-4j/design/newprod/</link>
      <pubDate>Thu, 09 Feb 2017 12:45:08 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-4j/design/newprod/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Convert WebServices to Microservices</title>
      <link>https://networknt.github.io/light-4j/design/convtws/</link>
      <pubDate>Thu, 09 Feb 2017 10:59:44 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-4j/design/convtws/</guid>
      <description>While you are talking about microservices, chances are you existing application is built as web services. These days a lot of people and vendors are calling these web services as microservices and it is not right.
The following diagram shows what is the difference between web service and microservices.
As you can see the traditional web servers are flattened behind an API gateway and they are normally build on top of Java EE platform with JAXRS 1.</description>
    </item>
    
    <item>
      <title>Design</title>
      <link>https://networknt.github.io/light-4j/design/</link>
      <pubDate>Thu, 09 Feb 2017 10:57:47 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-4j/design/</guid>
      <description>light-4j is aiming microservices and design of microservices is more art other than technique. When you break a business application to smaller pieces, there is a threshold. If it too fine-grained, then the performance will suffer, but if it is too coarse-grained, then the benefit of microservices will be diminishing.
The big portion of design work for microservices is to functionally divide an application to multiple services and define the communication contract between these services with OpenAPI specifications.</description>
    </item>
    
  </channel>
</rss>