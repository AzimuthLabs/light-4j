<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorials on Light 4J - A fast, lightweight Java microservices framework</title>
    <link>https://networknt.github.io/light-4j/tutorials/</link>
    <description>Recent content in Tutorials on Light 4J - A fast, lightweight Java microservices framework</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <lastBuildDate>Wed, 15 Feb 2017 09:26:58 -0500</lastBuildDate>
    
	<atom:link href="https://networknt.github.io/light-4j/tutorials/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Cross-Origin Resource Sharing</title>
      <link>https://networknt.github.io/light-4j/tutorials/cors/</link>
      <pubDate>Wed, 15 Feb 2017 09:26:58 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-4j/tutorials/cors/</guid>
      <description>For some of the APIs/services, the endpoints will be accessed from a Single Page Application(React/Vue/Angular) served from another domain. In this case, the API server needs to handle the pre-flight OPTIONS request to enable CORS.
As CORS only used in above scenario, the handler is not wired in by default in swagger-codegen.
If you want to limit only several domains for CORS, you also need to create cors.yml in config folder.</description>
    </item>
    
    <item>
      <title>Registry and Discovery</title>
      <link>https://networknt.github.io/light-4j/tutorials/discovery/</link>
      <pubDate>Fri, 27 Jan 2017 20:57:14 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-4j/tutorials/discovery/</guid>
      <description>Introduction This is a tutorial to show you how to use service registry and discovery for microservices. We are going to use api_a, api_b, api_c and api_d as our examples. To simply the tutorial, I am going to disable the security all the time.
The specifications for above APIs can be found at https://github.com/networknt/swagger
Preparation In order to follow the steps below, please make sure you have the same working environment.</description>
    </item>
    
    <item>
      <title>Tutorials</title>
      <link>https://networknt.github.io/light-4j/tutorials/</link>
      <pubDate>Wed, 25 Jan 2017 20:59:08 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-4j/tutorials/</guid>
      <description>The following tutorials will help users to get started and more will be added later.
 How to build, test and deploy microserivces
 How to access database in microservices
 How to do unit test
 How to do end-to-end test
 How to do integration test
 How to debug the service
 How to register and discover services
  </description>
    </item>
    
    <item>
      <title>Database Access Tutorial</title>
      <link>https://networknt.github.io/light-4j/tutorials/database/</link>
      <pubDate>Mon, 23 Jan 2017 09:07:32 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-4j/tutorials/database/</guid>
      <description>Introduction Most microservices will have to access database in order to fulfill consumer requests. In this tutorial, we will walk through the following steps with Oracle/Postgres/Mysql:
 How to setup database connection pool How to connect to the database instance How to do query database tables How to update database tables  Preparation In order to follow the steps below, please make sure you have the same working environment.</description>
    </item>
    
    <item>
      <title>End to End Test</title>
      <link>https://networknt.github.io/light-4j/tutorials/end-to-end-test/</link>
      <pubDate>Wed, 12 Oct 2016 17:21:40 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-4j/tutorials/end-to-end-test/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Integration Test</title>
      <link>https://networknt.github.io/light-4j/tutorials/integration-test/</link>
      <pubDate>Wed, 12 Oct 2016 17:06:30 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-4j/tutorials/integration-test/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Unit Test</title>
      <link>https://networknt.github.io/light-4j/tutorials/unit-test/</link>
      <pubDate>Wed, 12 Oct 2016 17:05:47 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-4j/tutorials/unit-test/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Debug</title>
      <link>https://networknt.github.io/light-4j/tutorials/debug/</link>
      <pubDate>Wed, 12 Oct 2016 17:03:28 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-4j/tutorials/debug/</guid>
      <description>As there is no container in Undertow Server and everything is built on top of POJO, it is very easy to debug your API application within your IDE.
I am using Intellij Idea but Eclipse should be very similar as the generated project is standard Maven project. To debug your code, you need to start the server.
Here is the steps to create a standalone application in Idea.
 Click Run and select Edit Configurations&amp;hellip; Click + on the top left corner to add a new Configuration.</description>
    </item>
    
    <item>
      <title>Chain Pattern Microservices</title>
      <link>https://networknt.github.io/light-4j/tutorials/ms_chain/</link>
      <pubDate>Sun, 09 Oct 2016 08:01:56 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-4j/tutorials/ms_chain/</guid>
      <description>Introduction These days light weight container like Docker is getting traction, more and more API services are developed for docker container and deployed to the cloud. In this environment, traditional heavy weight containers like Java EE and Spring are losing ground as it doesn&amp;rsquo;t make sense to have a heavy weight container wrapped with a light weight docker container. Docker and container orchestration tools like Kubernetes and Docker Swarm are replacing all the functionalities Java EE provides without hogging resources.</description>
    </item>
    
    <item>
      <title>Microservices</title>
      <link>https://networknt.github.io/light-4j/tutorials/microservices/</link>
      <pubDate>Sun, 09 Oct 2016 08:01:56 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-4j/tutorials/microservices/</guid>
      <description>Introduction These days light weight container like Docker is getting traction, more and more API services are developed for docker container and deployed to the cloud. In this environment, traditional heavy weight containers like Java EE and Spring are losing ground as it doesn&amp;rsquo;t make sense to have a heavy weight container wrapped with a light weight docker container. Docker and container orchestration tools like Kubernetes and Docker Swarm are replacing all the functionalities Java EE provides without hogging resources.</description>
    </item>
    
  </channel>
</rss>