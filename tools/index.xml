<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tools on Light 4J - A fast, lightweight Java microservices framework</title>
    <link>https://networknt.github.io/light-4j/tools/</link>
    <description>Recent content in Tools on Light 4J - A fast, lightweight Java microservices framework</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <lastBuildDate>Sat, 18 Mar 2017 20:37:48 -0400</lastBuildDate>
    
	<atom:link href="https://networknt.github.io/light-4j/tools/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Minikube Installation</title>
      <link>https://networknt.github.io/light-4j/tools/minikube/</link>
      <pubDate>Sat, 18 Mar 2017 20:37:48 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-4j/tools/minikube/</guid>
      <description>As light-4j API/service is aiming to deployed with Docker containers and Kubernetes is the most popular container orchestration tool. It is very hard to setup multiple nodes cluster on laptop development environment but there is a minikube can be used on laptop to create one node cluster on your laptop.
Install on Mac. Install xhype Before installing Minikube, you must install xhype driver first. The detailed instructions are in the above link and here is the commands to be executed.</description>
    </item>
    
    <item>
      <title>keytool</title>
      <link>https://networknt.github.io/light-4j/tools/keytool/</link>
      <pubDate>Fri, 03 Feb 2017 14:12:47 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-4j/tools/keytool/</guid>
      <description>This is a Java command line tool to generate and manipulate keys.
To create a server.keystore for TLS.
keytool -genkey -alias mycert -keyalg RSA -sigalg MD5withRSA -keystore server.keystore -storepass secret -keypass secret -validity 9999  And then copy this file to light-4j/src/main/resources/config/tls folder. At the same time, update server.yml for keystoreName, keystorePass, keyPass.
# Server configuration --- # This is the default binding address if the service is dockerized. ip: 0.</description>
    </item>
    
    <item>
      <title>Tools</title>
      <link>https://networknt.github.io/light-4j/tools/</link>
      <pubDate>Wed, 25 Jan 2017 21:05:31 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-4j/tools/</guid>
      <description>There are so many tools that help us to build microservices and here is a small list.
 Hugo is used to create the document site for all our repositories.
 Memory Monitoring on MacOS while doing performance test
 Swagger CLI to validate, merge and convert swagger specification files.
 Swagger Editor is used to create and update swagger specifications.
 WRK is used as client for performance test.</description>
    </item>
    
    <item>
      <title>Memory Monitoring on Mac</title>
      <link>https://networknt.github.io/light-4j/tools/memory_monitor/</link>
      <pubDate>Thu, 27 Oct 2016 08:44:57 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-4j/tools/memory_monitor/</guid>
      <description>Introduction While you are testing performance of your microservices, you might be interested in monitoring your server memory usage. The memory footprint is very important as we are talking about microservices - we might need to deploy hundreds or even thousands of microservices to compose a big application. In today&amp;rsquo;s cloud environment, you can create vms or containers based on cpu, memory and hard drive usage and usually memory is the big constraint and more costly than cpu and hard drive.</description>
    </item>
    
    <item>
      <title>Swagger cli to bundle and validate specification files</title>
      <link>https://networknt.github.io/light-4j/tools/swagger-cli/</link>
      <pubDate>Sat, 08 Oct 2016 22:14:47 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-4j/tools/swagger-cli/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Swagger Editor for OpenAPI Specification</title>
      <link>https://networknt.github.io/light-4j/tools/swagger-editor/</link>
      <pubDate>Sat, 08 Oct 2016 22:14:33 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-4j/tools/swagger-editor/</guid>
      <description>Introduction Swagger is a simple yet powerful representation of your RESTful API. With the largest ecosystem of API tooling on the planet, thousands of developers are supporting Swagger in almost every modern programming language and deployment environment. With a Swagger-enabled API, you get interactive documentation, client SDK generation and discoverability.
Swagger was created to help fulfill the promise of APIs and is 100% open source software.
The Swagger specification defines a set of files required to describe an API.</description>
    </item>
    
    <item>
      <title>wrk performance test</title>
      <link>https://networknt.github.io/light-4j/tools/wrk-perf/</link>
      <pubDate>Sat, 08 Oct 2016 21:47:07 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-4j/tools/wrk-perf/</guid>
      <description>Introduction For most API frameworks in Java, the server can only handle up to ten thousands request per second and Apache JMeter or Apache Bench will do the job. However, when we are talking about millions requests per second light-4j handles, they won&amp;rsquo;t work as these tools will use up all the cpu resources. For high performance testing, wrk is the best as it can send tens of millions requests per seconds on a commodity hardware.</description>
    </item>
    
    <item>
      <title>Hugo for project documentation on github</title>
      <link>https://networknt.github.io/light-4j/tools/hugo-docs/</link>
      <pubDate>Sat, 08 Oct 2016 19:25:24 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-4j/tools/hugo-docs/</guid>
      <description>Introduction This tutorial is written for Linux and Mac; however, it should not be hard to follow by Windows users.
For most open source developers, they would ues github.com to manage their projects and then have a README.md for documentation. For some bigger projects they might have wiki for additional documents and linked them from README.md.
Here I will introduce another way to manage documents in gh-pages with Hugo static site generator.</description>
    </item>
    
  </channel>
</rss>