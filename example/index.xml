<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Examples on Light 4J - A fast, lightweight Java microservices framework</title>
    <link>https://networknt.github.io/light-4j/example/</link>
    <description>Recent content in Examples on Light 4J - A fast, lightweight Java microservices framework</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <lastBuildDate>Wed, 25 Jan 2017 21:12:31 -0500</lastBuildDate>
    
	<atom:link href="https://networknt.github.io/light-4j/example/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Examples</title>
      <link>https://networknt.github.io/light-4j/example/</link>
      <pubDate>Wed, 25 Jan 2017 21:12:31 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-4j/example/</guid>
      <description>The following examples can be found in light-example-4j repository.
 Database - How to access database
 Microservices - How to build microservices
 Performance - Perforamnce comprison with other frameworks
 Petstore - Generated Petstore example service
 Routing - Demo how routing works
 Swagger - All swagger/OpenAPI specifications
 Web Server - How to integrate API server and Web server together
  </description>
    </item>
    
    <item>
      <title>Web Server</title>
      <link>https://networknt.github.io/light-4j/example/webserver/</link>
      <pubDate>Fri, 18 Nov 2016 08:25:10 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-4j/example/webserver/</guid>
      <description>Most documents and articles regarding to Light-4J are about RESTful or GraphQL or Hybrid services; however, there are a lot user cases that combine the API and static site rendering together, especially, single page applications built on top of React or Angular.
Handler Provider As we know, the Light-4J needs a plugin to inject application logic and for API project that is based on OpenAPI specification, this is generated by the light-codegen.</description>
    </item>
    
    <item>
      <title>swagger</title>
      <link>https://networknt.github.io/light-4j/example/swagger/</link>
      <pubDate>Sat, 22 Oct 2016 21:02:01 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-4j/example/swagger/</guid>
      <description>Introduction This is a project that contains all the swagger specifications for examples. Currently, only petstore.yaml and petstore.json are there.</description>
    </item>
    
    <item>
      <title>routing</title>
      <link>https://networknt.github.io/light-4j/example/routing/</link>
      <pubDate>Sat, 22 Oct 2016 21:00:30 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-4j/example/routing/</guid>
      <description>Introduction This is an example to show you how to use undertow routing handler.</description>
    </item>
    
    <item>
      <title>Performance</title>
      <link>https://networknt.github.io/light-4j/example/performance/</link>
      <pubDate>Sat, 22 Oct 2016 20:55:36 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-4j/example/performance/</guid>
      <description></description>
    </item>
    
    <item>
      <title>microservices</title>
      <link>https://networknt.github.io/light-4j/example/microservices/</link>
      <pubDate>Sat, 22 Oct 2016 20:48:04 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-4j/example/microservices/</guid>
      <description>Introduction This example contains four projects:
API A is calling API B and API C
API B is calling API D
This example shows:
 How to build microservices How to do API to API call with light-4j client component How to protect API with JWT token with scopes How to performance test APIs with wrk  There is a tutorial for these projects.
Note: these projects are not 100% completed yet.</description>
    </item>
    
    <item>
      <title>petstore</title>
      <link>https://networknt.github.io/light-4j/example/petstore/</link>
      <pubDate>Sat, 22 Oct 2016 20:40:35 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-4j/example/petstore/</guid>
      <description>Introduction Petstore is a generated RESTful API project based on OpenAPI specification found here.
Prepare Environment You need to have Java JDK 8 (I prefer OpenJDK but Oracle JDK will do), Maven, Git and Docker installed before starting this tutorial.
Assuming above software packages are installed, let&amp;rsquo;s create a workspace and clone the projects we need for the tutorial.
cd ~ mkdir workspace cd workspace git clone git@github.com:networknt/light-codegen.git git clone git@github.</description>
    </item>
    
    <item>
      <title>Database</title>
      <link>https://networknt.github.io/light-4j/example/database/</link>
      <pubDate>Sat, 22 Oct 2016 20:22:34 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-4j/example/database/</guid>
      <description>Introduction This example can be found at https://github.com/networknt/light-example-4j/tree/master/database
There are three parts in this projects:
 An API implemented on top of light-4j framework. Mysql database as part of the docker compose with init script. Postgres database as part of the docker compose with init script.  The project shows:
 How to use HikariCP for JDBC connection pool. How to initialize database connection pool and plug it into light-4j startup hooks.</description>
    </item>
    
  </channel>
</rss>