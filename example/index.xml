<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Examples on Light Java - The fastest Java API Framework</title>
    <link>https://networknt.github.io/light-java/example/index.xml</link>
    <description>Recent content in Examples on Light Java - The fastest Java API Framework</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <lastBuildDate>Wed, 25 Jan 2017 21:12:31 -0500</lastBuildDate>
    <atom:link href="https://networknt.github.io/light-java/example/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Examples</title>
      <link>https://networknt.github.io/light-java/example/</link>
      <pubDate>Wed, 25 Jan 2017 21:12:31 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-java/example/</guid>
      <description>&lt;p&gt;The following examples can be found in &lt;a href=&#34;https://github.com/networknt/light-java-example&#34;&gt;light-java-example&lt;/a&gt; repository.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://networknt.github.io/light-java/example/database/&#34;&gt;Database&lt;/a&gt; - How to access database&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://networknt.github.io/light-java/example/microservices/&#34;&gt;Microservices&lt;/a&gt; - How to build microservices&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://networknt.github.io/light-java/example/performance/&#34;&gt;Performance&lt;/a&gt; - Perforamnce comprison with other frameworks&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://networknt.github.io/light-java/example/petstore/&#34;&gt;Petstore&lt;/a&gt; - Generated Petstore example service&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://networknt.github.io/light-java/example/routing/&#34;&gt;Routing&lt;/a&gt; - Demo how routing works&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://networknt.github.io/light-java/example/swagger/&#34;&gt;Swagger&lt;/a&gt; - All swagger/OpenAPI specifications&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://networknt.github.io/light-java/example/webserver/&#34;&gt;Web Server&lt;/a&gt; - How to integrate API server and Web server together&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Web Server</title>
      <link>https://networknt.github.io/light-java/example/webserver/</link>
      <pubDate>Fri, 18 Nov 2016 08:25:10 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-java/example/webserver/</guid>
      <description>

&lt;p&gt;Most documents and articles regarding to Light-Java are about REST API; however,
there are a lot user cases that combine the API and static site rendering together,
especially, single page applications built on top of React or Angular.&lt;/p&gt;

&lt;h1 id=&#34;handler-provider&#34;&gt;Handler Provider&lt;/h1&gt;

&lt;p&gt;As we know, the Light-Java needs a plugin to inject application logic and for
API project that is based on OpenAPI specification, this is generated by the
&lt;a href=&#34;https://networknt.github.io/light-java/tools/swagger-codegen/&#34;&gt;swagger-codegen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The generated Handler Provider maps each endpoint to a corresponding handler
generated. For API server that need to serve static content along with APIs,
we need to wrap this map with Resource handler to serve static content. On top
of resource handler, we need a predicates handler to rewrite request to index.html
which can loaded your single page application.&lt;/p&gt;

&lt;p&gt;In the example web server, I redirect to index.html if path is not in the
following list.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/images&lt;/li&gt;
&lt;li&gt;/assets&lt;/li&gt;
&lt;li&gt;/api&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Above rules make sure that images and other asserts(css etc) can be loaded and
API endpoint will be started as /api/xxx&lt;/p&gt;

&lt;h1 id=&#34;web-server-configuration&#34;&gt;Web Server Configuration&lt;/h1&gt;

&lt;p&gt;In most of the case, each APP or API built on top of Light-Java framework will
have a configuration file to control how it behaves during runtime. Here is the
content of webserver.json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;base&amp;quot;: &amp;quot;/public&amp;quot;,
  &amp;quot;transferMinSize&amp;quot;: &amp;quot;100&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Given that base is defined as /public, we know the static content root will be
/public and all static content will be served from this folder or subfolders.&lt;/p&gt;

&lt;h1 id=&#34;location-of-static-content&#34;&gt;Location of static content&lt;/h1&gt;

&lt;p&gt;As Light-Java applications are packaged as a jar so the static content must be
served from somewhere inside the jar file. Where is the location for the static
content that can be mapped to /public?&lt;/p&gt;

&lt;p&gt;The answer is src/main/resources/public. As static content is loaded from /public
and internally it is based on the classpath. As we all know that resources is
part of the classpath.&lt;/p&gt;

&lt;h1 id=&#34;docker-container&#34;&gt;Docker Container&lt;/h1&gt;

&lt;p&gt;Above section describes how to serve static content from packaged jar file and it
is only suitable for development. When you deploy the app/api to official environment
with docker container, the /public must be externalized so that website can be updated
independently without repackage the server.&lt;/p&gt;

&lt;p&gt;Here is the Dockerfile in the example.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM insideo/jre8
EXPOSE 8080
ADD /target/webserver-0.1.0.jar server.jar
ADD /src/main/resources/public /public
CMD [&amp;quot;/bin/sh&amp;quot;,&amp;quot;-c&amp;quot;,&amp;quot;java -Dlight-java-config-dir=/config -jar /server.jar&amp;quot;]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The static contant in src/main/resources/public is added to the /public in the contain
and this folder can be mapped to host directory with -v if you want to update the site
in host file system.&lt;/p&gt;

&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;

&lt;p&gt;This example is very useful in self contained microservices that has a very
simple UI built on top of React or Angular. It give you an interface to
interact with the services running on the same instance.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>swagger</title>
      <link>https://networknt.github.io/light-java/example/swagger/</link>
      <pubDate>Sat, 22 Oct 2016 21:02:01 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java/example/swagger/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;This is a project that contains all the swagger specifications for examples. Currently, only petstore.yaml and petstore.json are there.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>routing</title>
      <link>https://networknt.github.io/light-java/example/routing/</link>
      <pubDate>Sat, 22 Oct 2016 21:00:30 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java/example/routing/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;This is an example to show you how to use undertow routing handler.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Performance</title>
      <link>https://networknt.github.io/light-java/example/performance/</link>
      <pubDate>Sat, 22 Oct 2016 20:55:36 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java/example/performance/</guid>
      <description>

&lt;p&gt;This is an example to compare performance between other microservices
platforms and Light Java framework. Source code can be found &lt;a href=&#34;https://github.com/networknt/light-java-example/tree/master/performance&#34;&gt;here&lt;/a&gt;
with the testing result on my desktop.&lt;/p&gt;

&lt;h2 id=&#34;test-results&#34;&gt;Test Results&lt;/h2&gt;

&lt;p&gt;Here is the light-java server performance.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;steve@joy:~/tool/wrk$  wrk -t4 -c128 -d30s http://localhost:8080 -s pipeline.lua --latency -- / 16
Running 30s test @ http://localhost:8080
  4 threads and 128 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency     2.46ms    3.83ms  85.33ms   89.36%
    Req/Sec   366.70k    62.79k  714.24k    79.06%
  Latency Distribution
     50%    1.05ms
     75%    2.69ms
     90%    6.58ms
     99%   17.43ms
  43814624 requests in 30.07s, 4.33GB read
Requests/sec: 1457257.99
Transfer/sec:    147.31MB

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the spring-boot-tomcat (tomcat embedded) performance.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;steve@joy:~/tool/wrk$  wrk -t4 -c128 -d30s http://localhost:8080 -s pipeline.lua --latency -- / 16
Running 30s test @ http://localhost:8080
  4 threads and 128 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    82.93ms  108.77ms   1.58s    89.45%
    Req/Sec     8.40k     3.68k   22.19k    68.54%
  Latency Distribution
     50%   45.66ms
     75%  101.59ms
     90%  197.72ms
     99%  542.87ms
  995431 requests in 30.09s, 119.79MB read
Requests/sec:  33086.22
Transfer/sec:      3.98MB

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the spring-boot-undertow (undertow embedded) performance.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;steve@joy:~/tool/wrk$ wrk -t4 -c128 -d30s http://localhost:8080 -s pipeline.lua --latency -- / 16
Running 30s test @ http://localhost:8080
  4 threads and 128 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    38.94ms   39.29ms 456.82ms   89.28%
    Req/Sec    11.21k     4.97k   28.16k    68.14%
  Latency Distribution
     50%   27.58ms
     75%   49.62ms
     90%   80.73ms
     99%  201.87ms
  1331312 requests in 30.08s, 192.98MB read
Requests/sec:  44260.61
Transfer/sec:      6.42MB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Basically, light-java is 44 times faster then sprint-boot with tomcat embedded just
for the raw performance to serve Hello World!&lt;/p&gt;

&lt;p&gt;In order to have a closer comparison, I have created another project spring-boot-undertow with embedded
undertow servlet container (light-java is using undertow core only) and the
performance is getting a little better. Light-Java is about 33 times faster than spring-boot with undertow embedded.&lt;/p&gt;

&lt;p&gt;Upon requests from the community, I have added nodejs and golang examples and here are the testing result.&lt;/p&gt;

&lt;p&gt;Node express framework.
To start the server&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd node-express
npm install
node server.js

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The test result.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;steve@joy:~/tool/wrk$ wrk -t4 -c128 -d30s http://localhost:8080 -s pipeline.lua --latency -- / 16
Running 30s test @ http://localhost:8080
  4 threads and 128 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    22.30ms   24.35ms 592.24ms   49.18%
    Req/Sec    10.70k     0.87k   11.95k    94.82%
  Latency Distribution
     50%   47.94ms
     75%    0.00us
     90%    0.00us
     99%    0.00us
  1274289 requests in 30.02s, 279.51MB read
Requests/sec:  42443.34
Transfer/sec:      9.31MB

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go Standard Http&lt;/p&gt;

&lt;p&gt;To start the server&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd go-http
go run server.go -prefork
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The testing result.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;steve@joy:~/tool/wrk$ wrk -t4 -c128 -d30s http://localhost:8080 -s pipeline.lua --latency -- / 16
Running 30s test @ http://localhost:8080
  4 threads and 128 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    15.01ms   15.35ms 180.11ms   87.10%
    Req/Sec    42.80k     5.46k   62.49k    70.58%
  Latency Distribution
     50%   10.03ms
     75%   19.96ms
     90%   34.55ms
     99%   72.99ms
  5123194 requests in 30.08s, 630.28MB read
Requests/sec: 170313.02
Transfer/sec:     20.95MB

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go FastHttp&lt;/p&gt;

&lt;p&gt;To start the server&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd go-fasthttp
go run server.go -prefork

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The testing result.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;steve@joy:~/tool/wrk$ wrk -t4 -c128 -d30s http://localhost:8080 -s pipeline.lua --latency -- / 16
Running 30s test @ http://localhost:8080
  4 threads and 128 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    99.98ms  127.12ms 653.72ms   82.12%
    Req/Sec   351.24k    46.23k  525.74k    77.09%
  Latency Distribution
     50%   30.76ms
     75%  175.44ms
     90%  299.14ms
     99%  476.20ms
  41989168 requests in 30.06s, 4.93GB read
Requests/sec: 1396685.83
Transfer/sec:    167.83MB

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After I post this online, one of spring developers recommended to test against Spring Boot with Reactor
which is Netty based without servlet container. I am very new to this and might miss something and everyone
is welcomed to submit pull request to enhance this project.&lt;/p&gt;

&lt;p&gt;Here is the test result.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;steve@joy:~/tool/wrk$ wrk -t4 -c128 -d30s http://localhost:3000 -s pipeline.lua --latency -- / 16
Running 30s test @ http://localhost:3000
  4 threads and 128 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency     7.44ms   12.88ms 285.71ms   94.23%
    Req/Sec    61.44k    12.25k   88.29k    79.23%
  Latency Distribution
     50%    4.62ms
     75%    8.11ms
     90%   15.03ms
     99%   42.60ms
  7305649 requests in 30.03s, 536.48MB read
Requests/sec: 243240.17
Transfer/sec:     17.86MB

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>microservices</title>
      <link>https://networknt.github.io/light-java/example/microservices/</link>
      <pubDate>Sat, 22 Oct 2016 20:48:04 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java/example/microservices/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;This example contains four projects:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/networknt/light-java-example/tree/master/api_a&#34;&gt;API A&lt;/a&gt; is calling &lt;a href=&#34;https://github.com/networknt/light-java-example/tree/master/api_b&#34;&gt;API B&lt;/a&gt; and &lt;a href=&#34;https://github.com/networknt/light-java-example/tree/master/api_c&#34;&gt;API C&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;API B is calling &lt;a href=&#34;https://github.com/networknt/light-java-example/tree/master/api_d&#34;&gt;API D&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This example shows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to build microservices&lt;/li&gt;
&lt;li&gt;How to do API to API call with light-java client component&lt;/li&gt;
&lt;li&gt;How to protect API with JWT token with scopes&lt;/li&gt;
&lt;li&gt;How to performance test APIs with wrk&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is a &lt;a href=&#34;https://networknt.github.io/light-java/tutorials/microservices/&#34;&gt;tutorial&lt;/a&gt; for these projects.&lt;/p&gt;

&lt;p&gt;Note: these projects are not 100% completed yet. I am going to dockerize them and then compose them with OAuth2 server.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>petstore</title>
      <link>https://networknt.github.io/light-java/example/petstore/</link>
      <pubDate>Sat, 22 Oct 2016 20:40:35 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java/example/petstore/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/networknt/light-java-example/tree/master/petstore&#34;&gt;Petstore&lt;/a&gt;
is a generated API project based on OpenAPI specification found &lt;a href=&#34;http://petstore.swagger.io/v2/swagger.json&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;prepare-environment&#34;&gt;Prepare Environment&lt;/h1&gt;

&lt;p&gt;You need to have Java JDK 8 (I prefer OpenJDK but Oracle JDK will do), Maven, Git and
Docker installed before starting this tutorial.&lt;/p&gt;

&lt;p&gt;Assuming above software packages are installed, let&amp;rsquo;s create a workspace and clone the
projects we need for the tutorial.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~
mkdir workspace
cd workspace
git clone git@github.com:networknt/swagger-codegen.git
git clone git@github.com:networknt/light-java-example.git
git clone git@github.com:networknt/light-oauth2.git
git clone git@github.com:networknt/light-docker.git 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are going to re-generate petstore project in light-java-example. So let&amp;rsquo;s rename
the directory to petstore.bak&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd light-java-example
mv petstore petstore.bak
cd ..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s build the swagger-codegen to make it ready to generate petstore project.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd swagger-codegen
mvn install -DskipTests
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;generate-project&#34;&gt;Generate project&lt;/h1&gt;

&lt;p&gt;This project will be updated constantly when a new version of Light-Java framework
is released or any updates in &lt;a href=&#34;https://github.com/networknt/swagger-codegen&#34;&gt;swagger-codegen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is the command line to generate this project from swagger-codegen directory. It
assumes that you have light-java-example cloned in the same working directory and
petstore directory is removed or renamed. If you keep the existing petstore, it will
generate other files but not handlers and test cases for handlers by default. When
you have new endpoints defined in the specification, then new handlers and handler
test cases will be generated.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;java -jar modules/swagger-codegen-cli/target/swagger-codegen-cli.jar generate -i http://petstore.swagger.io/v2/swagger.json -l light-java -o ~/workspace/light-java-example/petstore

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;build-and-start&#34;&gt;Build and Start&lt;/h1&gt;

&lt;p&gt;To build the generated server.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ..
cd light-java-example/petstore
mvn install exec:exec
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the server will be started and listens to port 8080.&lt;/p&gt;

&lt;h1 id=&#34;test&#34;&gt;Test&lt;/h1&gt;

&lt;p&gt;The best tool to test REST API is &lt;a href=&#34;https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?hl=en&#34;&gt;Postman&lt;/a&gt;
It is very easy to set headers and other parameters and save the configuration for
future usage.&lt;/p&gt;

&lt;p&gt;Some people like curl command line and it works as well. Here is one example to access
one of the endpoint petstore serves.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl localhost:8080/v2/pet/111
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the result looks like this. This is the generated example response based on swagger
specification.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{  &amp;quot;photoUrls&amp;quot; : [ &amp;quot;aeiou&amp;quot; ],  &amp;quot;name&amp;quot; : &amp;quot;doggie&amp;quot;,  &amp;quot;id&amp;quot; : 123456789,  &amp;quot;category&amp;quot; : {    &amp;quot;name&amp;quot; : &amp;quot;aeiou&amp;quot;,    &amp;quot;id&amp;quot; : 123456789  },  &amp;quot;tags&amp;quot; : [ {    &amp;quot;name&amp;quot; : &amp;quot;aeiou&amp;quot;,    &amp;quot;id&amp;quot; : 123456789  } ],  &amp;quot;status&amp;quot; : &amp;quot;aeiou&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, let&amp;rsquo;s test the server with an url that is not defined in the specification.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl localhost:8080/abc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the result is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{&amp;quot;statusCode&amp;quot;:404,&amp;quot;code&amp;quot;:&amp;quot;ERR10007&amp;quot;,&amp;quot;message&amp;quot;:&amp;quot;INVALID_REQUEST_PATH&amp;quot;,&amp;quot;description&amp;quot;:&amp;quot;Request path cannot be found in the spec.&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In fact, the specification is loaded into the framework at runtime and there is a
module called Validator that does the validation against specification for headers,
query parameters, uri parameters and body. It also supports validation using JSON
schema with a independent library &lt;a href=&#34;https://github.com/networknt/json-schema-validator&#34;&gt;json-schema-validator&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;enable-secrity&#34;&gt;Enable secrity&lt;/h1&gt;

&lt;p&gt;By default, the generated API has security turned off. You an turn on the JWT
verification by updating src/main/resources/config/security.json in petstore project.&lt;/p&gt;

&lt;p&gt;Here is the default security.json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;security configuration&amp;quot;,
  &amp;quot;enableVerifyJwt&amp;quot;: false,
  &amp;quot;enableVerifyScope&amp;quot;: true,
  &amp;quot;enableMockJwt&amp;quot;: false,
  &amp;quot;jwt&amp;quot;: {
    &amp;quot;certificate&amp;quot;: {
      &amp;quot;100&amp;quot;: &amp;quot;oauth/primary.crt&amp;quot;,
      &amp;quot;101&amp;quot;: &amp;quot;oauth/secondary.crt&amp;quot;
    },
    &amp;quot;clockSkewInSeconds&amp;quot;: 60
  },
  &amp;quot;logJwtToken&amp;quot;: true,
  &amp;quot;logClientUserScope&amp;quot;: false
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here is the updated security.json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;security configuration&amp;quot;,
  &amp;quot;enableVerifyJwt&amp;quot;: true,
  &amp;quot;enableVerifyScope&amp;quot;: true,
  &amp;quot;enableMockJwt&amp;quot;: false,
  &amp;quot;jwt&amp;quot;: {
    &amp;quot;certificate&amp;quot;: {
      &amp;quot;100&amp;quot;: &amp;quot;oauth/primary.crt&amp;quot;,
      &amp;quot;101&amp;quot;: &amp;quot;oauth/secondary.crt&amp;quot;
    },
    &amp;quot;clockSkewInSeconds&amp;quot;: 60
  },
  &amp;quot;logJwtToken&amp;quot;: true,
  &amp;quot;logClientUserScope&amp;quot;: false
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The updated security.json enabled JWT signature verification as well as scope
verification.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s shutdown the server by issuing a CTRL+C on the terminal. And restart the server
after repackage it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mvn package exec:exec
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the security enabled, the curl command won&amp;rsquo;t work anymore.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl localhost:8080/v2/pet/111
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Result:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{&amp;quot;statusCode&amp;quot;:401,&amp;quot;code&amp;quot;:&amp;quot;ERR10002&amp;quot;,&amp;quot;message&amp;quot;:&amp;quot;MISSING_AUTH_TOKEN&amp;quot;,&amp;quot;description&amp;quot;:&amp;quot;No Authorization header or the token is not bearer type&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to access it, you have to provide the right JWT token. There is a long lived
token that can be found at &lt;a href=&#34;https://github.com/networknt/light-oauth2&#34;&gt;https://github.com/networknt/light-oauth2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s use that token in curl.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -H &amp;quot;Authorization: Bearer eyJraWQiOiIxMDAiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1cm46Y29tOm5ldHdvcmtudDpvYXV0aDI6djEiLCJhdWQiOiJ1cm46Y29tLm5ldHdvcmtudCIsImV4cCI6MTc5NDg3MzA1MiwianRpIjoiSjFKdmR1bFFRMUF6cjhTNlJueHEwQSIsImlhdCI6MTQ3OTUxMzA1MiwibmJmIjoxNDc5NTEyOTMyLCJ2ZXJzaW9uIjoiMS4wIiwidXNlcl9pZCI6InN0ZXZlIiwidXNlcl90eXBlIjoiRU1QTE9ZRUUiLCJjbGllbnRfaWQiOiJmN2Q0MjM0OC1jNjQ3LTRlZmItYTUyZC00YzU3ODc0MjFlNzIiLCJzY29wZSI6WyJ3cml0ZTpwZXRzIiwicmVhZDpwZXRzIl19.gUcM-JxNBH7rtoRUlxmaK6P4xZdEOueEqIBNddAAx4SyWSy2sV7d7MjAog6k7bInXzV0PWOZZ-JdgTTSn6jTb4K3Je49BcGz1BRwzTslJIOwmvqyziF3lcg6aF5iWOTjmVEF0zXwMJtMc_IcF9FAA8iQi2s5l0DYgkMrjkQ3fBhWnopgfkzjbCuZU2mHDSQ6DJmomWpnE9hDxBp_lGjsQ73HWNNKN-XmBEzH-nz-K5-2wm_hiCq3d0BXm57VxuL7dxpnIwhOIMAYR04PvYHyz2S-Nu9dw6apenfyKe8-ydVt7KHnnWWmk1ErlFzCHmsDigJz0ku0QX59lM7xY5i4qA&amp;quot; localhost:8080/v2/pet/111
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we have the result:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{  &amp;quot;photoUrls&amp;quot; : [ &amp;quot;aeiou&amp;quot; ],  &amp;quot;name&amp;quot; : &amp;quot;doggie&amp;quot;,  &amp;quot;id&amp;quot; : 123456789,  &amp;quot;category&amp;quot; : {    &amp;quot;name&amp;quot; : &amp;quot;aeiou&amp;quot;,    &amp;quot;id&amp;quot; : 123456789  },  &amp;quot;tags&amp;quot; : [ {    &amp;quot;name&amp;quot; : &amp;quot;aeiou&amp;quot;,    &amp;quot;id&amp;quot; : 123456789  } ],  &amp;quot;status&amp;quot; : &amp;quot;aeiou&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;docker&#34;&gt;Docker&lt;/h1&gt;

&lt;p&gt;When petstore is generated, a default Dockerfile is there ready for any customization.
Let&amp;rsquo;s just use it to create a docker image and start a docker container. Make sure you
are in light-java-example/petstore folder.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker build -t networknt/example-petstore .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s start the docker container.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -d -p 8080:8080 networknt/example-petstore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In another terminal, run the curl to access the server.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -H &amp;quot;Authorization: Bearer eyJraWQiOiIxMDAiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1cm46Y29tOm5ldHdvcmtudDpvYXV0aDI6djEiLCJhdWQiOiJ1cm46Y29tLm5ldHdvcmtudCIsImV4cCI6MTc5NDg3MzA1MiwianRpIjoiSjFKdmR1bFFRMUF6cjhTNlJueHEwQSIsImlhdCI6MTQ3OTUxMzA1MiwibmJmIjoxNDc5NTEyOTMyLCJ2ZXJzaW9uIjoiMS4wIiwidXNlcl9pZCI6InN0ZXZlIiwidXNlcl90eXBlIjoiRU1QTE9ZRUUiLCJjbGllbnRfaWQiOiJmN2Q0MjM0OC1jNjQ3LTRlZmItYTUyZC00YzU3ODc0MjFlNzIiLCJzY29wZSI6WyJ3cml0ZTpwZXRzIiwicmVhZDpwZXRzIl19.gUcM-JxNBH7rtoRUlxmaK6P4xZdEOueEqIBNddAAx4SyWSy2sV7d7MjAog6k7bInXzV0PWOZZ-JdgTTSn6jTb4K3Je49BcGz1BRwzTslJIOwmvqyziF3lcg6aF5iWOTjmVEF0zXwMJtMc_IcF9FAA8iQi2s5l0DYgkMrjkQ3fBhWnopgfkzjbCuZU2mHDSQ6DJmomWpnE9hDxBp_lGjsQ73HWNNKN-XmBEzH-nz-K5-2wm_hiCq3d0BXm57VxuL7dxpnIwhOIMAYR04PvYHyz2S-Nu9dw6apenfyKe8-ydVt7KHnnWWmk1ErlFzCHmsDigJz0ku0QX59lM7xY5i4qA&amp;quot; localhost:8080/v2/pet/111
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the result should be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{  &amp;quot;photoUrls&amp;quot; : [ &amp;quot;aeiou&amp;quot; ],  &amp;quot;name&amp;quot; : &amp;quot;doggie&amp;quot;,  &amp;quot;id&amp;quot; : 123456789,  &amp;quot;category&amp;quot; : {    &amp;quot;name&amp;quot; : &amp;quot;aeiou&amp;quot;,    &amp;quot;id&amp;quot; : 123456789  },  &amp;quot;tags&amp;quot; : [ {    &amp;quot;name&amp;quot; : &amp;quot;aeiou&amp;quot;,    &amp;quot;id&amp;quot; : 123456789  } ],  &amp;quot;status&amp;quot; : &amp;quot;aeiou&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s shutdown the docker container. First use &amp;ldquo;docker ps&amp;rdquo; to find the container_id
and then issue docker stop with that container_id.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker ps
docker stop ad86cc533270
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next step, let&amp;rsquo;s push the docker image to docker hub. This assumes that you have
an account on docker hub. For me, I am going to push it to networknt/example-petstore.&lt;/p&gt;

&lt;p&gt;Please skip this step if you don&amp;rsquo;t have a docker hub account yet.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker images
docker tag 9f0b9fe29c44 networknt/example-petstore:latest
docker push networknt/example-petstore

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The example-petstore can be found at &lt;a href=&#34;https://hub.docker.com/u/networknt/dashboard/&#34;&gt;https://hub.docker.com/u/networknt/dashboard/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the following command can pull and run the docker image on your local if you have
docker installed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -d -p 8080:8080 networknt/example-petstore
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;metric&#34;&gt;Metric&lt;/h1&gt;

&lt;p&gt;In order to use oauth2(light-oauth2), metrics(Influxdb and Grafana) and
logging(Elasticsearch, Logstash and Kibana), we&amp;rsquo;ve cloned the light-docker repo.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s start all services defined in docker-compose.yml&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/workspace/light-docker
docker-compose up --build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First let&amp;rsquo;s make sure that Influxdb and Grafana can be accessed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://localhost:8083/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure Influxdb admin page is shown up and metrics database is created.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://localhost:3000/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure Grafana dashboard is up and you can login with admin/admin.&lt;/p&gt;

&lt;p&gt;Once both Influxdb and Grafana are up and running, let&amp;rsquo;s stop the example-petstore
container by issuing &amp;ldquo;docker ps&amp;rdquo; on another terminal to find out the container_id of
example-petstore. Note: there are several docker containers running so double check
you have picked the right container_id.&lt;/p&gt;

&lt;p&gt;Now run the following command to stop the example-petstore&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker stop [container_id of example-petstore]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the next step, we are going to start the same container with externalized metrics
config so that the server can connect to the Influxdb container to report the metrics.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s create a folder under /tmp and name it petstore. Within /tmp/petstore, create
another folder called config. Now create metrics.json in /tmp/petstore/config folder.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;Metrics handler configuration&amp;quot;,
  &amp;quot;enabled&amp;quot;: true,
  &amp;quot;influxdbProtocol&amp;quot;: &amp;quot;http&amp;quot;,
  &amp;quot;influxdbHost&amp;quot;: &amp;quot;influxdb&amp;quot;,
  &amp;quot;influxdbPort&amp;quot;: 8086,
  &amp;quot;influxdbName&amp;quot;: &amp;quot;metrics&amp;quot;,
  &amp;quot;influxdbUser&amp;quot;: &amp;quot;root&amp;quot;,
  &amp;quot;influxdbPass&amp;quot;: &amp;quot;root&amp;quot;,
  &amp;quot;reportInMinutes&amp;quot;: 1
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Please note that the above configuration is only for testing.&lt;/p&gt;

&lt;p&gt;Now start the container and linked to Influxdb.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -d -p 8080:8080 -v /tmp/petstore/config:/config --network=lightdocker_light networknt/example-petstore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Access the one endpint several with curl command and wait for one minute.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -H &amp;quot;Authorization: Bearer eyJraWQiOiIxMDAiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1cm46Y29tOm5ldHdvcmtudDpvYXV0aDI6djEiLCJhdWQiOiJ1cm46Y29tLm5ldHdvcmtudCIsImV4cCI6MTc5NDg3MzA1MiwianRpIjoiSjFKdmR1bFFRMUF6cjhTNlJueHEwQSIsImlhdCI6MTQ3OTUxMzA1MiwibmJmIjoxNDc5NTEyOTMyLCJ2ZXJzaW9uIjoiMS4wIiwidXNlcl9pZCI6InN0ZXZlIiwidXNlcl90eXBlIjoiRU1QTE9ZRUUiLCJjbGllbnRfaWQiOiJmN2Q0MjM0OC1jNjQ3LTRlZmItYTUyZC00YzU3ODc0MjFlNzIiLCJzY29wZSI6WyJ3cml0ZTpwZXRzIiwicmVhZDpwZXRzIl19.gUcM-JxNBH7rtoRUlxmaK6P4xZdEOueEqIBNddAAx4SyWSy2sV7d7MjAog6k7bInXzV0PWOZZ-JdgTTSn6jTb4K3Je49BcGz1BRwzTslJIOwmvqyziF3lcg6aF5iWOTjmVEF0zXwMJtMc_IcF9FAA8iQi2s5l0DYgkMrjkQ3fBhWnopgfkzjbCuZU2mHDSQ6DJmomWpnE9hDxBp_lGjsQ73HWNNKN-XmBEzH-nz-K5-2wm_hiCq3d0BXm57VxuL7dxpnIwhOIMAYR04PvYHyz2S-Nu9dw6apenfyKe8-ydVt7KHnnWWmk1ErlFzCHmsDigJz0ku0QX59lM7xY5i4qA&amp;quot; localhost:8080/v2/pet/111
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go to &lt;a href=&#34;http://localhost:8083/&#34;&gt;http://localhost:8083/&lt;/a&gt; and select metrics database and select &amp;ldquo;SHOW MEASUREMENTS&amp;rdquo;.
You will find several measurements created. Some of them are for api view and some of them
are for client view.&lt;/p&gt;

&lt;p&gt;You can connect Grafana to Influxdb and create dashboards on Grafana to visualize
the metrics.&lt;/p&gt;

&lt;h1 id=&#34;logging&#34;&gt;Logging&lt;/h1&gt;

&lt;p&gt;Logging is very important in microservices architecture as logs must be aggregated in
order to trace all the activities of a particular request from consumer. We are using
ELK stack for logging. In the above step, Elasticsearch, Logstash and Kibana are all
started in the same docker-compose.yml.&lt;/p&gt;

&lt;p&gt;In order for the example-petstore container to forward log files to ELK, we need to
set up log driver on the application container to forward logs to Logstash.&lt;/p&gt;

&lt;p&gt;Here is the command line to start the example-petstore&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export LOGSTASH_ADDRESS=$(docker inspect --format &#39;{{ .NetworkSettings.Networks.lightdocker_light.IPAddress }}&#39; lightdocker_logstash_1)
docker run -d -p 8080:8080 -v /tmp/petstore/config:/config --network=lightdocker_light --log-driver=gelf --log-opt gelf-address=udp://$LOGSTASH_ADDRESS:12201 --log-opt tag=&amp;quot;petstore&amp;quot; --log-opt env=dev networknt/example-petstore

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you example-petstore is up and running and all logs have sent to the Logstash and
then ElasticSearch. Let&amp;rsquo;s go to the Kibana to see if our logs can be viewed there.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://localhost:5601/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just select the default template and you can see the logs there.&lt;/p&gt;

&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;

&lt;p&gt;This conclude the petstore example on the dev environment; however, the steps are not for
production as there are a lot of security issues need to be addressed and containers
won&amp;rsquo;t be managed by docker-compose on production. Kubernetes or Docker Swarm will be utilized
likely. This is out of the scope for this tutorial for now.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>database</title>
      <link>https://networknt.github.io/light-java/example/database/</link>
      <pubDate>Sat, 22 Oct 2016 20:22:34 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java/example/database/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;This example can be found at &lt;a href=&#34;https://github.com/networknt/light-java-example/tree/master/database&#34;&gt;https://github.com/networknt/light-java-example/tree/master/database&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are three parts in this projects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An API implemented on top of light-java framework.&lt;/li&gt;
&lt;li&gt;Mysql database as part of the docker compose with init script.&lt;/li&gt;
&lt;li&gt;Postgres database as part of the docker compose with init script.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The project shows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to use &lt;a href=&#34;https://github.com/brettwooldridge/HikariCP&#34;&gt;HikariCP&lt;/a&gt; for JDBC connection pool.&lt;/li&gt;
&lt;li&gt;How to initialize database connection pool and plug it into light-java startup hooks.&lt;/li&gt;
&lt;li&gt;How to dockerize light-java application.&lt;/li&gt;
&lt;li&gt;How to compose databases with light-java application so that you can start all servers together.&lt;/li&gt;
&lt;li&gt;How to performance test API application with wrk.&lt;/li&gt;
&lt;li&gt;Postgres performs better than mysql on my i5 desktop.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>